(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["NextUI"] = factory(require("react"), require("react-dom"));
	else
		root["NextUI"] = factory(root["React"], root["ReactDOM"]);
})(self, function(__WEBPACK_EXTERNAL_MODULE__787__, __WEBPACK_EXTERNAL_MODULE__156__) {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 753:
/***/ ((module) => {

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/***/ }),

/***/ 334:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/** @license React v17.0.2
 * react-jsx-dev-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


__webpack_require__(753);

__webpack_require__(787);

exports.Fragment = 60107;

if ("function" === typeof Symbol && Symbol.for) {
  var a = Symbol.for;
  exports.Fragment = a("react.fragment");
}

exports.jsxDEV = void 0;

/***/ }),

/***/ 194:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (true) {
  module.exports = __webpack_require__(334);
} else {}

/***/ }),

/***/ 787:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__787__;

/***/ }),

/***/ 156:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__156__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Avatar": () => (/* reexport */ src_avatar),
  "Backdrop": () => (/* reexport */ src_backdrop),
  "Button": () => (/* reexport */ src_button),
  "Card": () => (/* reexport */ src_card),
  "Checkbox": () => (/* reexport */ src_checkbox),
  "Code": () => (/* reexport */ src_code),
  "Col": () => (/* reexport */ src_col),
  "Collapse": () => (/* reexport */ src_collapse),
  "Container": () => (/* reexport */ src_container),
  "CssBaseline": () => (/* reexport */ css_baseline),
  "Divider": () => (/* reexport */ src_divider),
  "Grid": () => (/* reexport */ src_grid),
  "Image": () => (/* reexport */ src_image),
  "Input": () => (/* reexport */ src_input),
  "KeyCode": () => (/* reexport */ KeyCode),
  "KeyMod": () => (/* reexport */ KeyMod),
  "Link": () => (/* reexport */ src_link),
  "Loading": () => (/* reexport */ src_loading),
  "Modal": () => (/* reexport */ src_modal),
  "NextUIProvider": () => (/* reexport */ theme_provider),
  "Pagination": () => (/* reexport */ src_pagination),
  "Progress": () => (/* reexport */ src_progress),
  "Radio": () => (/* reexport */ src_radio),
  "Row": () => (/* reexport */ src_row),
  "Snippet": () => (/* reexport */ src_snippet),
  "Spacer": () => (/* reexport */ src_spacer),
  "Spinner": () => (/* reexport */ loading_spinner),
  "StyledAvatar": () => (/* reexport */ StyledAvatar),
  "StyledAvatarGroup": () => (/* reexport */ StyledAvatarGroup),
  "StyledAvatarGroupCount": () => (/* reexport */ StyledAvatarGroupCount),
  "StyledBackdrop": () => (/* reexport */ StyledBackdrop),
  "StyledBackdropContent": () => (/* reexport */ StyledBackdropContent),
  "StyledBackdropLayer": () => (/* reexport */ StyledBackdropLayer),
  "StyledButton": () => (/* reexport */ StyledButton),
  "StyledButtonGroup": () => (/* reexport */ StyledButtonGroup),
  "StyledButtonIcon": () => (/* reexport */ StyledButtonIcon),
  "StyledCard": () => (/* reexport */ StyledCard),
  "StyledCardBody": () => (/* reexport */ StyledCardBody),
  "StyledCardFooter": () => (/* reexport */ StyledCardFooter),
  "StyledCardHeader": () => (/* reexport */ StyledCardHeader),
  "StyledCheckboxContainer": () => (/* reexport */ StyledCheckboxContainer),
  "StyledCheckboxGroup": () => (/* reexport */ StyledCheckboxGroup),
  "StyledCheckboxInput": () => (/* reexport */ StyledCheckboxInput),
  "StyledCheckboxLabel": () => (/* reexport */ StyledCheckboxLabel),
  "StyledCheckboxMask": () => (/* reexport */ StyledCheckboxMask),
  "StyledCheckboxText": () => (/* reexport */ StyledCheckboxText),
  "StyledCode": () => (/* reexport */ StyledCode),
  "StyledCol": () => (/* reexport */ StyledCol),
  "StyledCollapse": () => (/* reexport */ StyledCollapse),
  "StyledCollapseContent": () => (/* reexport */ StyledCollapseContent),
  "StyledCollapseGroup": () => (/* reexport */ StyledCollapseGroup),
  "StyledCollapseIcon": () => (/* reexport */ StyledCollapseIcon),
  "StyledCollapseView": () => (/* reexport */ StyledCollapseView),
  "StyledContainer": () => (/* reexport */ StyledContainer),
  "StyledDivider": () => (/* reexport */ StyledDivider),
  "StyledDividerText": () => (/* reexport */ StyledDividerText),
  "StyledGridContainer": () => (/* reexport */ StyledGridContainer),
  "StyledGridItem": () => (/* reexport */ StyledGridItem),
  "StyledHelperText": () => (/* reexport */ StyledHelperText),
  "StyledHelperTextContainer": () => (/* reexport */ StyledHelperTextContainer),
  "StyledIconCheck": () => (/* reexport */ StyledIconCheck),
  "StyledIconCheckFirstLine": () => (/* reexport */ StyledIconCheckFirstLine),
  "StyledIconCheckSecondLine": () => (/* reexport */ StyledIconCheckSecondLine),
  "StyledImage": () => (/* reexport */ StyledImage),
  "StyledImageContainer": () => (/* reexport */ StyledImageContainer),
  "StyledImageSkeleton": () => (/* reexport */ StyledImageSkeleton),
  "StyledInput": () => (/* reexport */ StyledInput),
  "StyledInputBlockLabel": () => (/* reexport */ StyledInputBlockLabel),
  "StyledInputClearButton": () => (/* reexport */ StyledInputClearButton),
  "StyledInputContainer": () => (/* reexport */ StyledInputContainer),
  "StyledInputContent": () => (/* reexport */ StyledInputContent),
  "StyledInputLabel": () => (/* reexport */ StyledInputLabel),
  "StyledInputMainContainer": () => (/* reexport */ StyledInputMainContainer),
  "StyledInputPlaceholder": () => (/* reexport */ StyledInputPlaceholder),
  "StyledInputWrapper": () => (/* reexport */ StyledInputWrapper),
  "StyledLink": () => (/* reexport */ StyledLink),
  "StyledLinkIcon": () => (/* reexport */ StyledLinkIcon),
  "StyledLoading": () => (/* reexport */ StyledLoading),
  "StyledLoadingContainer": () => (/* reexport */ StyledLoadingContainer),
  "StyledLoadingLabel": () => (/* reexport */ StyledLoadingLabel),
  "StyledModal": () => (/* reexport */ StyledModal),
  "StyledModalBody": () => (/* reexport */ StyledModalBody),
  "StyledModalCloseButton": () => (/* reexport */ StyledModalCloseButton),
  "StyledModalFooter": () => (/* reexport */ StyledModalFooter),
  "StyledModalHeader": () => (/* reexport */ StyledModalHeader),
  "StyledModalHideTab": () => (/* reexport */ StyledModalHideTab),
  "StyledPagination": () => (/* reexport */ StyledPagination),
  "StyledPaginationEllipsis": () => (/* reexport */ StyledPaginationEllipsis),
  "StyledPaginationHighlight": () => (/* reexport */ StyledPaginationHighlight),
  "StyledPaginationIcon": () => (/* reexport */ StyledPaginationIcon),
  "StyledPaginationItem": () => (/* reexport */ StyledPaginationItem),
  "StyledPaginationItemContent": () => (/* reexport */ StyledPaginationItemContent),
  "StyledPre": () => (/* reexport */ StyledPre),
  "StyledProgress": () => (/* reexport */ StyledProgress),
  "StyledProgressBar": () => (/* reexport */ StyledProgressBar),
  "StyledRadio": () => (/* reexport */ StyledRadio),
  "StyledRadioDescription": () => (/* reexport */ StyledRadioDescription),
  "StyledRadioGroup": () => (/* reexport */ StyledRadioGroup),
  "StyledRadioInput": () => (/* reexport */ StyledRadioInput),
  "StyledRadioLabel": () => (/* reexport */ StyledRadioLabel),
  "StyledRadioPoint": () => (/* reexport */ StyledRadioPoint),
  "StyledRow": () => (/* reexport */ StyledRow),
  "StyledSnippetCopyButton": () => (/* reexport */ StyledSnippetCopyButton),
  "StyledSnippetCopyButtonIcon": () => (/* reexport */ StyledSnippetCopyButtonIcon),
  "StyledSnippetPre": () => (/* reexport */ StyledSnippetPre),
  "StyledSpacer": () => (/* reexport */ StyledSpacer),
  "StyledSpinner": () => (/* reexport */ StyledSpinner),
  "StyledSpinnerContainer": () => (/* reexport */ StyledSpinnerContainer),
  "StyledSpinnerSpan": () => (/* reexport */ StyledSpinnerSpan),
  "StyledSwitch": () => (/* reexport */ StyledSwitch),
  "StyledSwitchCircle": () => (/* reexport */ StyledSwitchCircle),
  "StyledSwitchContainer": () => (/* reexport */ StyledSwitchContainer),
  "StyledSwitchInput": () => (/* reexport */ StyledSwitchInput),
  "StyledText": () => (/* reexport */ StyledText),
  "StyledTooltip": () => (/* reexport */ StyledTooltip),
  "StyledTooltipArrow": () => (/* reexport */ StyledTooltipArrow),
  "StyledTooltipContent": () => (/* reexport */ StyledTooltipContent),
  "StyledTooltipTrigger": () => (/* reexport */ StyledTooltipTrigger),
  "StyledUser": () => (/* reexport */ StyledUser),
  "StyledUserInfo": () => (/* reexport */ StyledUserInfo),
  "StyledUserLink": () => (/* reexport */ StyledUserLink),
  "StyledUserName": () => (/* reexport */ StyledUserName),
  "StyledUserSocial": () => (/* reexport */ StyledUserSocial),
  "Switch": () => (/* reexport */ src_switch),
  "Text": () => (/* reexport */ src_text),
  "Textarea": () => (/* reexport */ src_textarea),
  "Tooltip": () => (/* reexport */ src_tooltip),
  "User": () => (/* reexport */ src_user),
  "changeTheme": () => (/* reexport */ changeTheme),
  "config": () => (/* reexport */ config),
  "createTheme": () => (/* reexport */ createTheme),
  "css": () => (/* reexport */ css),
  "defaultTheme": () => (/* reexport */ theme),
  "excludedInputPropsForTextarea": () => (/* reexport */ excludedInputPropsForTextarea),
  "extendedColors": () => (/* reexport */ extendedColors),
  "extendedColorsNoGradient": () => (/* reexport */ extendedColorsNoGradient),
  "extraColors": () => (/* reexport */ extraColors),
  "getCssText": () => (/* reexport */ getCssText),
  "getDocumentTheme": () => (/* reexport */ getDocumentTheme),
  "getTokenValue": () => (/* reexport */ getTokenValue),
  "globalCss": () => (/* reexport */ globalCss),
  "keyframes": () => (/* reexport */ keyframes),
  "normalColors": () => (/* reexport */ normalColors),
  "normalLoaders": () => (/* reexport */ normalLoaders),
  "normalWeights": () => (/* reexport */ normalWeights),
  "sharedFocus": () => (/* reexport */ sharedFocus),
  "sharedVisuallyHidden": () => (/* reexport */ sharedVisuallyHidden),
  "simpleColors": () => (/* reexport */ simpleColors),
  "stitchesConfig": () => (/* reexport */ config),
  "styled": () => (/* reexport */ styled),
  "textTransforms": () => (/* reexport */ textTransforms),
  "textWeights": () => (/* reexport */ textWeights),
  "theme": () => (/* reexport */ theme),
  "tuple": () => (/* reexport */ tuple),
  "useBodyScroll": () => (/* reexport */ src_use_body_scroll),
  "useClickAnywhere": () => (/* reexport */ src_use_click_anywhere),
  "useClickAway": () => (/* reexport */ src_use_click_away),
  "useClipboard": () => (/* reexport */ src_use_clipboard),
  "useCurrentState": () => (/* reexport */ src_use_current_state),
  "useInput": () => (/* reexport */ src_use_input),
  "useKeyboard": () => (/* reexport */ src_use_keyboard),
  "useModal": () => (/* reexport */ use_modal),
  "usePagination": () => (/* reexport */ use_pagination),
  "usePortal": () => (/* reexport */ src_use_portal),
  "useRealShape": () => (/* reexport */ src_use_real_shape),
  "useResize": () => (/* reexport */ src_use_resize),
  "useSSR": () => (/* reexport */ src_use_ssr),
  "useTheme": () => (/* reexport */ src_use_theme)
});

;// CONCATENATED MODULE: ./src/utils/prop-types.ts
const tuple = (...args) => args;
const normalSizes = tuple('xs', 'sm', 'md', 'lg', 'xl');
const normalColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'gradient');
const simpleColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error');
const extendedColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'invert', 'gradient');
const extendedColorsNoGradient = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'invert');
const extraColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'dark', 'lite', 'alert', 'purple', 'violet', 'gradient', 'cyan');
const normalLoaders = tuple('default', 'points', 'points-opacity', 'gradient', 'spinner');
const normalWeights = tuple('light', 'normal', 'bold', 'extrabold', 'black');
const textWeights = tuple(
/* Keyword values */
'normal', 'bold',
/* Keyword values relative to the parent */
'lighter', 'bolder',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
const textTransforms = tuple(
/* Keyword values */
'none', 'capitalize', 'uppercase', 'lowercase', 'full-width', 'full-size-kana',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
const copyTypes = tuple('default', 'slient', 'prevent');
const triggerTypes = tuple('hover', 'click');
const placement = tuple('top', 'topStart', 'topEnd', 'left', 'leftStart', 'leftEnd', 'bottom', 'bottomStart', 'bottomEnd', 'right', 'rightStart', 'rightEnd');
const position = tuple('static', 'relative', 'absolute', 'fixed', 'sticky',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
const objectFit = tuple('contain', 'cover', 'fill', 'none', 'scale-down',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
const dividerAlign = tuple('start', 'center', 'end', 'left', 'right');
const justify = tuple('flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly');
const alignItems = tuple('flex-start', 'flex-end', 'center', 'stretch', 'baseline');
const alignContent = tuple('stretch', 'center', 'flex-start', 'flex-end', 'space-between', 'space-around');
const direction = tuple('row', 'row-reverse', 'column', 'column-reverse');
const wrap = tuple('nowrap', 'wrap', 'wrap-reverse');
const display = tuple('flex', 'block', 'grid', 'inline', 'inline-block', 'inline-flex', 'inline-grid');
const contentPosition = tuple('left', 'right');
const excludedInputPropsForTextarea = tuple('clearable', 'as', 'rounded', 'labelLeft', 'labelRight', 'contentLeft', 'contentRight', 'contentClickable', 'contentLeftStyling', 'contentRightStyling', 'onContentClick', 'onClearClick', 'css');
// EXTERNAL MODULE: external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react"}
var external_root_React_commonjs2_react_commonjs_react_amd_react_ = __webpack_require__(787);
var external_root_React_commonjs2_react_commonjs_react_amd_react_default = /*#__PURE__*/__webpack_require__.n(external_root_React_commonjs2_react_commonjs_react_amd_react_);
;// CONCATENATED MODULE: ./src/use-current-state/use-current-state.ts


const useCurrentState = initialState => {
  const [state, setState] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(() => {
    return typeof initialState === 'function' ? initialState() : initialState;
  });
  const ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(initialState);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    ref.current = state;
  }, [state]);

  const setValue = val => {
    const result = typeof val === 'function' ? val(ref.current) : val;
    ref.current = result;
    setState(result);
  };

  return [state, setValue, ref];
};

/* harmony default export */ const use_current_state = (useCurrentState);
;// CONCATENATED MODULE: ./src/use-current-state/index.ts

/* harmony default export */ const src_use_current_state = (use_current_state);
;// CONCATENATED MODULE: ./src/use-real-shape/use-real-shape.ts


const getCSSStyleVal = (str, parentNum) => {
  if (!str) return 0;
  const strVal = str.includes('px') ? +str.split('px')[0] : str.includes('%') ? +str.split('%')[0] * parentNum * 0.01 : str;
  return Number.isNaN(+strVal) ? 0 : +strVal;
};

const getRealShape = el => {
  const defaultShape = {
    width: 0,
    height: 0
  };
  if (!el || typeof window === 'undefined') return defaultShape;
  const rect = el.getBoundingClientRect();
  const {
    width,
    height
  } = window.getComputedStyle(el);
  return {
    width: getCSSStyleVal(`${width}`, rect.width),
    height: getCSSStyleVal(`${height}`, rect.height)
  };
};

const useRealShape = ref => {
  const [state, setState] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)({
    width: 0,
    height: 0
  });

  const update = () => {
    const {
      width,
      height
    } = getRealShape(ref.current);
    setState({
      width,
      height
    });
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => update(), [ref.current]);
  return [state, update];
};

/* harmony default export */ const use_real_shape = (useRealShape);
;// CONCATENATED MODULE: ./src/use-real-shape/index.ts

/* harmony default export */ const src_use_real_shape = (use_real_shape);
;// CONCATENATED MODULE: ./src/use-resize/use-resize.ts


const useResize = (callback, immediatelyInvoke = true) => {
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const fn = () => callback();

    if (immediatelyInvoke) {
      fn();
    }

    window.addEventListener('resize', fn);
    return () => window.removeEventListener('resize', fn);
  }, []);
};

/* harmony default export */ const use_resize = (useResize);
;// CONCATENATED MODULE: ./src/use-resize/index.ts

/* harmony default export */ const src_use_resize = (use_resize);
;// CONCATENATED MODULE: ../../node_modules/@stitches/react/dist/index.mjs
var e="colors",t="sizes",r="space",n={gap:r,gridGap:r,columnGap:r,gridColumnGap:r,rowGap:r,gridRowGap:r,inset:r,insetBlock:r,insetBlockEnd:r,insetBlockStart:r,insetInline:r,insetInlineEnd:r,insetInlineStart:r,margin:r,marginTop:r,marginRight:r,marginBottom:r,marginLeft:r,marginBlock:r,marginBlockEnd:r,marginBlockStart:r,marginInline:r,marginInlineEnd:r,marginInlineStart:r,padding:r,paddingTop:r,paddingRight:r,paddingBottom:r,paddingLeft:r,paddingBlock:r,paddingBlockEnd:r,paddingBlockStart:r,paddingInline:r,paddingInlineEnd:r,paddingInlineStart:r,top:r,right:r,bottom:r,left:r,scrollMargin:r,scrollMarginTop:r,scrollMarginRight:r,scrollMarginBottom:r,scrollMarginLeft:r,scrollMarginX:r,scrollMarginY:r,scrollMarginBlock:r,scrollMarginBlockEnd:r,scrollMarginBlockStart:r,scrollMarginInline:r,scrollMarginInlineEnd:r,scrollMarginInlineStart:r,scrollPadding:r,scrollPaddingTop:r,scrollPaddingRight:r,scrollPaddingBottom:r,scrollPaddingLeft:r,scrollPaddingX:r,scrollPaddingY:r,scrollPaddingBlock:r,scrollPaddingBlockEnd:r,scrollPaddingBlockStart:r,scrollPaddingInline:r,scrollPaddingInlineEnd:r,scrollPaddingInlineStart:r,fontSize:"fontSizes",background:e,backgroundColor:e,backgroundImage:e,borderImage:e,border:e,borderBlock:e,borderBlockEnd:e,borderBlockStart:e,borderBottom:e,borderBottomColor:e,borderColor:e,borderInline:e,borderInlineEnd:e,borderInlineStart:e,borderLeft:e,borderLeftColor:e,borderRight:e,borderRightColor:e,borderTop:e,borderTopColor:e,caretColor:e,color:e,columnRuleColor:e,fill:e,outline:e,outlineColor:e,stroke:e,textDecorationColor:e,fontFamily:"fonts",fontWeight:"fontWeights",lineHeight:"lineHeights",letterSpacing:"letterSpacings",blockSize:t,minBlockSize:t,maxBlockSize:t,inlineSize:t,minInlineSize:t,maxInlineSize:t,width:t,minWidth:t,maxWidth:t,height:t,minHeight:t,maxHeight:t,flexBasis:t,gridTemplateColumns:t,gridTemplateRows:t,borderWidth:"borderWidths",borderTopWidth:"borderWidths",borderRightWidth:"borderWidths",borderBottomWidth:"borderWidths",borderLeftWidth:"borderWidths",borderStyle:"borderStyles",borderTopStyle:"borderStyles",borderRightStyle:"borderStyles",borderBottomStyle:"borderStyles",borderLeftStyle:"borderStyles",borderRadius:"radii",borderTopLeftRadius:"radii",borderTopRightRadius:"radii",borderBottomRightRadius:"radii",borderBottomLeftRadius:"radii",boxShadow:"shadows",textShadow:"shadows",transition:"transitions",zIndex:"zIndices"},i=(e,t)=>"function"==typeof t?{"()":Function.prototype.toString.call(t)}:t,o=()=>{const e=Object.create(null);return(t,r,...n)=>{const o=(e=>JSON.stringify(e,i))(t);return o in e?e[o]:e[o]=r(t,...n)}},l=Symbol.for("sxs.internal"),s=(e,t)=>Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)),a=e=>{for(const t in e)return!0;return!1},{hasOwnProperty:c}=Object.prototype,d=e=>e.includes("-")?e:e.replace(/[A-Z]/g,(e=>"-"+e.toLowerCase())),g=/\s+(?![^()]*\))/,p=e=>t=>e(..."string"==typeof t?String(t).split(g):[t]),u={appearance:e=>({WebkitAppearance:e,appearance:e}),backfaceVisibility:e=>({WebkitBackfaceVisibility:e,backfaceVisibility:e}),backdropFilter:e=>({WebkitBackdropFilter:e,backdropFilter:e}),backgroundClip:e=>({WebkitBackgroundClip:e,backgroundClip:e}),boxDecorationBreak:e=>({WebkitBoxDecorationBreak:e,boxDecorationBreak:e}),clipPath:e=>({WebkitClipPath:e,clipPath:e}),content:e=>({content:e.includes('"')||e.includes("'")||/^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e)?e:`"${e}"`}),hyphens:e=>({WebkitHyphens:e,hyphens:e}),maskImage:e=>({WebkitMaskImage:e,maskImage:e}),maskSize:e=>({WebkitMaskSize:e,maskSize:e}),tabSize:e=>({MozTabSize:e,tabSize:e}),textSizeAdjust:e=>({WebkitTextSizeAdjust:e,textSizeAdjust:e}),userSelect:e=>({WebkitUserSelect:e,userSelect:e}),marginBlock:p(((e,t)=>({marginBlockStart:e,marginBlockEnd:t||e}))),marginInline:p(((e,t)=>({marginInlineStart:e,marginInlineEnd:t||e}))),maxSize:p(((e,t)=>({maxBlockSize:e,maxInlineSize:t||e}))),minSize:p(((e,t)=>({minBlockSize:e,minInlineSize:t||e}))),paddingBlock:p(((e,t)=>({paddingBlockStart:e,paddingBlockEnd:t||e}))),paddingInline:p(((e,t)=>({paddingInlineStart:e,paddingInlineEnd:t||e})))},h=/([\d.]+)([^]*)/,f=(e,t)=>e.length?e.reduce(((e,r)=>(e.push(...t.map((e=>e.includes("&")?e.replace(/&/g,/[ +>|~]/.test(r)&&/&.*&/.test(e)?`:is(${r})`:r):r+" "+e))),e)),[]):t,m=(e,t)=>e in b&&"string"==typeof t?t.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/,((t,r,n,i)=>r+("stretch"===n?`-moz-available${i};${d(e)}:${r}-webkit-fill-available`:`-moz-fit-content${i};${d(e)}:${r}fit-content`)+i)):String(t),b={blockSize:1,height:1,inlineSize:1,maxBlockSize:1,maxHeight:1,maxInlineSize:1,maxWidth:1,minBlockSize:1,minHeight:1,minInlineSize:1,minWidth:1,width:1},S=e=>e?e+"-":"",k=(e,t,r)=>e.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g,((e,n,i,o,l)=>"$"==o==!!i?e:(n||"--"==o?"calc(":"")+"var(--"+("$"===o?S(t)+(l.includes("$")?"":S(r))+l.replace(/\$/g,"-"):l)+")"+(n||"--"==o?"*"+(n||"")+(i||"1")+")":""))),y=/\s*,\s*(?![^()]*\))/,B=Object.prototype.toString,$=(e,t,r,n,i)=>{let o,l,s;const a=(e,t,r)=>{let c,g;const p=e=>{for(c in e){const R=64===c.charCodeAt(0),z=R&&Array.isArray(e[c])?e[c]:[e[c]];for(g of z){const e=/[A-Z]/.test($=c)?$:$.replace(/-[^]/g,(e=>e[1].toUpperCase())),z="object"==typeof g&&g&&g.toString===B&&(!n.utils[e]||!t.length);if(e in n.utils&&!z){const t=n.utils[e];if(t!==l){l=t,p(t(g)),l=null;continue}}else if(e in u){const t=u[e];if(t!==s){s=t,p(t(g)),s=null;continue}}if(R&&(b=c.slice(1)in n.media?"@media "+n.media[c.slice(1)]:c,c=b.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g,((e,t,r,n,i,o)=>{const l=h.test(t),s=.0625*(l?-1:1),[a,c]=l?[n,t]:[t,n];return"("+("="===r[0]?"":">"===r[0]===l?"max-":"min-")+a+":"+("="!==r[0]&&1===r.length?c.replace(h,((e,t,n)=>Number(t)+s*(">"===r?1:-1)+n)):c)+(i?") and ("+(">"===i[0]?"min-":"max-")+a+":"+(1===i.length?o.replace(h,((e,t,r)=>Number(t)+s*(">"===i?-1:1)+r)):o):"")+")"}))),z){const e=R?r.concat(c):[...r],n=R?[...t]:f(t,c.split(y));void 0!==o&&i(x(...o)),o=void 0,a(g,n,e)}else void 0===o&&(o=[[],t,r]),c=R||36!==c.charCodeAt(0)?c:`--${S(n.prefix)}${c.slice(1).replace(/\$/g,"-")}`,g=z?g:"number"==typeof g?g&&e in I?String(g)+"px":String(g):k(m(e,null==g?"":g),n.prefix,n.themeMap[e]),o[0].push(`${R?`${c} `:`${d(c)}:`}${g}`)}}var b,$};p(e),void 0!==o&&i(x(...o)),o=void 0};a(e,t,r)},x=(e,t,r)=>`${r.map((e=>`${e}{`)).join("")}${t.length?`${t.join(",")}{`:""}${e.join(";")}${t.length?"}":""}${Array(r.length?r.length+1:0).join("}")}`,I={animationDelay:1,animationDuration:1,backgroundSize:1,blockSize:1,border:1,borderBlock:1,borderBlockEnd:1,borderBlockEndWidth:1,borderBlockStart:1,borderBlockStartWidth:1,borderBlockWidth:1,borderBottom:1,borderBottomLeftRadius:1,borderBottomRightRadius:1,borderBottomWidth:1,borderEndEndRadius:1,borderEndStartRadius:1,borderInlineEnd:1,borderInlineEndWidth:1,borderInlineStart:1,borderInlineStartWidth:1,borderInlineWidth:1,borderLeft:1,borderLeftWidth:1,borderRadius:1,borderRight:1,borderRightWidth:1,borderSpacing:1,borderStartEndRadius:1,borderStartStartRadius:1,borderTop:1,borderTopLeftRadius:1,borderTopRightRadius:1,borderTopWidth:1,borderWidth:1,bottom:1,columnGap:1,columnRule:1,columnRuleWidth:1,columnWidth:1,containIntrinsicSize:1,flexBasis:1,fontSize:1,gap:1,gridAutoColumns:1,gridAutoRows:1,gridTemplateColumns:1,gridTemplateRows:1,height:1,inlineSize:1,inset:1,insetBlock:1,insetBlockEnd:1,insetBlockStart:1,insetInline:1,insetInlineEnd:1,insetInlineStart:1,left:1,letterSpacing:1,margin:1,marginBlock:1,marginBlockEnd:1,marginBlockStart:1,marginBottom:1,marginInline:1,marginInlineEnd:1,marginInlineStart:1,marginLeft:1,marginRight:1,marginTop:1,maxBlockSize:1,maxHeight:1,maxInlineSize:1,maxWidth:1,minBlockSize:1,minHeight:1,minInlineSize:1,minWidth:1,offsetDistance:1,offsetRotate:1,outline:1,outlineOffset:1,outlineWidth:1,overflowClipMargin:1,padding:1,paddingBlock:1,paddingBlockEnd:1,paddingBlockStart:1,paddingBottom:1,paddingInline:1,paddingInlineEnd:1,paddingInlineStart:1,paddingLeft:1,paddingRight:1,paddingTop:1,perspective:1,right:1,rowGap:1,scrollMargin:1,scrollMarginBlock:1,scrollMarginBlockEnd:1,scrollMarginBlockStart:1,scrollMarginBottom:1,scrollMarginInline:1,scrollMarginInlineEnd:1,scrollMarginInlineStart:1,scrollMarginLeft:1,scrollMarginRight:1,scrollMarginTop:1,scrollPadding:1,scrollPaddingBlock:1,scrollPaddingBlockEnd:1,scrollPaddingBlockStart:1,scrollPaddingBottom:1,scrollPaddingInline:1,scrollPaddingInlineEnd:1,scrollPaddingInlineStart:1,scrollPaddingLeft:1,scrollPaddingRight:1,scrollPaddingTop:1,shapeMargin:1,textDecoration:1,textDecorationThickness:1,textIndent:1,textUnderlineOffset:1,top:1,transitionDelay:1,transitionDuration:1,verticalAlign:1,width:1,wordSpacing:1},R=e=>String.fromCharCode(e+(e>25?39:97)),z=e=>(e=>{let t,r="";for(t=Math.abs(e);t>52;t=t/52|0)r=R(t%52)+r;return R(t%52)+r})(((e,t)=>{let r=t.length;for(;r;)e=33*e^t.charCodeAt(--r);return e})(5381,JSON.stringify(e))>>>0),W=["themed","global","styled","onevar","resonevar","allvar","inline"],j=e=>{if(e.href&&!e.href.startsWith(location.origin))return!1;try{return e.cssRules,!0}catch(e){return!1}},E=e=>{let t;const r=()=>{if(t){const{rules:e,sheet:r}=t;if(!r.deleteRule){for(;3===Object(Object(r.cssRules)[0]).type;)r.cssRules.splice(0,1);r.cssRules=[]}for(const t in e)delete e[t]}const n=Object(e).styleSheets||[];for(const e of n)if(j(e)){for(let n=0,i=e.cssRules;i[n];++n){const o=Object(i[n]);if(1!==o.type)continue;const l=Object(i[n+1]);if(4!==l.type)continue;++n;const{cssText:s}=o;if(!s.startsWith("--sxs"))continue;const a=s.slice(14,-3).trim().split(/\s+/),c=W[a[0]];c&&(t||(t={sheet:e,reset:r,rules:{}}),t.rules[c]={group:l,index:n,cache:new Set(a)})}if(t)break}if(!t){const n=(e,t)=>({type:t,cssRules:[],insertRule(e,t){this.cssRules.splice(t,0,n(e,{import:3,undefined:1}[(e.toLowerCase().match(/^@([a-z]+)/)||[])[1]]||4))},get cssText(){return"@media{}"===e?`@media{${[].map.call(this.cssRules,(e=>e.cssText)).join("")}}`:e}});t={sheet:e?(e.head||e).appendChild(document.createElement("style")).sheet:n("","text/css"),rules:{},reset:r,toString(){const{cssRules:e}=t.sheet;return[].map.call(e,((r,n)=>{const{cssText:i}=r;let o="";if(i.startsWith("--sxs"))return"";if(e[n-1]&&(o=e[n-1].cssText).startsWith("--sxs")){if(!r.cssRules.length)return"";for(const e in t.rules)if(t.rules[e].group===r)return`--sxs{--sxs:${[...t.rules[e].cache].join(" ")}}${i}`;return r.cssRules.length?`${o}${i}`:""}return i})).join("")}}}const{sheet:i,rules:o}=t;for(let e=W.length-1;e>=0;--e){const t=W[e];if(!o[t]){const r=W[e+1],n=o[r]?o[r].index:i.cssRules.length;i.insertRule("@media{}",n),i.insertRule(`--sxs{--sxs:${e}}`,n),o[t]={group:i.cssRules[n+1],index:n,cache:new Set([e])}}v(o[t])}};return r(),t},v=e=>{const t=e.group;let r=t.cssRules.length;e.apply=e=>{try{t.insertRule(e,r),++r}catch{}}},T=Symbol(),w=o(),M=(e,t)=>w(e,(()=>(...r)=>{let n={type:null,composers:new Set};for(const t of r)if(null!=t)if(t[l]){null==n.type&&(n.type=t[l].type);for(const e of t[l].composers)n.composers.add(e)}else t.constructor!==Object||t.$$typeof?null==n.type&&(n.type=t):n.composers.add(C(t,e));return null==n.type&&(n.type="span"),n.composers.size||n.composers.add(["PJLV",{},[],[],{},[]]),P(e,n,t)})),C=({variants:e,compoundVariants:t,defaultVariants:r,...n},i)=>{const o=`${S(i.prefix)}c-${z(n)}`,l=[],s=[],d=Object.create(null),g=[];for(const e in r)d[e]=String(r[e]);if("object"==typeof e&&e)for(const t in e){p=d,u=t,c.call(p,u)||(d[t]="undefined");const r=e[t];for(const e in r){const n={[t]:String(e)};"undefined"===String(e)&&g.push(t);const i=r[e],o=[n,i,!a(i)];l.push(o)}}var p,u;if("object"==typeof t&&t)for(const e of t){let{css:t,...r}=e;t="object"==typeof t&&t||{};for(const e in r)r[e]=String(r[e]);const n=[r,t,!a(t)];s.push(n)}return[o,n,l,s,d,g]},P=(e,t,r)=>{const[n,i,o,a]=L(t.composers),c="function"==typeof t.type||t.type.$$typeof?(e=>{function t(){for(let r=0;r<t[T].length;r++){const[n,i]=t[T][r];e.rules[n].apply(i)}return t[T]=[],null}return t[T]=[],t.rules={},W.forEach((e=>t.rules[e]={apply:r=>t[T].push([e,r])})),t})(r):null,d=(c||r).rules,g=`.${n}${i.length>1?`:where(.${i.slice(1).join(".")})`:""}`,p=l=>{l="object"==typeof l&&l||A;const{css:s,...p}=l,u={};for(const e in o)if(delete p[e],e in l){let t=l[e];"object"==typeof t&&t?u[e]={"@initial":o[e],...t}:(t=String(t),u[e]="undefined"!==t||a.has(e)?t:o[e])}else u[e]=o[e];const h=new Set([...i]);for(const[n,i,o,l]of t.composers){r.rules.styled.cache.has(n)||(r.rules.styled.cache.add(n),$(i,[`.${n}`],[],e,(e=>{d.styled.apply(e)})));const t=O(o,u,e.media),s=O(l,u,e.media,!0);for(const i of t)if(void 0!==i)for(const[t,o,l]of i){const i=`${n}-${z(o)}-${t}`;h.add(i);const s=(l?r.rules.resonevar:r.rules.onevar).cache,a=l?d.resonevar:d.onevar;s.has(i)||(s.add(i),$(o,[`.${i}`],[],e,(e=>{a.apply(e)})))}for(const t of s)if(void 0!==t)for(const[i,o]of t){const t=`${n}-${z(o)}-${i}`;h.add(t),r.rules.allvar.cache.has(t)||(r.rules.allvar.cache.add(t),$(o,[`.${t}`],[],e,(e=>{d.allvar.apply(e)})))}}if("object"==typeof s&&s){const t=`${n}-i${z(s)}-css`;h.add(t),r.rules.inline.cache.has(t)||(r.rules.inline.cache.add(t),$(s,[`.${t}`],[],e,(e=>{d.inline.apply(e)})))}for(const e of String(l.className||"").trim().split(/\s+/))e&&h.add(e);const f=p.className=[...h].join(" ");return{type:t.type,className:f,selector:g,props:p,toString:()=>f,deferredInjector:c}};return s(p,{className:n,selector:g,[l]:t,toString:()=>(r.rules.styled.cache.has(n)||p(),n)})},L=e=>{let t="";const r=[],n={},i=[];for(const[o,,,,l,s]of e){""===t&&(t=o),r.push(o),i.push(...s);for(const e in l){const t=l[e];(void 0===n[e]||"undefined"!==t||s.includes(t))&&(n[e]=t)}}return[t,r,n,new Set(i)]},O=(e,t,r,n)=>{const i=[];e:for(let[o,l,s]of e){if(s)continue;let e,a=0,c=!1;for(e in o){const n=o[e];let i=t[e];if(i!==n){if("object"!=typeof i||!i)continue e;{let e,t,o=0;for(const l in i){if(n===String(i[l])){if("@initial"!==l){const e=l.slice(1);(t=t||[]).push(e in r?r[e]:l.replace(/^@media ?/,"")),c=!0}a+=o,e=!0}++o}if(t&&t.length&&(l={["@media "+t.join(", ")]:l}),!e)continue e}}}(i[a]=i[a]||[]).push([n?"cv":`${e}-${o[e]}`,l,c])}return i},A={},N=o(),D=(e,t)=>N(e,(()=>(...r)=>{const n=()=>{for(let n of r){n="object"==typeof n&&n||{};let r=z(n);if(!t.rules.global.cache.has(r)){if(t.rules.global.cache.add(r),"@import"in n){let e=[].indexOf.call(t.sheet.cssRules,t.rules.themed.group)-1;for(let r of[].concat(n["@import"]))r=r.includes('"')||r.includes("'")?r:`"${r}"`,t.sheet.insertRule(`@import ${r};`,e++);delete n["@import"]}$(n,[],[],e,(e=>{t.rules.global.apply(e)}))}}return""};return s(n,{toString:n})})),H=o(),V=(e,t)=>H(e,(()=>r=>{const n=`${S(e.prefix)}k-${z(r)}`,i=()=>{if(!t.rules.global.cache.has(n)){t.rules.global.cache.add(n);const i=[];$(r,[],[],e,(e=>i.push(e)));const o=`@keyframes ${n}{${i.join("")}}`;t.rules.global.apply(o)}return n};return s(i,{get name(){return i()},toString:i})})),G=class{constructor(e,t,r,n){this.token=null==e?"":String(e),this.value=null==t?"":String(t),this.scale=null==r?"":String(r),this.prefix=null==n?"":String(n)}get computedValue(){return"var("+this.variable+")"}get variable(){return"--"+S(this.prefix)+S(this.scale)+this.token}toString(){return this.computedValue}},F=o(),J=(e,t)=>F(e,(()=>(r,n)=>{n="object"==typeof r&&r||Object(n);const i=`.${r=(r="string"==typeof r?r:"")||`${S(e.prefix)}t-${z(n)}`}`,o={},l=[];for(const t in n){o[t]={};for(const r in n[t]){const i=`--${S(e.prefix)}${t}-${r}`,s=k(String(n[t][r]),e.prefix,t);o[t][r]=new G(r,s,t,e.prefix),l.push(`${i}:${s}`)}}const s=()=>{if(l.length&&!t.rules.themed.cache.has(r)){t.rules.themed.cache.add(r);const i=`${n===e.theme?":root,":""}.${r}{${l.join(";")}}`;t.rules.themed.apply(i)}return r};return{...o,get className(){return s()},selector:i,toString:s}})),U=o();var X,Y=o(),q=e=>{const t=(e=>{let t=!1;const r=U(e,(e=>{t=!0;const r="prefix"in(e="object"==typeof e&&e||{})?String(e.prefix):"",i="object"==typeof e.media&&e.media||{},o="object"==typeof e.root?e.root||null:globalThis.document||null,l="object"==typeof e.theme&&e.theme||{},s={prefix:r,media:i,theme:l,themeMap:"object"==typeof e.themeMap&&e.themeMap||{...n},utils:"object"==typeof e.utils&&e.utils||{}},a=E(o),c={css:M(s,a),globalCss:D(s,a),keyframes:V(s,a),createTheme:J(s,a),reset(){a.reset(),c.theme.toString()},theme:{},sheet:a,config:s,prefix:r,getCssText:a.toString,toString:a.toString};return String(c.theme=c.createTheme(l)),c}));return t||r.reset(),r})(e);return t.styled=(({config:e,sheet:t})=>Y(e,(()=>{const r=M(e,t);return(...e)=>{const t=r(...e),n=t[l].type,i=external_root_React_commonjs2_react_commonjs_react_amd_react_.forwardRef(((e,r)=>{const i=e&&e.as||n,{props:o,deferredInjector:l}=t(e);return delete o.as,o.ref=r,l?external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_.Fragment,null,external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(i,o),external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(l,null)):external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(i,o)}));return i.className=t.className,i.displayName=`Styled.${n.displayName||n.name||n}`,i.selector=t.selector,i.toString=()=>t.selector,i[l]=t[l],i}})))(t),t},K=()=>X||(X=q()),Q=(...e)=>K().createTheme(...e),_=(...e)=>K().globalCss(...e),ee=(...e)=>K().keyframes(...e),te=(...e)=>K().css(...e),re=(...e)=>K().styled(...e);
//# sourceMappingUrl=index.map
;// CONCATENATED MODULE: ./src/theme/common.ts

const defaultTokens = {
  fonts: {
    sans: "-apple-system, BlinkMacSystemFont, 'Segoe UI','Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans','Helvetica Neue', sans-serif;",
    mono: "Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono','Courier New', monospace;"
  },
  fontSizes: {
    tiny: '.75rem',
    xs: '0.875rem',
    base: '1rem',
    sm: '1.25rem',
    md: '1.5rem',
    lg: '2.25rem',
    xl: '3rem'
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  lineHeights: {
    xs: 1,
    sm: 1.25,
    md: 1.5,
    lg: 1.625,
    xl: 1.75
  },
  letterSpacings: {
    tighter: '-0.05em',
    tight: '-0.025em',
    normal: '0',
    wide: '0.025em',
    wider: '0.05em',
    widest: '0.1em'
  },
  space: {
    0: '0rem',
    xs: '0.5rem',
    sm: '0.75rem',
    md: '1rem',
    lg: '1.25rem',
    xl: '2.25rem',
    px: '1px',
    1: '0.125rem',
    2: '0.25rem',
    3: '0.375rem',
    4: '0.5rem',
    5: '0.625rem',
    6: '0.75rem',
    7: '0.875rem',
    8: '1rem',
    9: '1.25rem',
    10: '1.5rem',
    11: '1.75rem',
    12: '2rem',
    13: '2.25rem',
    14: '2.5rem',
    15: '2.75rem',
    16: '3rem',
    17: '3.5rem',
    18: '4rem',
    20: '5rem',
    24: '6rem',
    28: '7rem',
    32: '8rem',
    36: '9rem',
    40: '10rem',
    44: '11rem',
    48: '12rem',
    52: '13rem',
    56: '14rem',
    60: '15rem',
    64: '16rem',
    72: '18rem',
    80: '20rem',
    96: '24rem'
  },
  radii: {
    xs: '7px',
    sm: '9px',
    md: '12px',
    base: '14px',
    lg: '14px',
    xl: '18px',
    squared: '33%',
    rounded: '50%',
    pill: '9999px'
  },
  zIndices: {
    1: '100',
    2: '200',
    3: '300',
    4: '400',
    5: '500',
    10: '1000',
    max: '9999'
  },
  borderWeights: {
    light: '1px',
    normal: '2px',
    bold: '3px',
    extrabold: '4px',
    black: '5px'
  },
  transitions: {
    default: 'all 250ms ease'
  },
  breakpoints: {
    xs: '650px',
    sm: '960px',
    md: '1280px',
    lg: '1400px',
    xl: '1920px'
  }
};
const defaultColors = {
  // generic colors
  white: '#ffffff',
  black: '#000000',
  //semantic colors
  blue100: '#bfd8fc',
  blue200: '#98D5FD',
  blue300: '#64B8FB',
  blue400: '#3D9CF7',
  blue500: '#0070F3',
  blue600: '#0056D0',
  blue700: '#0040AE',
  blue800: '#002D8C',
  blue900: '#002074',
  purple100: '#dbc8f0',
  purple200: '#DDA9F9',
  purple300: '#C17CEF',
  purple400: '#A258DF',
  purple500: '#7928ca',
  purple600: '#5E1DAD',
  purple700: '#461491',
  purple800: '#310C75',
  purple900: '#220760',
  green100: '#c5f0d5',
  green200: '#A1F9AC',
  green300: '#6FEE8D',
  green400: '#4ADE7B',
  green500: '#17c964',
  green600: '#10AC63',
  green700: '#0B905F',
  green800: '#077457',
  green900: '#046050',
  yellow100: '#fce6c7',
  yellow200: '#FEE7A6',
  yellow300: '#FCD57A',
  yellow400: '#F9C258',
  yellow500: '#f5a623',
  yellow600: '#D28519',
  yellow700: '#B06811',
  yellow800: '#8E4D0B',
  yellow900: '#753A06',
  red100: '#fbc4d5',
  red200: '#FDA0A5',
  red300: '#FB7085',
  red400: '#F74C77',
  red500: '#f21361',
  red600: '#D00D65',
  red700: '#AE0963',
  red800: '#8C065C',
  red900: '#740357',
  cyan100: '#EEFFF4',
  cyan200: '#DDFFED',
  cyan300: '#CCFFE9',
  cyan400: '#BFFFEA',
  cyan500: '#AAFFEC',
  cyan600: '#7CDBCF',
  cyan700: '#55B7B4',
  cyan800: '#368D93',
  cyan900: '#206C7A',
  pink100: '#FFDBE7',
  pink200: '#FFB8D6',
  pink300: '#FF94CC',
  pink400: '#FF7ACC',
  pink500: '#ff4ecd',
  pink600: '#DB39BD',
  pink700: '#B727AA',
  pink800: '#921893',
  pink900: '#6E0E7A',
  gray100: '#F4F4F4',
  gray200: '#EAEAEA',
  gray300: '#C1C1C1',
  gray400: '#999999',
  gray500: '#888888',
  gray600: '#666666',
  gray700: '#444444',
  gray800: '#333333',
  gray900: '#111111',
  // brand colors
  primaryLight: '$blue100',
  primary: '$blue500',
  primaryDark: '$blue600',
  primaryShadow: '$blue100',
  secondaryLight: '$purple100',
  secondary: '$purple500',
  secondaryDark: '$purple600',
  secondaryShadow: '$purple100',
  successLight: '$green100',
  success: '$green500',
  successDark: '$green600',
  successShadow: '$green100',
  warningLight: '$yellow100',
  warning: '$yellow500',
  warningDark: '$yellow600',
  warningShadow: '$yellow100',
  errorLight: '$red100',
  error: '$red500',
  errorDark: '$red600',
  errorShadow: '$red100',
  gradient: 'linear-gradient(112deg, $cyan500 -63.59%, $pink500 -20.3%, $blue500 70.46%)',
  link: '$blue500'
};
const defaultMedia = {
  xs: `(min-width: ${defaultTokens.breakpoints.xs})`,
  sm: `(min-width: ${defaultTokens.breakpoints.sm})`,
  md: `(min-width: ${defaultTokens.breakpoints.md})`,
  lg: `(min-width: ${defaultTokens.breakpoints.lg})`,
  xl: `(min-width: ${defaultTokens.breakpoints.xl})`,
  xsMax: `(max-width: ${defaultTokens.breakpoints.xs})`,
  smMax: `(max-width: ${defaultTokens.breakpoints.sm})`,
  mdMax: `(max-width: ${defaultTokens.breakpoints.md})`,
  lgMax: `(max-width: ${defaultTokens.breakpoints.lg})`,
  xlMax: `(max-width: ${defaultTokens.breakpoints.xl})`,
  motion: '(prefers-reduced-motion)',
  safari: 'not all and (min-resolution:.001dpcm)',
  hover: '(any-hover: hover)',
  dark: '(prefers-color-scheme: dark)',
  light: '(prefers-color-scheme: light)'
};
const defaultUtils = {
  p: value => ({
    padding: value
  }),
  pt: value => ({
    paddingTop: value
  }),
  pr: value => ({
    paddingRight: value
  }),
  pb: value => ({
    paddingBottom: value
  }),
  pl: value => ({
    paddingLeft: value
  }),
  px: value => ({
    paddingLeft: value,
    paddingRight: value
  }),
  py: value => ({
    paddingTop: value,
    paddingBottom: value
  }),
  m: value => ({
    margin: value
  }),
  mt: value => ({
    marginTop: value
  }),
  mr: value => ({
    marginRight: value
  }),
  mb: value => ({
    marginBottom: value
  }),
  ml: value => ({
    marginLeft: value
  }),
  mx: value => ({
    marginLeft: value,
    marginRight: value
  }),
  my: value => ({
    marginTop: value,
    marginBottom: value
  }),
  ta: value => ({
    textAlign: value
  }),
  tt: value => ({
    textTransform: value
  }),
  to: value => ({
    textOverflow: value
  }),
  d: value => ({
    display: value
  }),
  dflex: value => ({
    display: 'flex',
    alignItems: value,
    justifyContent: value
  }),
  fd: value => ({
    flexDirection: value
  }),
  fw: value => ({
    flexWrap: value
  }),
  ai: value => ({
    alignItems: value
  }),
  ac: value => ({
    alignContent: value
  }),
  jc: value => ({
    justifyContent: value
  }),
  as: value => ({
    alignSelf: value
  }),
  fg: value => ({
    flexGrow: value
  }),
  fs: value => ({
    fontSize: value
  }),
  fb: value => ({
    flexBasis: value
  }),
  bc: value => ({
    backgroundColor: value
  }),
  bf: value => ({
    backdropFilter: value
  }),
  bg: value => ({
    background: value
  }),
  bgBlur: value => ({
    bf: 'saturate(180%) blur(10px)',
    bg: `${value}66`
  }),
  bgColor: value => ({
    backgroundColor: value
  }),
  backgroundClip: value => ({
    WebkitBackgroundClip: value,
    backgroundClip: value
  }),
  bgClip: value => ({
    WebkitBackgroundClip: value,
    backgroundClip: value
  }),
  br: value => ({
    borderRadius: value
  }),
  bw: value => ({
    borderWidth: value
  }),
  btrr: value => ({
    borderTopRightRadius: value
  }),
  bbrr: value => ({
    borderBottomRightRadius: value
  }),
  bblr: value => ({
    borderBottomLeftRadius: value
  }),
  btlr: value => ({
    borderTopLeftRadius: value
  }),
  bs: value => ({
    boxShadow: value
  }),
  normalShadow: value => ({
    boxShadow: `0 4px 14px 0 $colors${value}`
  }),
  normalShadowVar: value => ({
    boxShadow: `0 4px 14px 0 ${value}`
  }),
  lh: value => ({
    lineHeight: value
  }),
  ov: value => ({
    overflow: value
  }),
  ox: value => ({
    overflowX: value
  }),
  oy: value => ({
    overflowY: value
  }),
  pe: value => ({
    pointerEvents: value
  }),
  events: value => ({
    pointerEvents: value
  }),
  us: value => ({
    WebkitUserSelect: value,
    userSelect: value
  }),
  userSelect: value => ({
    WebkitUserSelect: value,
    userSelect: value
  }),
  w: value => ({
    width: value
  }),
  h: value => ({
    height: value
  }),
  mw: value => ({
    maxWidth: value
  }),
  maxW: value => ({
    maxWidth: value
  }),
  mh: value => ({
    maxHeight: value
  }),
  maxH: value => ({
    maxHeight: value
  }),
  size: value => ({
    width: value,
    height: value
  }),
  minSize: value => ({
    minWidth: value,
    minHeight: value,
    width: value,
    height: value
  }),
  sizeMin: value => ({
    minWidth: value,
    minHeight: value,
    width: value,
    height: value
  }),
  maxSize: value => ({
    maxWidth: value,
    maxHeight: value
  }),
  sizeMax: value => ({
    maxWidth: value,
    maxHeight: value
  }),
  appearance: value => ({
    WebkitAppearance: value,
    appearance: value
  }),
  scale: value => ({
    transform: `scale(${value})`
  }),
  linearGradient: value => ({
    backgroundImage: `linear-gradient(${value})`
  }),
  tdl: value => ({
    textDecorationLine: value
  }),
  textGradient: value => ({
    backgroundImage: `linear-gradient(${value})`,
    WebkitBackgroundClip: 'text',
    WebkitTextFillColor: 'transparent',
    '&::selection': {
      WebkitTextFillColor: '$colors$text'
    }
  })
};
const defaultThemeMap = { ...n,
  width: 'space',
  height: 'space',
  minWidth: 'space',
  maxWidth: 'space',
  minHeight: 'space',
  maxHeight: 'space',
  flexBasis: 'space',
  gridTemplateColumns: 'space',
  gridTemplateRows: 'space',
  blockSize: 'space',
  minBlockSize: 'space',
  maxBlockSize: 'space',
  inlineSize: 'space',
  minInlineSize: 'space',
  maxInlineSize: 'space',
  borderWidth: 'borderWeights'
};
/* harmony default export */ const common = ({
  prefix: 'nextui',
  theme: { ...defaultTokens,
    colors: defaultColors,
    shadows: {}
  },
  media: defaultMedia,
  utils: defaultUtils,
  themeMap: defaultThemeMap
});
;// CONCATENATED MODULE: ./src/theme/light-theme.ts
/* harmony default export */ const light_theme = ({
  colors: {
    accents1: '$gray100',
    accents2: '$gray200',
    accents3: '$gray300',
    accents4: '$gray400',
    accents5: '$gray500',
    accents6: '$gray600',
    accents7: '$gray700',
    accents8: '$gray800',
    accents9: '$gray900',
    text: '$gray800',
    background: '$white',
    foreground: '$black',
    codeLight: '$pink100',
    code: '$pink600',
    border: '$gray200',
    selection: '$blue200'
  },
  shadows: {
    xs: '-4px 0 4px rgb(0 0 0 / 5%);',
    sm: '0 5px 20px -5px rgba(0, 0, 0, 0.1)',
    md: '0 8px 30px rgba(0, 0, 0, 0.15)',
    lg: '0 30px 60px rgba(0, 0, 0, 0.15)',
    xl: '0 40px 80px rgba(0, 0, 0, 0.25)'
  }
});
;// CONCATENATED MODULE: ./src/theme/dark-theme.ts
/* harmony default export */ const dark_theme = ({
  colors: {
    accents1: '$gray900',
    accents2: '$gray800',
    accents3: '$gray700',
    accents4: '$gray600',
    accents5: '$gray500',
    accents6: '$gray400',
    accents7: '$gray300',
    accents8: '$gray200',
    accents9: '$gray100',
    text: '$white',
    blue900: '#001835',
    purple900: '#1c0631',
    green900: '#033116',
    yellow900: '#3d2705',
    red900: '#3c0216',
    primaryLight: '$blue900',
    primaryShadow: '$blue600',
    secondaryLight: '$purple900',
    secondaryShadow: '$purple600',
    successLight: '$green900',
    successShadow: '$green600',
    warningLight: '$yellow900',
    warningShadow: '$yellow600',
    errorLight: '$red900',
    errorShadow: '$red600',
    background: '$black',
    foreground: '$white',
    codeLight: '#16272e',
    code: '#6cc0e1',
    border: '$gray700',
    selection: '#ff4ecd'
  },
  shadows: {
    xs: '-4px 0 15px rgb(0 0 0 / 50%)',
    sm: '0 5px 20px -5px rgba(20, 20, 20, 0.1)',
    md: '0 8px 30px rgba(20, 20, 20, 0.15)',
    lg: '0 30px 60px rgba(20, 20, 20, 0.15)',
    xl: '0 40px 80px rgba(20, 20, 20, 0.25)'
  }
});
;// CONCATENATED MODULE: ./src/utils/deep-merge.js
function deep_merge_deepMerge(result) {
  var stack = Array.prototype.slice.call(arguments, 1);
  var item;
  var key;

  while (stack.length) {
    item = stack.shift();

    for (key in item) {
      // eslint-disable-next-line no-prototype-builtins
      if (item.hasOwnProperty(key)) {
        if (typeof result[key] === 'object' && result[key] && Object.prototype.toString.call(result[key]) !== '[object Array]') {
          if (typeof item[key] === 'object' && item[key] !== null) {
            result[key] = deep_merge_deepMerge({}, result[key], item[key]);
          } else {
            result[key] = item[key];
          }
        } else {
          result[key] = item[key];
        }
      }
    }
  }

  return result;
}
;// CONCATENATED MODULE: ./src/theme/stitches.config.ts





const getStitchesTheme = targetTheme => {
  return deepMerge(targetTheme, commonTheme.theme);
};
const stitches = q({ ...common,
  theme: { ...common.theme,
    shadows: { ...light_theme.shadows
    },
    colors: { ...common.theme.colors,
      ...light_theme.colors
    }
  }
});
const createThemeBase = stitches.createTheme;
const styled = stitches.styled;
const css = stitches.css;
const globalCss = stitches.globalCss;
const keyframes = stitches.keyframes;
const getCssText = stitches.getCssText;
const theme = stitches.theme;
const config = stitches.config;
const sharedFocus = css({
  WebkitTapHighlightColor: 'transparent',
  '&:focus:not(&:focus-visible)': {
    boxShadow: 'none'
  },
  '&:focus': {
    outline: 'none',
    boxShadow: '0 0 0 2px $colors$background, 0 0 0 4px $colors$primary'
  },
  '@safari': {
    WebkitTapHighlightColor: 'transparent',
    outline: 'none'
  }
});
const cssFocusVisible = css({
  variants: {
    isFocusVisible: {
      true: {
        outline: 'none',
        boxShadow: '0 0 0 2px $colors$background, 0 0 0 4px $colors$primary !important'
      }
    }
  }
});
const sharedVisuallyHidden = css({
  border: '0px',
  clip: 'rect(0px, 0px, 0px, 0px)',
  height: '1px',
  width: '1px',
  margin: '-1px',
  padding: '0px',
  overflow: 'hidden',
  whiteSpace: 'nowrap',
  position: 'absolute'
});
const createTheme = ({
  type,
  theme,
  className
}) => {
  if (!type) {
    throw new Error('Theme type is required');
  }

  return createThemeBase(className || `${type}-theme`, deep_merge_deepMerge(type === 'dark' ? dark_theme : light_theme, theme));
};
;// CONCATENATED MODULE: ./src/theme/theme-context.ts


const defaultContext = {
  isDark: false,
  theme: theme,
  type: 'light'
};
const ThemeContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(defaultContext);
/* harmony default export */ const theme_context = (ThemeContext);
;// CONCATENATED MODULE: ./src/use-theme/use-theme.ts



const useTheme = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(theme_context);

/* harmony default export */ const use_theme = (useTheme);
;// CONCATENATED MODULE: ./src/use-theme/index.ts

/* harmony default export */ const src_use_theme = (use_theme);
;// CONCATENATED MODULE: ./src/use-ssr/use-ssr.ts


const isBrowser = () => {
  return Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
};

const useSSR = () => {
  const [browser, setBrowser] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    setBrowser(isBrowser());
  }, []);
  return {
    isBrowser: browser,
    isServer: !browser
  };
};

/* harmony default export */ const use_ssr = (useSSR);
;// CONCATENATED MODULE: ./src/use-ssr/index.ts

/* harmony default export */ const src_use_ssr = (use_ssr);
;// CONCATENATED MODULE: ./src/utils/collections.ts

const getId = () => {
  return Math.random().toString(32).slice(2, 10);
};
const hasChild = (children, child) => {
  const types = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.map(children, item => {
    if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(item)) return null;
    return item.type;
  });
  return (types || []).includes(child);
};
const pick = (props, obj) => props.reduce((acc, prop) => {
  acc[prop] = obj[prop];
  return acc;
}, {});
const pickChild = (children, targetChild) => {
  let target = [];
  const withoutTargetChildren = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.map(children, item => {
    if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(item)) return item;

    if (item.type === targetChild) {
      target.push(item);
      return null;
    }

    return item;
  });
  const targetChildren = target.length >= 0 ? target : undefined;
  return [withoutTargetChildren, targetChildren];
};
const isChildElement = (parent, child) => {
  if (!parent || !child) return false; // eslint-disable-next-line no-undef

  let node = child;

  while (node) {
    if (node === parent) return true;
    node = node.parentNode;
  }

  return false;
};
const collections_isBrowser = () => {
  return Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
};
const isMac = () => {
  if (!collections_isBrowser()) return false;
  return navigator.platform.toUpperCase().indexOf('MAC') >= 0;
};
const setChildrenIndex = (children, targetComponents = []) => {
  if (external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.count(children) === 0) return [];
  const allowAll = targetComponents.length === 0;

  const clone = (child, props = {}) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().cloneElement(child, props);

  let index = 0;
  return external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.map(children, item => {
    if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(item)) return item;
    index = index + 1;
    if (allowAll) return clone(item, {
      index
    });
    const isAllowed = targetComponents.find(child => child === item.type);
    if (isAllowed) return clone(item, {
      index
    });
    index = index - 1;
    return item;
  });
};
const flattenArray = arr => {
  return arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flattenArray(val) : val), []);
};
;// CONCATENATED MODULE: ./src/use-portal/use-portal.ts




const createElement = id => {
  const el = document.createElement('div');
  el.setAttribute('id', id);
  return el;
};

const usePortal = (selectId = getId(), getContainer) => {
  const id = `nextui-${selectId}`;
  const {
    isBrowser
  } = src_use_ssr();
  const [elSnapshot, setElSnapshot] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isBrowser ? createElement(id) : null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const customContainer = getContainer ? getContainer() : null;
    const parentElement = customContainer || document.body;
    const hasElement = parentElement.querySelector(`#${id}`);
    const el = hasElement || createElement(id);

    if (!hasElement) {
      parentElement.appendChild(el);
    }

    setElSnapshot(el);
  }, []);
  return elSnapshot;
};

/* harmony default export */ const use_portal = (usePortal);
;// CONCATENATED MODULE: ./src/use-portal/index.ts

/* harmony default export */ const src_use_portal = (use_portal);
;// CONCATENATED MODULE: ./src/use-body-scroll/use-body-scroll.ts

const defaultOptions = {
  scrollLayer: false
};
const elementStack = new Map();

const isIos = () => {
  /* istanbul ignore next */
  if (typeof window === 'undefined' || !window.navigator) return false;
  return /iP(ad|hone|od)/.test(window.navigator.platform);
};

const touchHandler = event => {
  if (event.touches && event.touches.length > 1) return true;
  event.preventDefault();
  return false;
};

const useBodyScroll = (elementRef, options) => {
  /* istanbul ignore next */
  if (typeof document === 'undefined') return [false, t => t];
  const elRef = elementRef || (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(document.body);
  const [hidden, setHidden] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const safeOptions = { ...defaultOptions,
    ...(options || {})
  }; // don't prevent touch event when layer contain scroll

  const isIosWithCustom = () => {
    if (safeOptions.scrollLayer) return false;
    return isIos();
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!elRef || !elRef.current) return;
    const lastOverflow = elRef.current.style.overflow;

    if (hidden) {
      if (elementStack.has(elRef.current)) return;

      if (!isIosWithCustom()) {
        elRef.current.style.overflow = 'hidden';
      } else {
        document.addEventListener('touchmove', touchHandler, {
          passive: false
        });
      }

      elementStack.set(elRef.current, {
        last: lastOverflow
      });
      return;
    } // reset element overflow


    if (!elementStack.has(elRef.current)) return;

    if (!isIosWithCustom()) {
      const store = elementStack.get(elRef.current);
      elRef.current.style.overflow = store.last;
    } else {
      document.removeEventListener('touchmove', touchHandler);
    }

    elementStack.delete(elRef.current);
  }, [hidden, elRef]);
  return [hidden, setHidden];
};

/* harmony default export */ const use_body_scroll = (useBodyScroll);
;// CONCATENATED MODULE: ./src/use-body-scroll/index.ts

/* harmony default export */ const src_use_body_scroll = (use_body_scroll);
;// CONCATENATED MODULE: ./src/use-click-away/use-click-away.ts


const useClickAway = (ref, handler) => {
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const callback = event => {
      const el = ref.current;
      if (!event || !el || el.contains(event.target)) return;
      handler(event);
    };

    document.addEventListener('click', callback);
    return () => document.removeEventListener('click', callback);
  }, [ref, handler]);
};

/* harmony default export */ const use_click_away = (useClickAway);
;// CONCATENATED MODULE: ./src/use-click-away/index.ts

/* harmony default export */ const src_use_click_away = (use_click_away);
;// CONCATENATED MODULE: ./src/use-warning/use-warning.ts
const warningStack = {};

const useWarning = (message, component) => {
  const tag = component ? ` [${component}]` : ' ';
  const log = `[Next UI]${tag}: ${message}`;
  if (typeof console === 'undefined') return;
  if (warningStack[log]) return;
  warningStack[log] = true;

  if (false) {}

  console.warn(log);
};

/* harmony default export */ const use_warning = (useWarning);
;// CONCATENATED MODULE: ./src/use-warning/index.ts

/* harmony default export */ const src_use_warning = (use_warning);
;// CONCATENATED MODULE: ./src/utils/assertion.ts
const __DEV__ = "production" !== 'production';
const __TEST__ = (/* unused pure expression or super */ null && ("production" === 'test'));
function isArray(value) {
  return Array.isArray(value);
}
function isEmptyArray(value) {
  return isArray(value) && value.length === 0;
}
function isObject(value) {
  const type = typeof value;
  return value != null && (type === 'object' || type === 'function') && !isArray(value);
}
function isEmptyObject(value) {
  return isObject(value) && Object.keys(value).length === 0;
} // Empty assertions

function isEmpty(value) {
  if (isArray(value)) return isEmptyArray(value);
  if (isObject(value)) return isEmptyObject(value);
  if (value == null || value === '') return true;
  return false;
}
;// CONCATENATED MODULE: ./src/use-clipboard/use-clipboard.ts




const use_clipboard_defaultOptions = {
  onError: () => __DEV__ && src_use_warning('Failed to copy.', 'use-clipboard')
};

const useClipboard = (options = use_clipboard_defaultOptions) => {
  const el = src_use_portal('clipboard');

  const copyText = (el, text) => {
    if (!el || !text) return;
    const selection = window.getSelection();
    if (!selection) return;
    el.style.whiteSpace = 'pre';
    el.textContent = text;
    const range = window.document.createRange();
    selection.removeAllRanges();
    range.selectNode(el);
    selection.addRange(range);

    try {
      window.document.execCommand('copy');
    } catch (e) {
      options.onError && options.onError();
    }

    selection.removeAllRanges();

    if (el) {
      el.textContent = '';
    }
  };

  const copy = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(text => {
    copyText(el, text);
  }, [el]);
  return {
    copy
  };
};

/* harmony default export */ const use_clipboard = (useClipboard);
;// CONCATENATED MODULE: ./src/use-clipboard/index.ts

/* harmony default export */ const src_use_clipboard = (use_clipboard);
;// CONCATENATED MODULE: ./src/use-click-anywhere/use-click-anywhere.ts


const useClickAnyWhere = handler => {
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const callback = event => handler(event);

    document.addEventListener('click', callback);
    return () => document.removeEventListener('click', callback);
  }, [handler]);
};

/* harmony default export */ const use_click_anywhere = (useClickAnyWhere);
;// CONCATENATED MODULE: ./src/use-click-anywhere/index.ts

/* harmony default export */ const src_use_click_anywhere = (use_click_anywhere);
;// CONCATENATED MODULE: ./src/use-input/use-input.ts


const useInput = initialValue => {
  const [value, setValue, currentRef] = src_use_current_state(initialValue);
  return {
    value,
    setValue,
    currentRef,
    reset: () => setValue(initialValue),
    bindings: {
      value,
      onChange: event => {
        if (typeof event === 'object' && event.target) {
          setValue(event.target.value);
        } else {
          setValue(event);
        }
      }
    }
  };
};

/* harmony default export */ const use_input = (useInput);
;// CONCATENATED MODULE: ./src/use-input/index.ts

/* harmony default export */ const src_use_input = (use_input);
;// CONCATENATED MODULE: ./src/use-keyboard/codes.ts
/**
 * KeyBinding Codes
 * The content of this file is based on the design of the open source project "microsoft/vscode",
 *   Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * We inherit the KeyMod values from "microsoft/vscode",
 * but use the Browser's KeyboardEvent event implementation, and all values are used only as identification.
 */
let KeyCode;

(function (KeyCode) {
  KeyCode[KeyCode["Unknown"] = 0] = "Unknown";
  KeyCode[KeyCode["Backspace"] = 8] = "Backspace";
  KeyCode[KeyCode["Tab"] = 9] = "Tab";
  KeyCode[KeyCode["Enter"] = 13] = "Enter";
  KeyCode[KeyCode["Shift"] = 16] = "Shift";
  KeyCode[KeyCode["Ctrl"] = 17] = "Ctrl";
  KeyCode[KeyCode["Alt"] = 18] = "Alt";
  KeyCode[KeyCode["PauseBreak"] = 19] = "PauseBreak";
  KeyCode[KeyCode["CapsLock"] = 20] = "CapsLock";
  KeyCode[KeyCode["Escape"] = 27] = "Escape";
  KeyCode[KeyCode["Space"] = 32] = "Space";
  KeyCode[KeyCode["PageUp"] = 33] = "PageUp";
  KeyCode[KeyCode["PageDown"] = 34] = "PageDown";
  KeyCode[KeyCode["End"] = 35] = "End";
  KeyCode[KeyCode["Home"] = 36] = "Home";
  KeyCode[KeyCode["LeftArrow"] = 37] = "LeftArrow";
  KeyCode[KeyCode["UpArrow"] = 38] = "UpArrow";
  KeyCode[KeyCode["RightArrow"] = 39] = "RightArrow";
  KeyCode[KeyCode["DownArrow"] = 40] = "DownArrow";
  KeyCode[KeyCode["Insert"] = 45] = "Insert";
  KeyCode[KeyCode["Delete"] = 46] = "Delete";
  KeyCode[KeyCode["KEY_0"] = 48] = "KEY_0";
  KeyCode[KeyCode["KEY_1"] = 49] = "KEY_1";
  KeyCode[KeyCode["KEY_2"] = 50] = "KEY_2";
  KeyCode[KeyCode["KEY_3"] = 51] = "KEY_3";
  KeyCode[KeyCode["KEY_4"] = 52] = "KEY_4";
  KeyCode[KeyCode["KEY_5"] = 53] = "KEY_5";
  KeyCode[KeyCode["KEY_6"] = 54] = "KEY_6";
  KeyCode[KeyCode["KEY_7"] = 55] = "KEY_7";
  KeyCode[KeyCode["KEY_8"] = 56] = "KEY_8";
  KeyCode[KeyCode["KEY_9"] = 57] = "KEY_9";
  KeyCode[KeyCode["KEY_A"] = 65] = "KEY_A";
  KeyCode[KeyCode["KEY_B"] = 66] = "KEY_B";
  KeyCode[KeyCode["KEY_C"] = 67] = "KEY_C";
  KeyCode[KeyCode["KEY_D"] = 68] = "KEY_D";
  KeyCode[KeyCode["KEY_E"] = 69] = "KEY_E";
  KeyCode[KeyCode["KEY_F"] = 70] = "KEY_F";
  KeyCode[KeyCode["KEY_G"] = 71] = "KEY_G";
  KeyCode[KeyCode["KEY_H"] = 72] = "KEY_H";
  KeyCode[KeyCode["KEY_I"] = 73] = "KEY_I";
  KeyCode[KeyCode["KEY_J"] = 74] = "KEY_J";
  KeyCode[KeyCode["KEY_K"] = 75] = "KEY_K";
  KeyCode[KeyCode["KEY_L"] = 76] = "KEY_L";
  KeyCode[KeyCode["KEY_M"] = 77] = "KEY_M";
  KeyCode[KeyCode["KEY_N"] = 78] = "KEY_N";
  KeyCode[KeyCode["KEY_O"] = 79] = "KEY_O";
  KeyCode[KeyCode["KEY_P"] = 80] = "KEY_P";
  KeyCode[KeyCode["KEY_Q"] = 81] = "KEY_Q";
  KeyCode[KeyCode["KEY_R"] = 82] = "KEY_R";
  KeyCode[KeyCode["KEY_S"] = 83] = "KEY_S";
  KeyCode[KeyCode["KEY_T"] = 84] = "KEY_T";
  KeyCode[KeyCode["KEY_U"] = 85] = "KEY_U";
  KeyCode[KeyCode["KEY_V"] = 86] = "KEY_V";
  KeyCode[KeyCode["KEY_W"] = 87] = "KEY_W";
  KeyCode[KeyCode["KEY_X"] = 88] = "KEY_X";
  KeyCode[KeyCode["KEY_Y"] = 89] = "KEY_Y";
  KeyCode[KeyCode["KEY_Z"] = 90] = "KEY_Z";
  KeyCode[KeyCode["Meta"] = 91] = "Meta";
  KeyCode[KeyCode["F1"] = 112] = "F1";
  KeyCode[KeyCode["F2"] = 113] = "F2";
  KeyCode[KeyCode["F3"] = 114] = "F3";
  KeyCode[KeyCode["F4"] = 115] = "F4";
  KeyCode[KeyCode["F5"] = 116] = "F5";
  KeyCode[KeyCode["F6"] = 117] = "F6";
  KeyCode[KeyCode["F7"] = 118] = "F7";
  KeyCode[KeyCode["F8"] = 119] = "F8";
  KeyCode[KeyCode["F9"] = 120] = "F9";
  KeyCode[KeyCode["F10"] = 121] = "F10";
  KeyCode[KeyCode["F11"] = 122] = "F11";
  KeyCode[KeyCode["F12"] = 123] = "F12";
  KeyCode[KeyCode["NumLock"] = 144] = "NumLock";
  KeyCode[KeyCode["ScrollLock"] = 145] = "ScrollLock";
  KeyCode[KeyCode["Equal"] = 187] = "Equal";
  KeyCode[KeyCode["Minus"] = 189] = "Minus";
  KeyCode[KeyCode["Backquote"] = 192] = "Backquote";
  KeyCode[KeyCode["Backslash"] = 220] = "Backslash";
})(KeyCode || (KeyCode = {}));

let KeyMod;

(function (KeyMod) {
  KeyMod[KeyMod["CtrlCmd"] = 2048] = "CtrlCmd";
  KeyMod[KeyMod["Shift"] = 1024] = "Shift";
  KeyMod[KeyMod["Alt"] = 512] = "Alt";
  KeyMod[KeyMod["WinCtrl"] = 256] = "WinCtrl";
})(KeyMod || (KeyMod = {}));
;// CONCATENATED MODULE: ./src/use-keyboard/helper.ts


/* istanbul ignore next */

const getCtrlKeysByPlatform = () => {
  return {
    CtrlCmd: isMac() ? 'metaKey' : 'ctrlKey',
    WinCtrl: isMac() ? 'ctrlKey' : 'metaKey'
  };
};
const getActiveModMap = bindings => {
  const modBindings = bindings.filter(item => !!KeyMod[item]);
  const activeModMap = {
    CtrlCmd: false,
    Shift: false,
    Alt: false,
    WinCtrl: false
  };
  modBindings.forEach(code => {
    const modKey = KeyMod[code];
    activeModMap[modKey] = true;
  });
  return activeModMap;
};
;// CONCATENATED MODULE: ./src/use-keyboard/use-keyboard.ts




const use_keyboard_useKeyboard = (handler, keyBindings, options = {}) => {
  const bindings = Array.isArray(keyBindings) ? keyBindings : [keyBindings];
  const {
    disableGlobalEvent = false,
    capture = false,
    stopPropagation = false,
    preventDefault = false,
    event = 'keydown'
  } = options;
  const activeModMap = getActiveModMap(bindings);
  const keyCodes = bindings.filter(item => !KeyMod[item]);
  const {
    CtrlCmd,
    WinCtrl
  } = getCtrlKeysByPlatform();

  const eventHandler = event => {
    if (activeModMap.Shift && !event.shiftKey) return;
    if (activeModMap.Alt && !event.altKey) return;
    if (activeModMap.CtrlCmd && !event[CtrlCmd]) return;
    if (activeModMap.WinCtrl && !event[WinCtrl]) return;
    if (keyCodes.length > 0 && !keyCodes.includes(event.keyCode)) return;

    if (stopPropagation) {
      event.stopPropagation();
    }

    if (preventDefault) {
      event.preventDefault();
    }

    handler && handler(event);
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!disableGlobalEvent) {
      document.addEventListener(event, eventHandler);
    }

    return () => {
      document.removeEventListener(event, eventHandler);
    };
  }, [disableGlobalEvent]);

  const elementBindingHandler = (elementEventType, isCapture = false) => {
    if (elementEventType !== event) return () => {};
    if (isCapture !== capture) return () => {};
    return e => eventHandler(e);
  };

  return {
    bindings: {
      onKeyDown: elementBindingHandler('keydown'),
      onKeyDownCapture: elementBindingHandler('keydown', true),
      onKeyPress: elementBindingHandler('keypress'),
      onKeyPressCapture: elementBindingHandler('keypress', true),
      onKeyUp: elementBindingHandler('keyup'),
      onKeyUpCapture: elementBindingHandler('keyup', true)
    }
  };
};

/* harmony default export */ const use_keyboard = (use_keyboard_useKeyboard);
;// CONCATENATED MODULE: ./src/use-keyboard/index.ts



/* harmony default export */ const src_use_keyboard = (use_keyboard);
;// CONCATENATED MODULE: ./src/utils/numbers.ts
/**
 * Convert a value to percentage based on lower and upper bound values
 *
 * @param value the value in number
 * @param min the minimum value
 * @param max the maximum value
 */
function valueToPercent(value, min, max) {
  return (value - min) * 100 / (max - min);
}
function range(start, end) {
  const length = end - start + 1;
  return Array.from({
    length
  }, (_, index) => index + start);
}
;// CONCATENATED MODULE: ./src/use-pagination/index.ts


const DOTS = 'dots';

const usePagination = ({
  page,
  total,
  siblings = 1,
  boundaries = 1,
  initialPage = 1,
  onChange
}) => {
  const [activePage, setActivePage] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(page || initialPage);

  const onChangeActivePage = newPage => {
    setActivePage(newPage);
    onChange && onChange(newPage);
  };

  const setPage = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(pageNumber => {
    if (pageNumber <= 0) {
      onChangeActivePage(1);
    } else if (pageNumber > total) {
      onChangeActivePage(total);
    } else {
      onChangeActivePage(pageNumber);
    }
  }, [total]);

  const next = () => setPage(activePage + 1);

  const previous = () => setPage(activePage - 1);

  const first = () => setPage(1);

  const last = () => setPage(total);

  const paginationRange = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;

    if (totalPageNumbers >= total) {
      return range(1, total);
    }

    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);
    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);
    /*
     * We do not want to show dots if there is only one position left
     * after/before the left/right page count as that would lead to a change if our Pagination
     * component size which we do not want
     */

    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;
    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);

    if (!shouldShowLeftDots && shouldShowRightDots) {
      const leftItemCount = siblings * 2 + boundaries + 2;
      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];
    }

    if (shouldShowLeftDots && !shouldShowRightDots) {
      const rightItemCount = boundaries + 1 + 2 * siblings;
      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];
    }

    return [...range(1, boundaries), DOTS, ...range(leftSiblingIndex, rightSiblingIndex), DOTS, ...range(total - boundaries + 1, total)];
  }, [total, siblings, activePage]);
  return {
    range: paginationRange,
    active: activePage,
    setPage,
    next,
    previous,
    first,
    last
  };
};

/* harmony default export */ const use_pagination = (usePagination);
// EXTERNAL MODULE: ../../node_modules/react/jsx-dev-runtime.js
var jsx_dev_runtime = __webpack_require__(194);
;// CONCATENATED MODULE: ./src/css-baseline/css-baseline.tsx
var _jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/css-baseline/css-baseline.tsx";



const globalStyles = globalCss({
  '*, *:before, *:after': {
    boxSizing: 'border-box',
    textRendering: 'geometricPrecision',
    WebkitTapHighlightColor: 'transparent'
  },
  html: {
    fontSize: '$base'
  },
  body: {
    margin: 0,
    padding: 0,
    minHeight: '100%',
    position: 'relative',
    overflowX: 'hidden',
    WebkitFontSmoothing: 'antialiased',
    MozOsxFontSmoothing: 'grayscale',
    textRendering: 'optimizeLegibility',
    fontSize: '$base',
    lineHeight: '$md',
    fontFamily: '$sans'
  },
  'html, body': {
    backgroundColor: '$background',
    color: '$text'
  },
  'p, small': {
    color: 'inherit',
    letterSpacing: '$tighter',
    fontWeight: '$normal',
    fontFamily: '$sans'
  },
  p: {
    margin: '$md 0',
    fontSize: '$base',
    lineHeight: '$lg'
  },
  small: {
    margin: 0,
    lineHeight: '$md',
    fontSize: '$xs'
  },
  b: {
    fontWeight: '$semibold'
  },
  span: {
    fontSize: 'inherit',
    color: 'inherit',
    fontWeight: 'inherit'
  },
  img: {
    maxWidth: '100%'
  },
  a: {
    cursor: 'pointer',
    fontSize: 'inherit',
    WebkitTouchCallout: 'none',
    WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
    WebkitBoxAlign: 'center',
    alignItems: 'center',
    color: '$link',
    textDecoration: 'none'
  },
  'a:hover': {
    textDecoration: 'none'
  },
  'ul,ol': {
    padding: 0,
    listStyleType: 'none',
    margin: '$sm $sm $sm $lg',
    color: '$foreground'
  },
  ol: {
    listStyleType: 'decimal'
  },
  li: {
    marginBottom: '$5',
    fontSize: '$base',
    lineHeight: '$lg'
  },
  'h1,h2,h3,h4,h5,h6': {
    color: 'inherit',
    margin: '0 0 $5 0'
  },
  h1: {
    letterSpacing: '$tighter',
    lineHeight: '$md',
    fontSize: '$xl',
    fontWeight: '$bold'
  },
  h2: {
    letterSpacing: '$tighter',
    fontSize: '$lg',
    fontWeight: '$semibold'
  },
  h3: {
    letterSpacing: '$tighter',
    fontSize: '$md',
    fontWeight: '$semibold'
  },
  h4: {
    letterSpacing: '$tighter',
    fontSize: '$sm',
    fontWeight: '$semibold'
  },
  h5: {
    letterSpacing: '$tight',
    fontSize: '$base',
    fontWeight: '$semibold'
  },
  h6: {
    letterSpacing: '$tight',
    fontSize: '$xs',
    fontWeight: '$semibold'
  },
  'button, input, select,textarea': {
    fontFamily: 'inherit',
    fontSize: 'inherit',
    lineHeight: 'inherit',
    color: 'inherit',
    margin: 0
  },
  'button:focus, input:focus, select:focus,textarea:focus': {
    outline: 'none'
  },
  code: {
    color: '$code',
    padding: '$1 $2',
    borderRadius: '$xs',
    bg: '$codeLight',
    fontFamily: '$mono',
    fontSize: '$xs',
    whiteSpace: 'pre-wrap',
    transition: '$default'
  },
  'code:hover': {
    opacity: 0.8
  },
  pre: {
    overflow: 'auto',
    whiteSpace: 'pre',
    textAlign: 'left',
    fontSize: '$xs',
    borderRadius: '$lg',
    padding: '$md $lg',
    margin: '$lg 0 ',
    fontFamily: '$mono',
    lineHeight: '$md',
    webkitOverflowScrolling: 'touch'
  },
  'pre code': {
    color: '$foreground',
    fontSize: '$xs',
    lineHeight: '$sm',
    whiteSpace: 'pre'
  },
  'pre code:before,pre code:after': {
    display: 'none'
  },
  'pre p': {
    margin: 0
  },
  'pre::-webkit-scrollbar': {
    display: 'none',
    width: 0,
    height: 0,
    background: 'transparent'
  },
  hr: {
    borderColor: '$accents2'
  },
  details: {
    backgroundColor: '$accents1',
    border: 'none'
  },
  'details:focus, details:hover, details:active': {
    outline: 'none'
  },
  summary: {
    cursor: 'pointer',
    userSelect: 'none',
    listStyle: 'none',
    outline: 'none'
  },
  'summary::-webkit-details-marker, summary::before': {
    display: 'none'
  },
  'summary::-moz-list-bullet': {
    fontSize: 0
  },
  'summary:focus, summary:hover, summary:active': {
    outline: 'none',
    listStyle: 'none'
  },
  '::selection': {
    backgroundColor: '$selection'
  },
  blockquote: {
    padding: '$md $lg',
    color: '$accents5',
    backgroundColor: '$accents1',
    borderRadius: '$lg',
    margin: '$10 0'
  },
  'blockquote *:first-child': {
    marginTop: 0
  },
  'blockquote *:last-child': {
    marginBottom: 0
  }
});

const flushCSS = () => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("style", {
  id: "stitches",
  dangerouslySetInnerHTML: {
    __html: getCssText()
  }
}, void 0, false, {
  fileName: _jsxFileName,
  lineNumber: 217,
  columnNumber: 3
}, undefined);

const CssBaseline = ({
  children
}) => {
  globalStyles();
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)((external_root_React_commonjs2_react_commonjs_react_amd_react_default()).Fragment, {
    children: children
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 222,
    columnNumber: 10
  }, undefined);
};

const MemoCssBaseline = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(CssBaseline);
MemoCssBaseline.flush = flushCSS;
/* harmony default export */ const css_baseline = (MemoCssBaseline);
;// CONCATENATED MODULE: ../../node_modules/@react-aria/ssr/dist/module.js
 // Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.

const $f01a183cc7bdff77849e49ad26eb904$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 10000000000)),
  current: 0
};

const $f01a183cc7bdff77849e49ad26eb904$var$SSRContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext($f01a183cc7bdff77849e49ad26eb904$var$defaultContext);
/**
 * When using SSR with React Aria, applications must be wrapped in an SSRProvider.
 * This ensures that auto generated ids are consistent between the client and server.
 */


function SSRProvider(props) {
  let cur = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($f01a183cc7bdff77849e49ad26eb904$var$SSRContext);
  let value = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    // If this is the first SSRProvider, start with an empty string prefix, otherwise
    // append and increment the counter.
    prefix: cur === $f01a183cc7bdff77849e49ad26eb904$var$defaultContext ? '' : cur.prefix + "-" + ++cur.current,
    current: 0
  }), [cur]);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($f01a183cc7bdff77849e49ad26eb904$var$SSRContext.Provider, {
    value: value
  }, props.children);
}
let $f01a183cc7bdff77849e49ad26eb904$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
/** @private */

function useSSRSafeId(defaultId) {
  let ctx = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($f01a183cc7bdff77849e49ad26eb904$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,
  // provide a warning to hint to the developer to add one.

  if (ctx === $f01a183cc7bdff77849e49ad26eb904$var$defaultContext && !$f01a183cc7bdff77849e49ad26eb904$var$canUseDOM) {
    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');
  }

  return (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => defaultId || "react-aria" + ctx.prefix + "-" + ++ctx.current, [defaultId]);
}
/**
 * Returns whether the component is currently being server side rendered or
 * hydrated on the client. Can be used to delay browser-specific rendering
 * until after hydration.
 */

function useIsSSR() {
  let cur = useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext);
  let isInSSRContext = cur !== $f01a183cc7bdff77849e49ad26eb904$var$defaultContext;
  let [isSSR, setIsSSR] = useState(isInSSRContext); // If on the client, and the component was initially server rendered,
  // then schedule a layout effect to update the component after hydration.

  if (typeof window !== 'undefined' && isInSSRContext) {
    // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useLayoutEffect(() => {
      setIsSSR(false);
    }, []);
  }

  return isSSR;
}
;// CONCATENATED MODULE: ./src/utils/with-defaults.ts
const withDefaults = (component, defaultProps) => {
  component.defaultProps = defaultProps;
  return component;
};

/* harmony default export */ const with_defaults = (withDefaults);
;// CONCATENATED MODULE: ./src/utils/object.ts
const object_isObject = target => target && typeof target === 'object';
const renameProp = (oldProp, newProp, {
  [oldProp]: old,
  ...others
}) => ({
  [newProp]: old,
  ...others
}); // copy an object without reference

const copyObject = obj => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  return { ...obj
  };
}; // copy an object omit some keys

const omitObject = (obj, omitKeys) => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  const newObj = { ...obj
  };
  omitKeys.forEach(key => newObj[key] && delete newObj[key]);
  return newObj;
};
;// CONCATENATED MODULE: ./src/utils/clsx.ts
/* eslint-disable no-shadow-restricted-names */

/* eslint-disable no-plusplus */
function toVal(mix) {
  var k,
      y,
      str = '';

  if (typeof mix === 'string' || typeof mix === 'number') {
    str += mix;
  } else if (typeof mix === 'object') {
    if (Array.isArray(mix)) {
      for (k = 0; k < mix.length; k++) {
        if (mix[k]) {
          if (y = toVal(mix[k])) {
            str && (str += ' ');
            str += y;
          }
        }
      }
    } else {
      for (k in mix) {
        if (mix[k]) {
          str && (str += ' ');
          str += k;
        }
      }
    }
  }

  return str;
}

/* harmony default export */ function clsx(...args) {
  var i = 0,
      tmp,
      x,
      str = '';

  while (i < args.length) {
    if (tmp = args[i++]) {
      if (x = toVal(tmp)) {
        str && (str += ' ');
        str += x;
      }
    }
  }

  return str;
}
;// CONCATENATED MODULE: ./src/theme/utils.ts



const getTokenValue = (token, tokenName) => {
  if (!document || !token) return '';
  let docStyle = getComputedStyle(document.documentElement);
  const tokenKey = `--${common.prefix}-${token}-${tokenName}`;
  const tokenValue = docStyle.getPropertyValue(tokenKey);

  if (tokenValue && tokenValue.includes('var')) {
    getTokenValue(token, tokenValue);
  }

  return tokenValue;
};
const getDocumentCSSTokens = () => {
  const colorKeys = [...Object.keys(common.theme.colors), ...Object.keys(light_theme.colors)];
  const shadowKeys = Object.keys(light_theme.shadows);
  /**
   * accents1: {
   *    prefix: "nextui"
   *    scale: "colors"
   *    token: "accents1"
   *    value: "var(--nextui-colors-gray100)"
   * }
   */

  const colorTokens = colorKeys.reduce((acc, crr) => {
    const color = getTokenValue('colors', crr);

    if (color) {
      acc[crr] = {
        prefix: common.prefix,
        scale: 'colors',
        token: crr,
        value: color
      };
    }

    return acc;
  }, {});
  const shadowTokens = shadowKeys.reduce((acc, crr) => {
    const shadow = getTokenValue('shadows', crr);

    if (shadow) {
      acc[crr] = {
        prefix: common.prefix,
        scale: 'shadows',
        token: crr,
        value: shadow
      };
    }

    return acc;
  }, {});
  return {
    colors: colorTokens,
    shadows: shadowTokens
  };
};
/**
 * Returns active theme according to the given document
 */

const getDocumentTheme = el => {
  var _el$getAttribute;

  const styleAttrValues = (el == null ? void 0 : (_el$getAttribute = el.getAttribute('style')) == null ? void 0 : _el$getAttribute.split(';').map(el => el.trim()).filter(el => el.includes('color-scheme'))) || [];
  const colorScheme = styleAttrValues.length > 0 ? styleAttrValues[0].replace('color-scheme: ', '').replace(';', '') : '';
  const documentTheme = el == null ? void 0 : el.getAttribute('data-theme');
  return documentTheme || colorScheme;
};
const getThemeName = theme => {
  if (typeof theme === 'string') {
    return theme != null && theme.includes('-theme') ? theme == null ? void 0 : theme.replace('-theme', '') : theme;
  }

  return theme;
};
const changeTheme = theme => {
  var _el$getAttribute2, _el$getAttribute3;

  if (!document) return;
  const el = document.documentElement;
  const prevClasses = (el == null ? void 0 : (_el$getAttribute2 = el.getAttribute('class')) == null ? void 0 : _el$getAttribute2.split(' ').filter(cls => !cls.includes('theme') && !cls.includes('light') && !cls.includes('dark'))) || [];
  const prevStyles = (el == null ? void 0 : (_el$getAttribute3 = el.getAttribute('style')) == null ? void 0 : _el$getAttribute3.split(';').filter(stl => !stl.includes('color-scheme')).map(el => `${el};`)) || [];
  el == null ? void 0 : el.setAttribute('class', clsx(prevClasses, `${getThemeName(theme)}-theme`));
  el == null ? void 0 : el.setAttribute('style', clsx(prevStyles, `color-scheme: ${theme};`));
};
;// CONCATENATED MODULE: ./src/theme/theme-provider.tsx
var theme_provider_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/theme/theme-provider.tsx";










const defaultProps = {
  disableBaseline: false
};

const ThemeProvider = ({
  theme: userTheme,
  disableBaseline,
  children
}) => {
  const {
    isBrowser
  } = src_use_ssr();
  const [currentTheme, setCurrentTheme] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultContext.type);

  const changeCurrentTheme = type => {
    setCurrentTheme(ct => ct !== type ? type : ct);
  };

  const changeTypeBaseEl = el => {
    const themeValue = getDocumentTheme(el);
    themeValue && changeCurrentTheme(themeValue);
  };

  const providerValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const themeTokens = isBrowser ? getDocumentCSSTokens() : {};
    const theme = deep_merge_deepMerge(copyObject(defaultContext.theme), themeTokens);
    const themeName = getThemeName(currentTheme);
    return {
      theme,
      type: themeName,
      isDark: themeName === 'dark'
    };
  }, [currentTheme, isBrowser]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    var _document, _document4, _document5;

    // initial set
    changeTypeBaseEl((_document = document) == null ? void 0 : _document.documentElement);
    const observer = new MutationObserver(mutation => {
      var _mutation$;

      if (mutation && mutation.length > 0 && ((_mutation$ = mutation[0]) == null ? void 0 : _mutation$.target.nodeName) === 'BODY') {
        var _document2, _document2$body, _document2$body$datas;

        const documentTheme = (_document2 = document) == null ? void 0 : (_document2$body = _document2.body) == null ? void 0 : (_document2$body$datas = _document2$body.dataset) == null ? void 0 : _document2$body$datas.theme;
        documentTheme && changeCurrentTheme(documentTheme);
      } else {
        var _document3;

        changeTypeBaseEl((_document3 = document) == null ? void 0 : _document3.documentElement);
      }
    });
    observer.observe((_document4 = document) == null ? void 0 : _document4.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme', 'style']
    });
    observer.observe((_document5 = document) == null ? void 0 : _document5.body, {
      attributes: true,
      attributeFilter: ['data-theme', 'style']
    });
    return () => observer.disconnect();
  }, []);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!isBrowser || !userTheme) {
      return;
    }

    if (userTheme != null && userTheme.className) {
      changeTheme(userTheme.className);
      changeCurrentTheme(getThemeName(userTheme.className));
    }
  }, [isBrowser, userTheme]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(theme_context.Provider, {
    value: providerValue,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(SSRProvider, {
      children: [!disableBaseline && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_baseline, {}, void 0, false, {
        fileName: theme_provider_jsxFileName,
        lineNumber: 102,
        columnNumber: 30
      }, undefined), children]
    }, void 0, true, {
      fileName: theme_provider_jsxFileName,
      lineNumber: 101,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: theme_provider_jsxFileName,
    lineNumber: 100,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ const theme_provider = (with_defaults(ThemeProvider, defaultProps));
;// CONCATENATED MODULE: ./src/avatar/avatar.styles.ts

const StyledAvatar = styled('span', {
  dflex: 'center',
  position: 'relative',
  zIndex: '$1',
  boxSizing: 'border-box',
  overflow: 'hidden',
  verticalAlign: 'top',
  cursor: 'auto',
  transition: '$default',
  '&:first-child': {
    margin: 0
  },
  '&:hover .nextui-avatar-bg': {
    boxShadow: ' inset 0 0 40px 0 rgb(0 0 0 / 14%)'
  },
  '.nextui-avatar-img': {
    opacity: 0,
    zIndex: '$3',
    display: 'flex',
    bg: '$background',
    transition: 'transform 250ms ease 0ms, opacity 200ms ease-in 0ms',
    width: '100%',
    height: '100%',
    objectFit: 'cover'
  },
  '&[data-state="ready"] .nextui-avatar-img': {
    opacity: 1
  },
  '.nextui-avatar-bg': {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: '$2',
    transition: '$default'
  },
  '.nextui-avatar-icon': {
    display: 'flex',
    position: 'absolute',
    left: '50%',
    top: '50%',
    ta: 'center',
    zIndex: '$2',
    transform: 'translate(-50%, -50%)',
    whiteSpace: 'nowrap',
    us: 'none'
  },
  '.nextui-avatar-text': {
    position: 'absolute',
    zIndex: '$2',
    left: '50%',
    top: '50%',
    ta: 'center',
    transform: 'translate(-50%, -50%) scale(0.65)',
    whiteSpace: 'nowrap',
    us: 'none'
  },
  '@motion': {
    transition: 'none',
    '.nextui-avatar-bg, .nextui-avatar-img': {
      transition: 'none'
    }
  },
  variants: {
    color: {
      default: {
        '.nextui-avatar-bg': {
          bg: '$accents2'
        }
      },
      primary: {
        '.nextui-avatar-bg': {
          bg: '$primary'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      },
      secondary: {
        '.nextui-avatar-bg': {
          bg: '$secondary'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      },
      success: {
        '.nextui-avatar-bg': {
          bg: '$success'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      },
      warning: {
        '.nextui-avatar-bg': {
          bg: '$warning'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      },
      error: {
        '.nextui-avatar-bg': {
          bg: '$error'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      },
      gradient: {
        '.nextui-avatar-bg': {
          bg: '$gradient'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      }
    },
    textColor: {
      default: {
        '.nextui-avatar-text': {
          color: '$text'
        }
      },
      primary: {
        '.nextui-avatar-text': {
          color: '$primary'
        }
      },
      secondary: {
        '.nextui-avatar-text': {
          color: '$secondary'
        }
      },
      success: {
        '.nextui-avatar-text': {
          color: '$success'
        }
      },
      warning: {
        '.nextui-avatar-text': {
          color: '$warning'
        }
      },
      error: {
        '.nextui-avatar-text': {
          color: '$error'
        }
      }
    },
    size: {
      xs: {
        $$avatarXs: '$space$9',
        sizeMin: '$$avatarXs',
        '&.nextui-avatar-bg': {
          size: '$$avatarXs'
        },
        '.nextui-avatar-text': {
          fontSize: '$xs'
        }
      },
      sm: {
        $$avatarSm: '$space$11',
        sizeMin: '$$avatarSm',
        '.nextui-avatar-bg': {
          size: '$$avatarSm'
        },
        '.nextui-avatar-text': {
          fontSize: '$base'
        }
      },
      md: {
        $$avatarMd: '$space$14',
        sizeMin: '$$avatarMd',
        '.nextui-avatar-bg': {
          size: '$$avatarMd'
        },
        '.nextui-avatar-text': {
          fontSize: '$sm'
        }
      },
      lg: {
        $$avatarLg: '$space$16',
        sizeMin: '$$avatarLg',
        '.nextui-avatar-bg': {
          size: '$$avatarLg'
        },
        '.nextui-avatar-text': {
          fontSize: '$sm'
        }
      },
      xl: {
        $$avatarXl: '$space$18',
        sizeMin: '$$avatarXl',
        '&.nextui-avatar-bg': {
          size: '$$avatarXl'
        },
        '.nextui-avatar-text': {
          fontSize: '$md'
        }
      }
    },
    borderWeight: {
      light: {
        '.nextui-avatar-img': {
          borderWidth: '$light'
        }
      },
      normal: {
        '.nextui-avatar-img': {
          borderWidth: '$normal'
        }
      },
      bold: {
        '.nextui-avatar-img': {
          borderWidth: '$normal'
        }
      },
      extrabold: {
        '.nextui-avatar-img': {
          borderWidth: '$normal'
        }
      },
      black: {
        '.nextui-avatar-img': {
          borderWidth: '$normal'
        }
      }
    },
    bordered: {
      true: {
        '&:hover:not(.only-text-avatar) .nextui-avatar-bg': {
          opacity: '0.6'
        },
        '.nextui-avatar-img': {
          borderStyle: 'solid',
          borderColor: '$background'
        }
      }
    },
    stacked: {
      true: {
        ml: '-$5'
      }
    },
    pointer: {
      true: {
        cursor: 'pointer'
      }
    },
    rounded: {
      true: {
        borderRadius: '$rounded',
        '.nextui-avatar-img': {
          borderRadius: '$rounded'
        }
      }
    },
    squared: {
      true: {
        borderRadius: '$squared',
        '.nextui-avatar-img': {
          borderRadius: '$squared'
        }
      }
    },
    zoomed: {
      true: {
        '&:hover .nextui-avatar-img': {
          transform: 'scale(1.125)'
        }
      }
    }
  },
  compoundVariants: [{
    bordered: true,
    borderWeight: 'light',
    css: {
      padding: 'calc($1/2)'
    }
  }, {
    bordered: true,
    borderWeight: 'normal',
    css: {
      padding: '$1'
    }
  }, {
    bordered: true,
    borderWeight: 'bold',
    css: {
      padding: 'calc($2/1.5)'
    }
  }, {
    bordered: true,
    borderWeight: 'extrabold',
    css: {
      padding: '$2'
    }
  }, {
    bordered: true,
    borderWeight: 'black',
    css: {
      padding: 'calc($3/1.5)'
    }
  }, {
    rounded: true,
    squared: true,
    css: {
      borderRadius: '$squared',
      '.nextui-avatar-img': {
        borderRadius: '$squared'
      }
    }
  }],
  defaultVariants: {
    size: 'md',
    rounded: true,
    color: 'default',
    textColor: 'default',
    borderWeight: 'normal'
  }
});
/* harmony default export */ const avatar_styles = (StyledAvatar);
;// CONCATENATED MODULE: ./src/avatar/avatar.tsx
var avatar_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/avatar/avatar.tsx";





const safeText = text => {
  if ((text == null ? void 0 : text.length) <= 4) return text;
  return text == null ? void 0 : text.slice(0, 3);
};

const Avatar = ({
  src,
  text,
  icon,
  alt,
  className,
  ...props
}) => {
  const showText = !src;
  const [ready, setReady] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const imgRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    var _imgRef$current;

    (imgRef == null ? void 0 : (_imgRef$current = imgRef.current) == null ? void 0 : _imgRef$current.complete) && setReady(true);
  }, []);
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return !ready && src ? 'loading' : 'ready';
  }, [src, ready]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(avatar_styles, {
    className: clsx({
      'only-text-avatar': showText
    }, className),
    "data-state": getState,
    ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-avatar-bg"
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 62,
      columnNumber: 7
    }, undefined), !showText && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("img", {
      ref: imgRef,
      className: clsx('nextui-avatar-img', `nextui-avatar--${getState}`, {
        'nextui-avatar-ready': ready
      }),
      src: src,
      alt: alt,
      "data-state": getState,
      onLoad: () => setReady(true)
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 64,
      columnNumber: 9
    }, undefined), showText && !icon && text && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-avatar-text",
      children: safeText(text)
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 76,
      columnNumber: 9
    }, undefined), icon && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-avatar-icon",
      children: icon
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 78,
      columnNumber: 16
    }, undefined)]
  }, void 0, true, {
    fileName: avatar_jsxFileName,
    lineNumber: 52,
    columnNumber: 5
  }, undefined);
};

Avatar.toString = () => '.nextui-avatar';

/* harmony default export */ const avatar = (Avatar);
;// CONCATENATED MODULE: ./src/avatar/avatar-group.styles.ts


const StyledAvatarGroupCount = styled('span', {
  fontSize: '$xs',
  display: 'inline-flex',
  alignItems: 'center',
  marginLeft: '$3',
  color: '$text'
});
const StyledAvatarGroup = styled('div', {
  dflex: 'center',
  height: 'auto',
  width: 'max-content',
  '@motion': {
    transition: 'none'
  },
  [`& ${avatar_styles}`]: {
    marginLeft: '-$space$5',
    transition: '$default',
    '.only-text-avatar': {
      boxShadow: '$xs'
    }
  },
  '.only-text-avatar': {
    boxShadow: '$xs'
  },
  variants: {
    animated: {
      true: {
        [`& ${avatar_styles}:hover`]: {
          transform: 'translate(-$space$5)'
        }
      }
    }
  },
  defaultVariants: {
    animated: true
  }
});
/* harmony default export */ const avatar_group_styles = (StyledAvatarGroup);
;// CONCATENATED MODULE: ./src/avatar/avatar-group.tsx
var avatar_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/avatar/avatar-group.tsx";




const AvatarGroup = ({
  count,
  children,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(avatar_group_styles, { ...props,
    children: [children, count && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledAvatarGroupCount, {
      className: "nextui-avatar-group-count",
      children: ["+", count]
    }, void 0, true, {
      fileName: avatar_group_jsxFileName,
      lineNumber: 28,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: avatar_group_jsxFileName,
    lineNumber: 25,
    columnNumber: 5
  }, undefined);
};

AvatarGroup.toString = () => '.nextui-avatar-group';

/* harmony default export */ const avatar_group = (AvatarGroup);
;// CONCATENATED MODULE: ./src/avatar/index.ts





avatar.Group = avatar_group;
/* harmony default export */ const src_avatar = (avatar);
;// CONCATENATED MODULE: ../../node_modules/@react-aria/utils/dist/module.js





 // During SSR, React emits a warning when calling useLayoutEffect.
// Since neither useLayoutEffect nor useEffect run on the server,
// we can suppress this by replace it with a noop on the server.

const module_useLayoutEffect = typeof window !== 'undefined' ? (external_root_React_commonjs2_react_commonjs_react_amd_react_default()).useLayoutEffect : () => {};
let $f8b5fdd96fb429d7102983f777c41307$var$idsUpdaterMap = new Map();
/**
 * If a default is not provided, generate an id.
 * @param defaultId - Default component id.
 */

function useId(defaultId) {
  let isRendering = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(true);
  isRendering.current = true;
  let [value, setValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultId);
  let nextId = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let res = useSSRSafeId(value); // don't memo this, we want it new each render so that the Effects always run

  let updateValue = val => {
    if (!isRendering.current) {
      setValue(val);
    } else {
      nextId.current = val;
    }
  };

  $f8b5fdd96fb429d7102983f777c41307$var$idsUpdaterMap.set(res, updateValue);
  module_useLayoutEffect(() => {
    isRendering.current = false;
  }, [updateValue]);
  module_useLayoutEffect(() => {
    let r = res;
    return () => {
      $f8b5fdd96fb429d7102983f777c41307$var$idsUpdaterMap.delete(r);
    };
  }, [res]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let newId = nextId.current;

    if (newId) {
      setValue(newId);
      nextId.current = null;
    }
  }, [setValue, updateValue]);
  return res;
}
/**
 * Merges two ids.
 * Different ids will trigger a side-effect and re-render components hooked up with `useId`.
 */

function mergeIds(idA, idB) {
  if (idA === idB) {
    return idA;
  }

  let setIdA = $f8b5fdd96fb429d7102983f777c41307$var$idsUpdaterMap.get(idA);

  if (setIdA) {
    setIdA(idB);
    return idB;
  }

  let setIdB = $f8b5fdd96fb429d7102983f777c41307$var$idsUpdaterMap.get(idB);

  if (setIdB) {
    setIdB(idA);
    return idA;
  }

  return idB;
}
/**
 * Used to generate an id, and after render, check if that id is rendered so we know
 * if we can use it in places such as labelledby.
 * @param depArray - When to recalculate if the id is in the DOM.
 */

function module_useSlotId(depArray) {
  if (depArray === void 0) {
    depArray = [];
  }

  let id = useId();
  let [resolvedId, setResolvedId] = useValueEffect(id);
  let updateId = useCallback(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : null;
    });
  }, [id, setResolvedId]);
  module_useLayoutEffect(updateId, [id, updateId, ...depArray]);
  return resolvedId;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/**
 * Calls all functions in the order they were chained with the same arguments.
 */

function chain() {
  for (var _len = arguments.length, callbacks = new Array(_len), _key = 0; _key < _len; _key++) {
    callbacks[_key] = arguments[_key];
  }

  return function () {
    for (let callback of callbacks) {
      if (typeof callback === 'function') {
        callback(...arguments);
      }
    }
  };
}
/**
 * Merges multiple props objects together. Event handlers are chained,
 * classNames are combined, and ids are deduplicated - different ids
 * will trigger a side-effect and re-render components hooked up with `useId`.
 * For all other props, the last prop object overrides all previous ones.
 * @param args - Multiple sets of props to merge together.
 */

function module_mergeProps() {
  // Start with a base clone of the first argument. This is a lot faster than starting
  // with an empty object and adding properties as we go.
  let result = _babelRuntimeHelpersEsmExtends({}, arguments.length <= 0 ? undefined : arguments[0]);

  for (let i = 1; i < arguments.length; i++) {
    let props = i < 0 || arguments.length <= i ? undefined : arguments[i];

    for (let key in props) {
      let a = result[key];
      let b = props[key]; // Chain events

      if (typeof a === 'function' && typeof b === 'function' && // This is a lot faster than a regex.
      key[0] === 'o' && key[1] === 'n' && key.charCodeAt(2) >=
      /* 'A' */
      65 && key.charCodeAt(2) <=
      /* 'Z' */
      90) {
        result[key] = chain(a, b); // Merge classnames, sometimes classNames are empty string which eval to false, so we just need to do a type check
      } else if ((key === 'className' || key === 'UNSAFE_className') && typeof a === 'string' && typeof b === 'string') {
        result[key] = _clsx(a, b);
      } else if (key === 'id' && a && b) {
        result.id = mergeIds(a, b); // Override others
      } else {
        result[key] = b !== undefined ? b : a;
      }
    }
  }

  return result;
}
const $f6a965352cabf1a7c37e8c1337e5eab$var$DOMPropNames = new Set(['id']);
const $f6a965352cabf1a7c37e8c1337e5eab$var$labelablePropNames = new Set(['aria-label', 'aria-labelledby', 'aria-describedby', 'aria-details']);
const $f6a965352cabf1a7c37e8c1337e5eab$var$propRe = /^(data-.*)$/;
/**
 * Filters out all props that aren't valid DOM props or defined via override prop obj.
 * @param props - The component props to be filtered.
 * @param opts - Props to override.
 */

function filterDOMProps(props, opts) {
  if (opts === void 0) {
    opts = {};
  }

  let {
    labelable,
    propNames
  } = opts;
  let filteredProps = {};

  for (const prop in props) {
    if (Object.prototype.hasOwnProperty.call(props, prop) && ($f6a965352cabf1a7c37e8c1337e5eab$var$DOMPropNames.has(prop) || labelable && $f6a965352cabf1a7c37e8c1337e5eab$var$labelablePropNames.has(prop) || propNames != null && propNames.has(prop) || $f6a965352cabf1a7c37e8c1337e5eab$var$propRe.test(prop))) {
      filteredProps[prop] = props[prop];
    }
  }

  return filteredProps;
} // Currently necessary for Safari and old Edge:
// https://caniuse.com/#feat=mdn-api_htmlelement_focus_preventscroll_option
// See https://bugs.webkit.org/show_bug.cgi?id=178583
//
// Original licensing for the following methods can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/calvellido/focus-options-polyfill

function module_focusWithoutScrolling(element) {
  if ($bc7c9c3af78f5218ff72cecce15730$var$supportsPreventScroll()) {
    element.focus({
      preventScroll: true
    });
  } else {
    let scrollableElements = $bc7c9c3af78f5218ff72cecce15730$var$getScrollableElements(element);
    element.focus();
    $bc7c9c3af78f5218ff72cecce15730$var$restoreScrollPosition(scrollableElements);
  }
}
let $bc7c9c3af78f5218ff72cecce15730$var$supportsPreventScrollCached = null;

function $bc7c9c3af78f5218ff72cecce15730$var$supportsPreventScroll() {
  if ($bc7c9c3af78f5218ff72cecce15730$var$supportsPreventScrollCached == null) {
    $bc7c9c3af78f5218ff72cecce15730$var$supportsPreventScrollCached = false;

    try {
      var focusElem = document.createElement('div');
      focusElem.focus({
        get preventScroll() {
          $bc7c9c3af78f5218ff72cecce15730$var$supportsPreventScrollCached = true;
          return true;
        }

      });
    } catch (e) {// Ignore
    }
  }

  return $bc7c9c3af78f5218ff72cecce15730$var$supportsPreventScrollCached;
}

function $bc7c9c3af78f5218ff72cecce15730$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;

  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) {
      scrollableElements.push({
        element: parent,
        scrollTop: parent.scrollTop,
        scrollLeft: parent.scrollLeft
      });
    }

    parent = parent.parentNode;
  }

  if (rootScrollingElement instanceof HTMLElement) {
    scrollableElements.push({
      element: rootScrollingElement,
      scrollTop: rootScrollingElement.scrollTop,
      scrollLeft: rootScrollingElement.scrollLeft
    });
  }

  return scrollableElements;
}

function $bc7c9c3af78f5218ff72cecce15730$var$restoreScrollPosition(scrollableElements) {
  for (let {
    element,
    scrollTop,
    scrollLeft
  } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}

function getOffset(element, reverse, orientation) {
  if (orientation === void 0) {
    orientation = 'horizontal';
  }

  let rect = element.getBoundingClientRect();

  if (reverse) {
    return orientation === 'horizontal' ? rect.right : rect.bottom;
  }

  return orientation === 'horizontal' ? rect.left : rect.top;
} // mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.

let $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$transitionsByElement = new Map(); // A list of callbacks to call once there are no transitioning elements.

let $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$transitionCallbacks = new Set();

function $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$setupGlobalEvents() {
  if (typeof window === 'undefined') {
    return;
  }

  let onTransitionStart = e => {
    // Add the transitioning property to the list for this element.
    let transitions = $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$transitionsByElement.get(e.target);

    if (!transitions) {
      transitions = new Set();
      $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$transitionsByElement.set(e.target, transitions); // The transitioncancel event must be registered on the element itself, rather than as a global
      // event. This enables us to handle when the node is deleted from the document while it is transitioning.
      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.

      e.target.addEventListener('transitioncancel', onTransitionEnd);
    }

    transitions.add(e.propertyName);
  };

  let onTransitionEnd = e => {
    // Remove property from list of transitioning properties.
    let properties = $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$transitionsByElement.get(e.target);

    if (!properties) {
      return;
    }

    properties.delete(e.propertyName); // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.

    if (properties.size === 0) {
      e.target.removeEventListener('transitioncancel', onTransitionEnd);
      $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$transitionsByElement.delete(e.target);
    } // If no transitioning elements, call all of the queued callbacks.


    if ($b3e8d5c5f32fa26afa6df1b81f09b6b8$var$transitionsByElement.size === 0) {
      for (let cb of $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$transitionCallbacks) {
        cb();
      }

      $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$transitionCallbacks.clear();
    }
  };

  document.body.addEventListener('transitionrun', onTransitionStart);
  document.body.addEventListener('transitionend', onTransitionEnd);
}

if (typeof document !== 'undefined') {
  if (document.readyState !== 'loading') {
    $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$setupGlobalEvents();
  } else {
    document.addEventListener('DOMContentLoaded', $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$setupGlobalEvents);
  }
}

function module_runAfterTransition(fn) {
  // Wait one frame to see if an animation starts, e.g. a transition on mount.
  requestAnimationFrame(() => {
    // If no transitions are running, call the function immediately.
    // Otherwise, add it to a list of callbacks to run at the end of the animation.
    if ($b3e8d5c5f32fa26afa6df1b81f09b6b8$var$transitionsByElement.size === 0) {
      fn();
    } else {
      $b3e8d5c5f32fa26afa6df1b81f09b6b8$var$transitionCallbacks.add(fn);
    }
  });
} // Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.

const $be9622dfd8e876c0943b0b4e429554f3$var$draggingElements = (/* unused pure expression or super */ null && ([])); // created for splitview, this should be reusable for things like sliders/dials
// It also handles keyboard events on the target allowing for increment/decrement by a given stepsize as well as minifying/maximizing and toggling between minified and previous size
// It can also take a 'reverse' param to say if we should measure from the right/bottom instead of the top/left
// It can also handle either a vertical or horizontal movement, but not both at the same time

function useDrag1D(props) {
  console.warn('useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html');
  let {
    containerRef,
    reverse,
    orientation,
    onHover,
    onDrag,
    onPositionChange,
    onIncrement,
    onDecrement,
    onIncrementToMax,
    onDecrementToMin,
    onCollapseToggle
  } = props;

  let getPosition = e => orientation === 'horizontal' ? e.clientX : e.clientY;

  let getNextOffset = e => {
    let containerOffset = getOffset(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };

  let dragging = useRef(false);
  let prevPosition = useRef(0); // Keep track of the current handlers in a ref so that the events can access them.

  let handlers = useRef({
    onPositionChange,
    onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;

  let onMouseDragged = e => {
    e.preventDefault();
    let nextOffset = getNextOffset(e);

    if (!dragging.current) {
      dragging.current = true;

      if (handlers.current.onDrag) {
        handlers.current.onDrag(true);
      }

      if (handlers.current.onPositionChange) {
        handlers.current.onPositionChange(nextOffset);
      }
    }

    if (prevPosition.current === nextOffset) {
      return;
    }

    prevPosition.current = nextOffset;

    if (onPositionChange) {
      onPositionChange(nextOffset);
    }
  };

  let onMouseUp = e => {
    const target = e.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e);

    if (handlers.current.onDrag) {
      handlers.current.onDrag(false);
    }

    if (handlers.current.onPositionChange) {
      handlers.current.onPositionChange(nextOffset);
    }

    $be9622dfd8e876c0943b0b4e429554f3$var$draggingElements.splice($be9622dfd8e876c0943b0b4e429554f3$var$draggingElements.indexOf(target), 1);
    window.removeEventListener('mouseup', onMouseUp, false);
    window.removeEventListener('mousemove', onMouseDragged, false);
  };

  let onMouseDown = e => {
    const target = e.currentTarget; // If we're already handling dragging on a descendant with useDrag1D, then
    // we don't want to handle the drag motion on this target as well.

    if ($be9622dfd8e876c0943b0b4e429554f3$var$draggingElements.some(elt => target.contains(elt))) {
      return;
    }

    $be9622dfd8e876c0943b0b4e429554f3$var$draggingElements.push(target);
    window.addEventListener('mousemove', onMouseDragged, false);
    window.addEventListener('mouseup', onMouseUp, false);
  };

  let onMouseEnter = () => {
    if (onHover) {
      onHover(true);
    }
  };

  let onMouseOut = () => {
    if (onHover) {
      onHover(false);
    }
  };

  let onKeyDown = e => {
    switch (e.key) {
      case 'Left':
      case 'ArrowLeft':
        if (orientation === 'horizontal') {
          e.preventDefault();

          if (onDecrement && !reverse) {
            onDecrement();
          } else if (onIncrement && reverse) {
            onIncrement();
          }
        }

        break;

      case 'Up':
      case 'ArrowUp':
        if (orientation === 'vertical') {
          e.preventDefault();

          if (onDecrement && !reverse) {
            onDecrement();
          } else if (onIncrement && reverse) {
            onIncrement();
          }
        }

        break;

      case 'Right':
      case 'ArrowRight':
        if (orientation === 'horizontal') {
          e.preventDefault();

          if (onIncrement && !reverse) {
            onIncrement();
          } else if (onDecrement && reverse) {
            onDecrement();
          }
        }

        break;

      case 'Down':
      case 'ArrowDown':
        if (orientation === 'vertical') {
          e.preventDefault();

          if (onIncrement && !reverse) {
            onIncrement();
          } else if (onDecrement && reverse) {
            onDecrement();
          }
        }

        break;

      case 'Home':
        e.preventDefault();

        if (onDecrementToMin) {
          onDecrementToMin();
        }

        break;

      case 'End':
        e.preventDefault();

        if (onIncrementToMax) {
          onIncrementToMax();
        }

        break;

      case 'Enter':
        e.preventDefault();

        if (onCollapseToggle) {
          onCollapseToggle();
        }

        break;
    }
  };

  return {
    onMouseDown,
    onMouseEnter,
    onMouseOut,
    onKeyDown
  };
}
function module_useGlobalListeners() {
  let globalListeners = useRef(new Map());
  let addGlobalListener = useCallback((eventTarget, type, listener, options) => {
    // Make sure we remove the listener after it is called with the `once` option.
    let fn = options != null && options.once ? function () {
      globalListeners.current.delete(listener);
      listener(...arguments);
    } : listener;
    globalListeners.current.set(listener, {
      type,
      eventTarget,
      fn,
      options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = useCallback((eventTarget, type, listener, options) => {
    var _globalListeners$curr;

    let fn = ((_globalListeners$curr = globalListeners.current.get(listener)) == null ? void 0 : _globalListeners$curr.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = useCallback(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [removeGlobalListener]); // eslint-disable-next-line arrow-body-style

  useEffect(() => {
    return removeAllGlobalListeners;
  }, [removeAllGlobalListeners]);
  return {
    addGlobalListener,
    removeGlobalListener,
    removeAllGlobalListeners
  };
}
/**
 * Merges aria-label and aria-labelledby into aria-labelledby when both exist.
 * @param props - Aria label props.
 * @param defaultLabel - Default value for aria-label when not present.
 */

function useLabels(props, defaultLabel) {
  let {
    id,
    'aria-label': label,
    'aria-labelledby': labelledBy
  } = props; // If there is both an aria-label and aria-labelledby,
  // combine them by pointing to the element itself.

  id = useId(id);

  if (labelledBy && label) {
    let ids = new Set([...labelledBy.trim().split(/\s+/), id]);
    labelledBy = [...ids].join(' ');
  } else if (labelledBy) {
    labelledBy = labelledBy.trim().split(/\s+/).join(' ');
  } // If no labels are provided, use the default


  if (!label && !labelledBy && defaultLabel) {
    label = defaultLabel;
  }

  return {
    id,
    'aria-label': label,
    'aria-labelledby': labelledBy
  };
}
/**
 * Offers an object ref for a given callback ref or an object ref. Especially
 * helfpul when passing forwarded refs (created using `React.forwardRef`) to
 * React Aria Hooks.
 *
 * @param forwardedRef The original ref intended to be used.
 * @returns An object ref that updates the given ref.
 * @see https://reactjs.org/docs/forwarding-refs.html
 */

function useObjectRef(forwardedRef) {
  const objRef = useRef();
  /**
   * We're using `useLayoutEffect` here instead of `useEffect` because we want
   * to make sure that the `ref` value is up to date before other places in the
   * the execution cycle try to read it.
   */

  module_useLayoutEffect(() => {
    if (!forwardedRef) {
      return;
    }

    if (typeof forwardedRef === 'function') {
      forwardedRef(objRef.current);
    } else {
      forwardedRef.current = objRef.current;
    }
  }, [forwardedRef]);
  return objRef;
} // Like useEffect, but only called for updates after the initial render.

function useUpdateEffect(effect, dependencies) {
  const isInitialMount = useRef(true);
  useEffect(() => {
    if (isInitialMount.current) {
      isInitialMount.current = false;
    } else {
      effect();
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, dependencies);
}

function $d642970c01dc21e3fe2261c17768$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== 'undefined';
}

function useResizeObserver(options) {
  const {
    ref,
    onResize
  } = options;
  useEffect(() => {
    let element = ref == null ? void 0 : ref.current;

    if (!element) {
      return;
    }

    if (!$d642970c01dc21e3fe2261c17768$var$hasResizeObserver()) {
      window.addEventListener('resize', onResize, false);
      return () => {
        window.removeEventListener('resize', onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver(entries => {
        if (!entries.length) {
          return;
        }

        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element) {
          resizeObserverInstance.unobserve(element);
        }
      };
    }
  }, [onResize, ref]);
} // Syncs ref from context with ref passed to hook

function module_useSyncRef(context, ref) {
  module_useLayoutEffect(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [context, ref]);
}
function getScrollParent(node) {
  while (node && !$a164c39662575b65a0b01a73e313e5$var$isScrollable(node)) {
    node = node.parentElement;
  }

  return node || document.scrollingElement || document.documentElement;
}

function $a164c39662575b65a0b01a73e313e5$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
} // @ts-ignore


let $d662329747d896105af008c761523$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;
function useViewportSize() {
  let [size, setSize] = useState(() => $d662329747d896105af008c761523$var$getViewportSize());
  useEffect(() => {
    // Use visualViewport api to track available height even on iOS virtual keyboard opening
    let onResize = () => {
      setSize(size => {
        let newSize = $d662329747d896105af008c761523$var$getViewportSize();

        if (newSize.width === size.width && newSize.height === size.height) {
          return size;
        }

        return newSize;
      });
    };

    if (!$d662329747d896105af008c761523$var$visualViewport) {
      window.addEventListener('resize', onResize);
    } else {
      $d662329747d896105af008c761523$var$visualViewport.addEventListener('resize', onResize);
    }

    return () => {
      if (!$d662329747d896105af008c761523$var$visualViewport) {
        window.removeEventListener('resize', onResize);
      } else {
        $d662329747d896105af008c761523$var$visualViewport.removeEventListener('resize', onResize);
      }
    };
  }, []);
  return size;
}

function $d662329747d896105af008c761523$var$getViewportSize() {
  return {
    width: ($d662329747d896105af008c761523$var$visualViewport == null ? void 0 : $d662329747d896105af008c761523$var$visualViewport.width) || window.innerWidth,
    height: ($d662329747d896105af008c761523$var$visualViewport == null ? void 0 : $d662329747d896105af008c761523$var$visualViewport.height) || window.innerHeight
  };
}

let $c8aa524f123a75a64d51e06d16b9568$var$descriptionId = 0;
const $c8aa524f123a75a64d51e06d16b9568$var$descriptionNodes = new Map();
function module_useDescription(description) {
  let [id, setId] = useState(null);
  module_useLayoutEffect(() => {
    if (!description) {
      return;
    }

    let desc = $c8aa524f123a75a64d51e06d16b9568$var$descriptionNodes.get(description);

    if (!desc) {
      let id = "react-aria-description-" + $c8aa524f123a75a64d51e06d16b9568$var$descriptionId++;
      setId(id);
      let node = document.createElement('div');
      node.id = id;
      node.style.display = 'none';
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      $c8aa524f123a75a64d51e06d16b9568$var$descriptionNodes.set(description, desc);
    } else {
      setId(desc.element.id);
    }

    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        $c8aa524f123a75a64d51e06d16b9568$var$descriptionNodes.delete(description);
      }
    };
  }, [description]);
  return {
    'aria-describedby': description ? id : undefined
  };
}

function $b0986c1243f71db8e992f67117a1ed9$var$testUserAgent(re) {
  return typeof window !== 'undefined' && window.navigator != null ? re.test(window.navigator.userAgent) : false;
}

function $b0986c1243f71db8e992f67117a1ed9$var$testPlatform(re) {
  return typeof window !== 'undefined' && window.navigator != null ? re.test(window.navigator.platform) : false;
}

function module_isMac() {
  return $b0986c1243f71db8e992f67117a1ed9$var$testPlatform(/^Mac/);
}
function isIPhone() {
  return $b0986c1243f71db8e992f67117a1ed9$var$testPlatform(/^iPhone/);
}
function isIPad() {
  return $b0986c1243f71db8e992f67117a1ed9$var$testPlatform(/^iPad/) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  module_isMac() && navigator.maxTouchPoints > 1;
}
function module_isIOS() {
  return isIPhone() || isIPad();
}
function isAppleDevice() {
  return module_isMac() || module_isIOS();
}
function isWebKit() {
  return $b0986c1243f71db8e992f67117a1ed9$var$testUserAgent(/AppleWebKit/) && !isChrome();
}
function isChrome() {
  return $b0986c1243f71db8e992f67117a1ed9$var$testUserAgent(/Chrome/);
}
function isAndroid() {
  return $b0986c1243f71db8e992f67117a1ed9$var$testUserAgent(/Android/);
}
function module_useEvent(ref, event, handler, options) {
  let handlerRef = useRef(handler);
  handlerRef.current = handler;
  let isDisabled = handler == null;
  useEffect(() => {
    if (isDisabled) {
      return;
    }

    let element = ref.current;

    let handler = e => handlerRef.current.call(this, e);

    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [ref, event, options, isDisabled]);
} // This hook works like `useState`, but when setting the value, you pass a generator function
// that can yield multiple values. Each yielded value updates the state and waits for the next
// layout effect, then continues the generator. This allows sequential updates to state to be
// written linearly.

function useValueEffect(defaultValue) {
  let [value, setValue] = useState(defaultValue);
  let valueRef = useRef(value);
  let effect = useRef(null);
  valueRef.current = value; // Store the function in a ref so we can always access the current version
  // which has the proper `value` in scope.

  let nextRef = useRef(null);

  nextRef.current = () => {
    // Run the generator to the next yield.
    let newValue = effect.current.next(); // If the generator is done, reset the effect.

    if (newValue.done) {
      effect.current = null;
      return;
    } // If the value is the same as the current value,
    // then continue to the next yield. Otherwise,
    // set the value in state and wait for the next layout effect.


    if (value === newValue.value) {
      nextRef.current();
    } else {
      setValue(newValue.value);
    }
  };

  module_useLayoutEffect(() => {
    // If there is an effect currently running, continue to the next yield.
    if (effect.current) {
      nextRef.current();
    }
  });
  let queue = useCallback(fn => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [effect, nextRef]);
  return [value, queue];
}
function scrollIntoView(scrollView, element) {
  let offsetX = $ee7b96dbd8c9e13f6bb9633061c3e9d$var$relativeOffset(scrollView, element, 'left');
  let offsetY = $ee7b96dbd8c9e13f6bb9633061c3e9d$var$relativeOffset(scrollView, element, 'top');
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let maxX = x + scrollView.offsetWidth;
  let maxY = y + scrollView.offsetHeight;

  if (offsetX <= x) {
    x = offsetX;
  } else if (offsetX + width > maxX) {
    x += offsetX + width - maxX;
  }

  if (offsetY <= y) {
    y = offsetY;
  } else if (offsetY + height > maxY) {
    y += offsetY + height - maxY;
  }

  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */

function $ee7b96dbd8c9e13f6bb9633061c3e9d$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';
  let sum = 0;

  while (child.offsetParent) {
    sum += child[prop];

    if (child.offsetParent === ancestor) {
      // Stop once we have found the ancestor we are interested in.
      break;
    } else if (child.offsetParent.contains(ancestor)) {
      // If the ancestor is not `position:relative`, then we stop at
      // _its_ offset parent, and we subtract off _its_ offset, so that
      // we end up with the proper offset from child to ancestor.
      sum -= ancestor[prop];
      break;
    }

    child = child.offsetParent;
  }

  return sum;
}
;// CONCATENATED MODULE: ../../node_modules/@react-aria/interactions/dist/module.js



 // Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element
// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually

let $e17c9db826984f8ab8e5d837bf0b8$var$state = 'default';
let $e17c9db826984f8ab8e5d837bf0b8$var$savedUserSelect = '';
let $e17c9db826984f8ab8e5d837bf0b8$var$modifiedElementMap = new WeakMap();

function $e17c9db826984f8ab8e5d837bf0b8$export$disableTextSelection(target) {
  if (isIOS()) {
    if ($e17c9db826984f8ab8e5d837bf0b8$var$state === 'default') {
      $e17c9db826984f8ab8e5d837bf0b8$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
      document.documentElement.style.webkitUserSelect = 'none';
    }

    $e17c9db826984f8ab8e5d837bf0b8$var$state = 'disabled';
  } else if (target) {
    // If not iOS, store the target's original user-select and change to user-select: none
    // Ignore state since it doesn't apply for non iOS
    $e17c9db826984f8ab8e5d837bf0b8$var$modifiedElementMap.set(target, target.style.userSelect);
    target.style.userSelect = 'none';
  }
}

function $e17c9db826984f8ab8e5d837bf0b8$export$restoreTextSelection(target) {
  if (isIOS()) {
    // If the state is already default, there's nothing to do.
    // If it is restoring, then there's no need to queue a second restore.
    if ($e17c9db826984f8ab8e5d837bf0b8$var$state !== 'disabled') {
      return;
    }

    $e17c9db826984f8ab8e5d837bf0b8$var$state = 'restoring'; // There appears to be a delay on iOS where selection still might occur
    // after pointer up, so wait a bit before removing user-select.

    setTimeout(() => {
      // Wait for any CSS transitions to complete so we don't recompute style
      // for the whole page in the middle of the animation and cause jank.
      runAfterTransition(() => {
        // Avoid race conditions
        if ($e17c9db826984f8ab8e5d837bf0b8$var$state === 'restoring') {
          if (document.documentElement.style.webkitUserSelect === 'none') {
            document.documentElement.style.webkitUserSelect = $e17c9db826984f8ab8e5d837bf0b8$var$savedUserSelect || '';
          }

          $e17c9db826984f8ab8e5d837bf0b8$var$savedUserSelect = '';
          $e17c9db826984f8ab8e5d837bf0b8$var$state = 'default';
        }
      });
    }, 300);
  } else {
    // If not iOS, restore the target's original user-select if any
    // Ignore state since it doesn't apply for non iOS
    if (target && $e17c9db826984f8ab8e5d837bf0b8$var$modifiedElementMap.has(target)) {
      let targetOldUserSelect = $e17c9db826984f8ab8e5d837bf0b8$var$modifiedElementMap.get(target);

      if (target.style.userSelect === 'none') {
        target.style.userSelect = targetOldUserSelect;
      }

      if (target.getAttribute('style') === '') {
        target.removeAttribute('style');
      }

      $e17c9db826984f8ab8e5d837bf0b8$var$modifiedElementMap.delete(target);
    }
  }
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// Original licensing for the following method can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/blob/3c713d513195a53788b3f8bb4b70279d68b15bcc/packages/react-interactions/events/src/dom/shared/index.js#L74-L87
// Keyboards, Assistive Technologies, and element.click() all produce a "virtual"
// click event. This is a method of inferring such clicks. Every browser except
// IE 11 only sets a zero value of "detail" for click events that are "virtual".
// However, IE 11 uses a zero value for all click events. For IE 11 we rely on
// the quirk that it produces click events that are of type PointerEvent, and
// where only the "virtual" click lacks a pointerType field.


function $f67ef9f1b8ed09b4b00fd0840cd8b94b$export$isVirtualClick(event) {
  // JAWS/NVDA with Firefox.
  if (event.mozInputSource === 0 && event.isTrusted) {
    return true;
  }

  return event.detail === 0 && !event.pointerType;
}

const $a3ff51240de6f955c79cf17a88e349$export$PressResponderContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);

$a3ff51240de6f955c79cf17a88e349$export$PressResponderContext.displayName = 'PressResponderContext';

function $ffc54430b1dbeee65879852feaaff07d$var$usePressResponderContext(props) {
  // Consume context from <PressResponder> and merge with props.
  let context = useContext($a3ff51240de6f955c79cf17a88e349$export$PressResponderContext);

  if (context) {
    let {
      register
    } = context,
        contextProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(context, ["register"]);

    props = mergeProps(contextProps, props);
    register();
  }

  useSyncRef(context, props.ref);
  return props;
}
/**
 * Handles press interactions across mouse, touch, keyboard, and screen readers.
 * It normalizes behavior across browsers and platforms, and handles many nuances
 * of dealing with pointer and keyboard events.
 */


function usePress(props) {
  let _usePressResponderCon = $ffc54430b1dbeee65879852feaaff07d$var$usePressResponderContext(props),
      {
    onPress,
    onPressChange,
    onPressStart,
    onPressEnd,
    onPressUp,
    isDisabled,
    isPressed: isPressedProp,
    preventFocusOnPress,
    shouldCancelOnPointerExit,
    allowTextSelectionOnPress
  } = _usePressResponderCon,
      domProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(_usePressResponderCon, ["onPress", "onPressChange", "onPressStart", "onPressEnd", "onPressUp", "isDisabled", "isPressed", "preventFocusOnPress", "shouldCancelOnPointerExit", "allowTextSelectionOnPress", "ref"]);

  let propsRef = useRef(null);
  propsRef.current = {
    onPress,
    onPressChange,
    onPressStart,
    onPressEnd,
    onPressUp,
    isDisabled,
    shouldCancelOnPointerExit
  };
  let [isPressed, setPressed] = useState(false);
  let ref = useRef({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    ignoreClickAfterPress: false,
    didFirePressStart: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null
  });
  let {
    addGlobalListener,
    removeAllGlobalListeners
  } = useGlobalListeners();
  let pressProps = useMemo(() => {
    let state = ref.current;

    let triggerPressStart = (originalEvent, pointerType) => {
      let {
        onPressStart,
        onPressChange,
        isDisabled
      } = propsRef.current;

      if (isDisabled || state.didFirePressStart) {
        return;
      }

      if (onPressStart) {
        onPressStart({
          type: 'pressstart',
          pointerType,
          target: originalEvent.currentTarget,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }

      if (onPressChange) {
        onPressChange(true);
      }

      state.didFirePressStart = true;
      setPressed(true);
    };

    let triggerPressEnd = function triggerPressEnd(originalEvent, pointerType, wasPressed) {
      if (wasPressed === void 0) {
        wasPressed = true;
      }

      let {
        onPressEnd,
        onPressChange,
        onPress,
        isDisabled
      } = propsRef.current;

      if (!state.didFirePressStart) {
        return;
      }

      state.ignoreClickAfterPress = true;
      state.didFirePressStart = false;

      if (onPressEnd) {
        onPressEnd({
          type: 'pressend',
          pointerType,
          target: originalEvent.currentTarget,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }

      if (onPressChange) {
        onPressChange(false);
      }

      setPressed(false);

      if (onPress && wasPressed && !isDisabled) {
        onPress({
          type: 'press',
          pointerType,
          target: originalEvent.currentTarget,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }
    };

    let triggerPressUp = (originalEvent, pointerType) => {
      let {
        onPressUp,
        isDisabled
      } = propsRef.current;

      if (isDisabled) {
        return;
      }

      if (onPressUp) {
        onPressUp({
          type: 'pressup',
          pointerType,
          target: originalEvent.currentTarget,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }
    };

    let cancel = e => {
      if (state.isPressed) {
        if (state.isOverTarget) {
          triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), state.pointerType, false);
        }

        state.isPressed = false;
        state.isOverTarget = false;
        state.activePointerId = null;
        state.pointerType = null;
        removeAllGlobalListeners();

        if (!allowTextSelectionOnPress) {
          $e17c9db826984f8ab8e5d837bf0b8$export$restoreTextSelection(state.target);
        }
      }
    };

    let pressProps = {
      onKeyDown(e) {
        if ($ffc54430b1dbeee65879852feaaff07d$var$isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target)) {
          e.preventDefault();
          e.stopPropagation(); // If the event is repeating, it may have started on a different element
          // after which focus moved to the current element. Ignore these events and
          // only handle the first key down event.

          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            triggerPressStart(e, 'keyboard'); // Focus may move before the key up event, so register the event on the document
            // instead of the same element where the key down event occurred.

            addGlobalListener(document, 'keyup', onKeyUp, false);
          }
        }
      },

      onKeyUp(e) {
        if ($ffc54430b1dbeee65879852feaaff07d$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target)) {
          triggerPressUp($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), 'keyboard');
        }
      },

      onClick(e) {
        if (e && !e.currentTarget.contains(e.target)) {
          return;
        }

        if (e && e.button === 0) {
          e.stopPropagation();

          if (isDisabled) {
            e.preventDefault();
          } // If triggered from a screen reader or by using element.click(),
          // trigger as if it were a keyboard click.


          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $f67ef9f1b8ed09b4b00fd0840cd8b94b$export$isVirtualClick(e.nativeEvent))) {
            // Ensure the element receives focus (VoiceOver on iOS does not do this)
            if (!isDisabled && !preventFocusOnPress) {
              focusWithoutScrolling(e.currentTarget);
            }

            triggerPressStart(e, 'virtual');
            triggerPressUp(e, 'virtual');
            triggerPressEnd(e, 'virtual');
          }

          state.ignoreEmulatedMouseEvents = false;
          state.ignoreClickAfterPress = false;
        }
      }

    };

    let onKeyUp = e => {
      if (state.isPressed && $ffc54430b1dbeee65879852feaaff07d$var$isValidKeyboardEvent(e)) {
        e.preventDefault();
        e.stopPropagation();
        state.isPressed = false;
        let target = e.target;
        triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));
        removeAllGlobalListeners(); // If the target is a link, trigger the click method to open the URL,
        // but defer triggering pressEnd until onClick event handler.

        if (state.target.contains(target) && $ffc54430b1dbeee65879852feaaff07d$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') {
          state.target.click();
        }
      }
    };

    if (typeof PointerEvent !== 'undefined') {
      pressProps.onPointerDown = e => {
        // Only handle left clicks, and ignore events that bubbled through portals.
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) {
          return;
        } // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.
        // Ignore and let the onClick handler take care of it instead.
        // https://bugs.webkit.org/show_bug.cgi?id=222627
        // https://bugs.webkit.org/show_bug.cgi?id=223202


        if ($ffc54430b1dbeee65879852feaaff07d$var$isVirtualPointerEvent(e.nativeEvent)) {
          state.pointerType = 'virtual';
          return;
        } // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on pointer down and handle focusing the pressable element ourselves.


        if ($ffc54430b1dbeee65879852feaaff07d$var$shouldPreventDefault(e.target)) {
          e.preventDefault();
        }

        state.pointerType = e.pointerType;
        e.stopPropagation();

        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;

          if (!isDisabled && !preventFocusOnPress) {
            focusWithoutScrolling(e.currentTarget);
          }

          if (!allowTextSelectionOnPress) {
            $e17c9db826984f8ab8e5d837bf0b8$export$disableTextSelection(state.target);
          }

          triggerPressStart(e, state.pointerType);
          addGlobalListener(document, 'pointermove', onPointerMove, false);
          addGlobalListener(document, 'pointerup', onPointerUp, false);
          addGlobalListener(document, 'pointercancel', onPointerCancel, false);
        }
      };

      pressProps.onMouseDown = e => {
        if (!e.currentTarget.contains(e.target)) {
          return;
        }

        if (e.button === 0) {
          // Chrome and Firefox on touch Windows devices require mouse down events
          // to be canceled in addition to pointer events, or an extra asynchronous
          // focus event will be fired.
          if ($ffc54430b1dbeee65879852feaaff07d$var$shouldPreventDefault(e.target)) {
            e.preventDefault();
          }

          e.stopPropagation();
        }
      };

      pressProps.onPointerUp = e => {
        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.
        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') {
          return;
        } // Only handle left clicks
        // Safari on iOS sometimes fires pointerup events, even
        // when the touch isn't over the target, so double check.


        if (e.button === 0 && $ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(e, e.currentTarget)) {
          triggerPressUp(e, state.pointerType || e.pointerType);
        }
      }; // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.
      // Use pointer move events instead to implement our own hit testing.
      // See https://bugs.webkit.org/show_bug.cgi?id=199803


      let onPointerMove = e => {
        if (e.pointerId !== state.activePointerId) {
          return;
        }

        if ($ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(e, state.target)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), state.pointerType, false);

          if (propsRef.current.shouldCancelOnPointerExit) {
            cancel(e);
          }
        }
      };

      let onPointerUp = e => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
          if ($ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(e, state.target)) {
            triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), state.pointerType);
          } else if (state.isOverTarget) {
            triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), state.pointerType, false);
          }

          state.isPressed = false;
          state.isOverTarget = false;
          state.activePointerId = null;
          state.pointerType = null;
          removeAllGlobalListeners();

          if (!allowTextSelectionOnPress) {
            $e17c9db826984f8ab8e5d837bf0b8$export$restoreTextSelection(state.target);
          }
        }
      };

      let onPointerCancel = e => {
        cancel(e);
      };

      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) {
          return;
        } // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.


        cancel(e);
      };
    } else {
      pressProps.onMouseDown = e => {
        // Only handle left clicks
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) {
          return;
        } // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on mouse down and handle focusing the pressable element ourselves.


        if ($ffc54430b1dbeee65879852feaaff07d$var$shouldPreventDefault(e.target)) {
          e.preventDefault();
        }

        e.stopPropagation();

        if (state.ignoreEmulatedMouseEvents) {
          return;
        }

        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = $f67ef9f1b8ed09b4b00fd0840cd8b94b$export$isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';

        if (!isDisabled && !preventFocusOnPress) {
          focusWithoutScrolling(e.currentTarget);
        }

        triggerPressStart(e, state.pointerType);
        addGlobalListener(document, 'mouseup', onMouseUp, false);
      };

      pressProps.onMouseEnter = e => {
        if (!e.currentTarget.contains(e.target)) {
          return;
        }

        e.stopPropagation();

        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = true;
          triggerPressStart(e, state.pointerType);
        }
      };

      pressProps.onMouseLeave = e => {
        if (!e.currentTarget.contains(e.target)) {
          return;
        }

        e.stopPropagation();

        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);

          if (propsRef.current.shouldCancelOnPointerExit) {
            cancel(e);
          }
        }
      };

      pressProps.onMouseUp = e => {
        if (!e.currentTarget.contains(e.target)) {
          return;
        }

        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {
          triggerPressUp(e, state.pointerType);
        }
      };

      let onMouseUp = e => {
        // Only handle left clicks
        if (e.button !== 0) {
          return;
        }

        state.isPressed = false;
        removeAllGlobalListeners();

        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }

        if ($ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(e, state.target)) {
          triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), state.pointerType);
        } else if (state.isOverTarget) {
          triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), state.pointerType, false);
        }

        state.isOverTarget = false;
      };

      pressProps.onTouchStart = e => {
        if (!e.currentTarget.contains(e.target)) {
          return;
        }

        e.stopPropagation();
        let touch = $ffc54430b1dbeee65879852feaaff07d$var$getTouchFromEvent(e.nativeEvent);

        if (!touch) {
          return;
        }

        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = 'touch'; // Due to browser inconsistencies, especially on mobile browsers, we prevent default
        // on the emulated mouse event and handle focusing the pressable element ourselves.

        if (!isDisabled && !preventFocusOnPress) {
          focusWithoutScrolling(e.currentTarget);
        }

        if (!allowTextSelectionOnPress) {
          $e17c9db826984f8ab8e5d837bf0b8$export$disableTextSelection(state.target);
        }

        triggerPressStart(e, state.pointerType);
        addGlobalListener(window, 'scroll', onScroll, true);
      };

      pressProps.onTouchMove = e => {
        if (!e.currentTarget.contains(e.target)) {
          return;
        }

        e.stopPropagation();

        if (!state.isPressed) {
          return;
        }

        let touch = $ffc54430b1dbeee65879852feaaff07d$var$getTouchById(e.nativeEvent, state.activePointerId);

        if (touch && $ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(e, state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);

          if (propsRef.current.shouldCancelOnPointerExit) {
            cancel(e);
          }
        }
      };

      pressProps.onTouchEnd = e => {
        if (!e.currentTarget.contains(e.target)) {
          return;
        }

        e.stopPropagation();

        if (!state.isPressed) {
          return;
        }

        let touch = $ffc54430b1dbeee65879852feaaff07d$var$getTouchById(e.nativeEvent, state.activePointerId);

        if (touch && $ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(touch, e.currentTarget)) {
          triggerPressUp(e, state.pointerType);
          triggerPressEnd(e, state.pointerType);
        } else if (state.isOverTarget) {
          triggerPressEnd(e, state.pointerType, false);
        }

        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;

        if (!allowTextSelectionOnPress) {
          $e17c9db826984f8ab8e5d837bf0b8$export$restoreTextSelection(state.target);
        }

        removeAllGlobalListeners();
      };

      pressProps.onTouchCancel = e => {
        if (!e.currentTarget.contains(e.target)) {
          return;
        }

        e.stopPropagation();

        if (state.isPressed) {
          cancel(e);
        }
      };

      let onScroll = e => {
        if (state.isPressed && e.target.contains(state.target)) {
          cancel({
            currentTarget: state.target,
            shiftKey: false,
            ctrlKey: false,
            metaKey: false,
            altKey: false
          });
        }
      };

      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) {
          return;
        }

        cancel(e);
      };
    }

    return pressProps;
  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]); // Remove user-select: none in case component unmounts immediately after pressStart
  // eslint-disable-next-line arrow-body-style

  useEffect(() => {
    return () => {
      if (!allowTextSelectionOnPress) {
        $e17c9db826984f8ab8e5d837bf0b8$export$restoreTextSelection(ref.current.target);
      }
    };
  }, [allowTextSelectionOnPress]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: mergeProps(domProps, pressProps)
  };
}

function $ffc54430b1dbeee65879852feaaff07d$var$isHTMLAnchorLink(target) {
  return target.tagName === 'A' && target.hasAttribute('href');
}

function $ffc54430b1dbeee65879852feaaff07d$var$isValidKeyboardEvent(event) {
  const {
    key,
    code,
    target
  } = event;
  const element = target;
  const {
    tagName,
    isContentEditable
  } = element;
  const role = element.getAttribute('role'); // Accessibility for keyboards. Space and Enter only.
  // "Spacebar" is for IE 11

  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true && ( // A link with a valid href should be handled natively,
  // unless it also has role='button' and was triggered using Space.
  !$ffc54430b1dbeee65879852feaaff07d$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key
  !(role === 'link' && key !== 'Enter');
}

function $ffc54430b1dbeee65879852feaaff07d$var$getTouchFromEvent(event) {
  const {
    targetTouches
  } = event;

  if (targetTouches.length > 0) {
    return targetTouches[0];
  }

  return null;
}

function $ffc54430b1dbeee65879852feaaff07d$var$getTouchById(event, pointerId) {
  const changedTouches = event.changedTouches;

  for (let i = 0; i < changedTouches.length; i++) {
    const touch = changedTouches[i];

    if (touch.identifier === pointerId) {
      return touch;
    }
  }

  return null;
}

function $ffc54430b1dbeee65879852feaaff07d$var$createEvent(target, e) {
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey
  };
}

function $ffc54430b1dbeee65879852feaaff07d$var$getPointClientRect(point) {
  let offsetX = point.width / 2 || point.radiusX || 0;
  let offsetY = point.height / 2 || point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}

function $ffc54430b1dbeee65879852feaaff07d$var$areRectanglesOverlapping(a, b) {
  // check if they cannot overlap on x axis
  if (a.left > b.right || b.left > a.right) {
    return false;
  } // check if they cannot overlap on y axis


  if (a.top > b.bottom || b.top > a.bottom) {
    return false;
  }

  return true;
}

function $ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect();
  let pointRect = $ffc54430b1dbeee65879852feaaff07d$var$getPointClientRect(point);
  return $ffc54430b1dbeee65879852feaaff07d$var$areRectanglesOverlapping(rect, pointRect);
}

function $ffc54430b1dbeee65879852feaaff07d$var$shouldPreventDefault(target) {
  // We cannot prevent default if the target is inside a draggable element.
  return !target.closest('[draggable="true"]');
}

function $ffc54430b1dbeee65879852feaaff07d$var$isVirtualPointerEvent(event) {
  // If the pointer size is zero, then we assume it's from a screen reader.
  // Android TalkBack double tap will sometimes return a event with width and height of 1
  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
  // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0;
}

const Pressable = /*#__PURE__*/(/* unused pure expression or super */ null && (_react.forwardRef((_ref, ref) => {
  var _ref2;

  let {
    children
  } = _ref,
      props = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(_ref, ["children"]);

  let newRef = useRef();
  ref = (_ref2 = ref) != null ? _ref2 : newRef;
  let {
    pressProps
  } = usePress(_babelRuntimeHelpersEsmExtends({}, props, {
    ref
  }));

  let child = _react.Children.only(children);

  return /*#__PURE__*/_react.cloneElement(child, // @ts-ignore
  _babelRuntimeHelpersEsmExtends({
    ref
  }, mergeProps(child.props, pressProps)));
})));
const PressResponder = /*#__PURE__*/(/* unused pure expression or super */ null && (_react.forwardRef((_ref, ref) => {
  let {
    children
  } = _ref,
      props = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(_ref, ["children"]);

  let isRegistered = useRef(false);
  let prevContext = useContext($a3ff51240de6f955c79cf17a88e349$export$PressResponderContext);
  let context = mergeProps(prevContext || {}, _babelRuntimeHelpersEsmExtends({}, props, {
    ref: ref || (prevContext == null ? void 0 : prevContext.ref),

    register() {
      isRegistered.current = true;

      if (prevContext) {
        prevContext.register();
      }
    }

  }));
  useSyncRef(prevContext, ref);
  useEffect(() => {
    if (!isRegistered.current) {
      console.warn('A PressResponder was rendered without a pressable child. ' + 'Either call the usePress hook, or wrap your DOM node with <Pressable> component.');
    }
  }, []);
  return /*#__PURE__*/_react.createElement($a3ff51240de6f955c79cf17a88e349$export$PressResponderContext.Provider, {
    value: context
  }, children);
}))); // NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

/**
 * Handles focus events for the immediate target.
 * Focus events on child elements will be ignored.
 */

function module_useFocus(props) {
  if (props.isDisabled) {
    return {
      focusProps: {}
    };
  }

  let onFocus, onBlur;

  if (props.onFocus || props.onFocusChange) {
    onFocus = e => {
      if (e.target === e.currentTarget) {
        if (props.onFocus) {
          props.onFocus(e);
        }

        if (props.onFocusChange) {
          props.onFocusChange(true);
        }
      }
    };
  }

  if (props.onBlur || props.onFocusChange) {
    onBlur = e => {
      if (e.target === e.currentTarget) {
        if (props.onBlur) {
          props.onBlur(e);
        }

        if (props.onFocusChange) {
          props.onFocusChange(false);
        }
      }
    };
  }

  return {
    focusProps: {
      onFocus,
      onBlur
    }
  };
}
let $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = null;
let $d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers = new Set();
let $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasSetupGlobalListeners = false;
let $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = false;
let $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasBlurredWindowRecently = false; // Only Tab or Esc keys will make focus visible on text input elements

const $d01f69bb2ab5f70dfd0005370a2a2cbc$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};

function $d01f69bb2ab5f70dfd0005370a2a2cbc$var$triggerChangeHandlers(modality, e) {
  for (let handler of $d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers) {
    handler(modality, e);
  }
}
/**
 * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
 */


function $d01f69bb2ab5f70dfd0005370a2a2cbc$var$isValidKey(e) {
  // Control and Shift keys trigger when navigating back to the tab with keyboard.
  return !(e.metaKey || !module_isMac() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');
}

function $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleKeyboardEvent(e) {
  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = true;

  if ($d01f69bb2ab5f70dfd0005370a2a2cbc$var$isValidKey(e)) {
    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = 'keyboard';
    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$triggerChangeHandlers('keyboard', e);
  }
}

function $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent(e) {
  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = 'pointer';

  if (e.type === 'mousedown' || e.type === 'pointerdown') {
    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = true;
    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$triggerChangeHandlers('pointer', e);
  }
}

function $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleClickEvent(e) {
  if ($f67ef9f1b8ed09b4b00fd0840cd8b94b$export$isVirtualClick(e)) {
    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = true;
    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = 'virtual';
  }
}

function $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleFocusEvent(e) {
  // Firefox fires two extra focus events when the user first clicks into an iframe:
  // first on the window, then on the document. We ignore these events so they don't
  // cause keyboard focus rings to appear.
  if (e.target === window || e.target === document) {
    return;
  } // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.


  if (!$d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus && !$d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasBlurredWindowRecently) {
    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = 'virtual';
    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$triggerChangeHandlers('virtual', e);
  }

  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = false;
  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasBlurredWindowRecently = false;
}

function $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleWindowBlur() {
  // When the window is blurred, reset state. This is necessary when tabbing out of the window,
  // for example, since a subsequent focus event won't be fired.
  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = false;
  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasBlurredWindowRecently = true;
}
/**
 * Setup global event listeners to control when keyboard focus style should be visible.
 */


function $d01f69bb2ab5f70dfd0005370a2a2cbc$var$setupGlobalFocusEvents() {
  if (typeof window === 'undefined' || $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasSetupGlobalListeners) {
    return;
  } // Programmatic focus() calls shouldn't affect the current input modality.
  // However, we need to detect other cases when a focus event occurs without
  // a preceding user event (e.g. screen reader focus). Overriding the focus
  // method on HTMLElement.prototype is a bit hacky, but works.


  let focus = HTMLElement.prototype.focus;

  HTMLElement.prototype.focus = function () {
    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };

  document.addEventListener('keydown', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleKeyboardEvent, true);
  document.addEventListener('keyup', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleKeyboardEvent, true);
  document.addEventListener('click', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleClickEvent, true); // Register focus events on the window so they are sure to happen
  // before React's event listeners (registered on the document).

  window.addEventListener('focus', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleFocusEvent, true);
  window.addEventListener('blur', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleWindowBlur, false);

  if (typeof PointerEvent !== 'undefined') {
    document.addEventListener('pointerdown', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);
    document.addEventListener('pointermove', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);
    document.addEventListener('pointerup', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);
  } else {
    document.addEventListener('mousedown', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);
    document.addEventListener('mousemove', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);
    document.addEventListener('mouseup', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);
  }

  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasSetupGlobalListeners = true;
}

if (typeof document !== 'undefined') {
  if (document.readyState !== 'loading') {
    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$setupGlobalFocusEvents();
  } else {
    document.addEventListener('DOMContentLoaded', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$setupGlobalFocusEvents);
  }
}
/**
 * If true, keyboard focus is visible.
 */


function isFocusVisible() {
  return $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality !== 'pointer';
}
function module_getInteractionModality() {
  return $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality;
}
function setInteractionModality(modality) {
  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = modality;
  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$triggerChangeHandlers(modality, null);
}
/**
 * Keeps state of the current modality.
 */

function useInteractionModality() {
  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$setupGlobalFocusEvents();
  let [modality, setModality] = useState($d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality);
  useEffect(() => {
    let handler = () => {
      setModality($d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality);
    };

    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers.add(handler);
    return () => {
      $d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers.delete(handler);
    };
  }, []);
  return modality;
}
/**
 * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that
 * focus visible style can be properly set.
 */

function $d01f69bb2ab5f70dfd0005370a2a2cbc$var$isKeyboardFocusEvent(isTextInput, modality, e) {
  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$d01f69bb2ab5f70dfd0005370a2a2cbc$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}
/**
 * Manages focus visible state for the page, and subscribes individual components for updates.
 */


function useFocusVisible(props) {
  if (props === void 0) {
    props = {};
  }

  let {
    isTextInput,
    autoFocus
  } = props;
  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());
  useFocusVisibleListener(isFocusVisible => {
    setFocusVisible(isFocusVisible);
  }, [isTextInput], {
    isTextInput
  });
  return {
    isFocusVisible: isFocusVisibleState
  };
}
/**
 * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).
 */

function useFocusVisibleListener(fn, deps, opts) {
  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$setupGlobalFocusEvents();
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let handler = (modality, e) => {
      if (!$d01f69bb2ab5f70dfd0005370a2a2cbc$var$isKeyboardFocusEvent(opts == null ? void 0 : opts.isTextInput, modality, e)) {
        return;
      }

      fn(isFocusVisible());
    };

    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers.add(handler);
    return () => $d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers.delete(handler);
  }, deps);
}
/**
 * Handles focus events for the target and its descendants.
 */

function useFocusWithin(props) {
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocusWithin: false
  }).current;

  if (props.isDisabled) {
    return {
      focusWithinProps: {}
    };
  }

  let onFocus = e => {
    if (!state.isFocusWithin) {
      if (props.onFocusWithin) {
        props.onFocusWithin(e);
      }

      if (props.onFocusWithinChange) {
        props.onFocusWithinChange(true);
      }

      state.isFocusWithin = true;
    }
  };

  let onBlur = e => {
    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again
    // when moving focus inside the element. Only trigger if the currentTarget doesn't
    // include the relatedTarget (where focus is moving).
    if (state.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
      if (props.onBlurWithin) {
        props.onBlurWithin(e);
      }

      if (props.onFocusWithinChange) {
        props.onFocusWithinChange(false);
      }

      state.isFocusWithin = false;
    }
  };

  return {
    focusWithinProps: {
      onFocus: onFocus,
      onBlur: onBlur
    }
  };
} // iOS fires onPointerEnter twice: once with pointerType="touch" and again with pointerType="mouse".
// We want to ignore these emulated events so they do not trigger hover behavior.
// See https://bugs.webkit.org/show_bug.cgi?id=214609.

let $b1a784c66b81d90efa4f74e05b$var$globalIgnoreEmulatedMouseEvents = false;
let $b1a784c66b81d90efa4f74e05b$var$hoverCount = 0;

function $b1a784c66b81d90efa4f74e05b$var$setGlobalIgnoreEmulatedMouseEvents() {
  $b1a784c66b81d90efa4f74e05b$var$globalIgnoreEmulatedMouseEvents = true; // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
  // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
  // the distant future because a user previously touched the element.

  setTimeout(() => {
    $b1a784c66b81d90efa4f74e05b$var$globalIgnoreEmulatedMouseEvents = false;
  }, 50);
}

function $b1a784c66b81d90efa4f74e05b$var$handleGlobalPointerEvent(e) {
  if (e.pointerType === 'touch') {
    $b1a784c66b81d90efa4f74e05b$var$setGlobalIgnoreEmulatedMouseEvents();
  }
}

function $b1a784c66b81d90efa4f74e05b$var$setupGlobalTouchEvents() {
  if (typeof document === 'undefined') {
    return;
  }

  if (typeof PointerEvent !== 'undefined') {
    document.addEventListener('pointerup', $b1a784c66b81d90efa4f74e05b$var$handleGlobalPointerEvent);
  } else {
    document.addEventListener('touchend', $b1a784c66b81d90efa4f74e05b$var$setGlobalIgnoreEmulatedMouseEvents);
  }

  $b1a784c66b81d90efa4f74e05b$var$hoverCount++;
  return () => {
    $b1a784c66b81d90efa4f74e05b$var$hoverCount--;

    if ($b1a784c66b81d90efa4f74e05b$var$hoverCount > 0) {
      return;
    }

    if (typeof PointerEvent !== 'undefined') {
      document.removeEventListener('pointerup', $b1a784c66b81d90efa4f74e05b$var$handleGlobalPointerEvent);
    } else {
      document.removeEventListener('touchend', $b1a784c66b81d90efa4f74e05b$var$setGlobalIgnoreEmulatedMouseEvents);
    }
  };
}
/**
 * Handles pointer hover interactions for an element. Normalizes behavior
 * across browsers and platforms, and ignores emulated mouse events on touch devices.
 */


function useHover(props) {
  let {
    onHoverStart,
    onHoverChange,
    onHoverEnd,
    isDisabled
  } = props;
  let [isHovered, setHovered] = useState(false);
  let state = useRef({
    isHovered: false,
    ignoreEmulatedMouseEvents: false,
    pointerType: '',
    target: null
  }).current;
  useEffect($b1a784c66b81d90efa4f74e05b$var$setupGlobalTouchEvents, []);
  let {
    hoverProps,
    triggerHoverEnd
  } = useMemo(() => {
    let triggerHoverStart = (event, pointerType) => {
      state.pointerType = pointerType;

      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {
        return;
      }

      state.isHovered = true;
      let target = event.currentTarget;
      state.target = target;

      if (onHoverStart) {
        onHoverStart({
          type: 'hoverstart',
          target,
          pointerType
        });
      }

      if (onHoverChange) {
        onHoverChange(true);
      }

      setHovered(true);
    };

    let triggerHoverEnd = (event, pointerType) => {
      state.pointerType = '';
      state.target = null;

      if (pointerType === 'touch' || !state.isHovered) {
        return;
      }

      state.isHovered = false;
      let target = event.currentTarget;

      if (onHoverEnd) {
        onHoverEnd({
          type: 'hoverend',
          target,
          pointerType
        });
      }

      if (onHoverChange) {
        onHoverChange(false);
      }

      setHovered(false);
    };

    let hoverProps = {};

    if (typeof PointerEvent !== 'undefined') {
      hoverProps.onPointerEnter = e => {
        if ($b1a784c66b81d90efa4f74e05b$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {
          return;
        }

        triggerHoverStart(e, e.pointerType);
      };

      hoverProps.onPointerLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) {
          triggerHoverEnd(e, e.pointerType);
        }
      };
    } else {
      hoverProps.onTouchStart = () => {
        state.ignoreEmulatedMouseEvents = true;
      };

      hoverProps.onMouseEnter = e => {
        if (!state.ignoreEmulatedMouseEvents && !$b1a784c66b81d90efa4f74e05b$var$globalIgnoreEmulatedMouseEvents) {
          triggerHoverStart(e, 'mouse');
        }

        state.ignoreEmulatedMouseEvents = false;
      };

      hoverProps.onMouseLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) {
          triggerHoverEnd(e, 'mouse');
        }
      };
    }

    return {
      hoverProps,
      triggerHoverEnd
    };
  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);
  useEffect(() => {
    // Call the triggerHoverEnd as soon as isDisabled changes to true
    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering
    if (isDisabled) {
      triggerHoverEnd({
        currentTarget: state.target
      }, state.pointerType);
    }
  }, [isDisabled]);
  return {
    hoverProps,
    isHovered
  };
}
/**
 * Example, used in components like Dialogs and Popovers so they can close
 * when a user clicks outside them.
 */

function useInteractOutside(props) {
  let {
    ref,
    onInteractOutside,
    isDisabled,
    onInteractOutsideStart
  } = props;
  let stateRef = useRef({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false,
    onInteractOutside,
    onInteractOutsideStart
  });
  let state = stateRef.current;
  state.onInteractOutside = onInteractOutside;
  state.onInteractOutsideStart = onInteractOutsideStart;
  useEffect(() => {
    if (isDisabled) {
      return;
    }

    let onPointerDown = e => {
      if ($e415bb64ab27cb8fbfac2f417412022f$var$isValidEvent(e, ref) && state.onInteractOutside) {
        if (state.onInteractOutsideStart) {
          state.onInteractOutsideStart(e);
        }

        state.isPointerDown = true;
      }
    }; // Use pointer events if available. Otherwise, fall back to mouse and touch events.


    if (typeof PointerEvent !== 'undefined') {
      let onPointerUp = e => {
        if (state.isPointerDown && state.onInteractOutside && $e415bb64ab27cb8fbfac2f417412022f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      }; // changing these to capture phase fixed combobox


      document.addEventListener('pointerdown', onPointerDown, true);
      document.addEventListener('pointerup', onPointerUp, true);
      return () => {
        document.removeEventListener('pointerdown', onPointerDown, true);
        document.removeEventListener('pointerup', onPointerUp, true);
      };
    } else {
      let onMouseUp = e => {
        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
        } else if (state.isPointerDown && state.onInteractOutside && $e415bb64ab27cb8fbfac2f417412022f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };

      let onTouchEnd = e => {
        state.ignoreEmulatedMouseEvents = true;

        if (state.onInteractOutside && state.isPointerDown && $e415bb64ab27cb8fbfac2f417412022f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };

      document.addEventListener('mousedown', onPointerDown, true);
      document.addEventListener('mouseup', onMouseUp, true);
      document.addEventListener('touchstart', onPointerDown, true);
      document.addEventListener('touchend', onTouchEnd, true);
      return () => {
        document.removeEventListener('mousedown', onPointerDown, true);
        document.removeEventListener('mouseup', onMouseUp, true);
        document.removeEventListener('touchstart', onPointerDown, true);
        document.removeEventListener('touchend', onTouchEnd, true);
      };
    }
  }, [ref, state, isDisabled]);
}

function $e415bb64ab27cb8fbfac2f417412022f$var$isValidEvent(event, ref) {
  if (event.button > 0) {
    return false;
  } // if the event target is no longer in the document


  if (event.target) {
    const ownerDocument = event.target.ownerDocument;

    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {
      return false;
    }
  }

  return ref.current && !ref.current.contains(event.target);
}
/**
 * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.
 */


function $dc0d75166de722fbf58eb6c3552$export$createEventHandler(handler) {
  if (!handler) {
    return;
  }

  let shouldStopPropagation = true;
  return e => {
    let event = _babelRuntimeHelpersEsmExtends({}, e, {
      preventDefault() {
        e.preventDefault();
      },

      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },

      stopPropagation() {
        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');
      },

      continuePropagation() {
        shouldStopPropagation = false;
      }

    });

    handler(event);

    if (shouldStopPropagation) {
      e.stopPropagation();
    }
  };
}
/**
 * Handles keyboard interactions for a focusable element.
 */


function module_useKeyboard(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: $dc0d75166de722fbf58eb6c3552$export$createEventHandler(props.onKeyDown),
      onKeyUp: $dc0d75166de722fbf58eb6c3552$export$createEventHandler(props.onKeyUp)
    }
  };
}
/**
 * Handles move interactions across mouse, touch, and keyboard, including dragging with
 * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and
 * platforms, and ignores emulated mouse events on touch devices.
 */

function useMove(props) {
  let {
    onMoveStart,
    onMove,
    onMoveEnd
  } = props;
  let state = useRef({
    didMove: false,
    lastPosition: null,
    id: null
  });
  let {
    addGlobalListener,
    removeGlobalListener
  } = useGlobalListeners();
  let moveProps = useMemo(() => {
    let moveProps = {};

    let start = () => {
      $e17c9db826984f8ab8e5d837bf0b8$export$disableTextSelection();
      state.current.didMove = false;
    };

    let move = (pointerType, deltaX, deltaY) => {
      if (deltaX === 0 && deltaY === 0) {
        return;
      }

      if (!state.current.didMove) {
        state.current.didMove = true;
        onMoveStart == null ? void 0 : onMoveStart({
          type: 'movestart',
          pointerType
        });
      }

      onMove({
        type: 'move',
        pointerType,
        deltaX: deltaX,
        deltaY: deltaY
      });
    };

    let end = pointerType => {
      $e17c9db826984f8ab8e5d837bf0b8$export$restoreTextSelection();

      if (state.current.didMove) {
        onMoveEnd == null ? void 0 : onMoveEnd({
          type: 'moveend',
          pointerType
        });
      }
    };

    if (typeof PointerEvent === 'undefined') {
      let onMouseMove = e => {
        if (e.button === 0) {
          move('mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };

      let onMouseUp = e => {
        if (e.button === 0) {
          end('mouse');
          removeGlobalListener(window, 'mousemove', onMouseMove, false);
          removeGlobalListener(window, 'mouseup', onMouseUp, false);
        }
      };

      moveProps.onMouseDown = e => {
        if (e.button === 0) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          addGlobalListener(window, 'mousemove', onMouseMove, false);
          addGlobalListener(window, 'mouseup', onMouseUp, false);
        }
      };

      let onTouchMove = e => {
        // @ts-ignore
        let touch = [...e.changedTouches].findIndex(_ref => {
          let {
            identifier
          } = _ref;
          return identifier === state.current.id;
        });

        if (touch >= 0) {
          let {
            pageX,
            pageY
          } = e.changedTouches[touch];
          move('touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX,
            pageY
          };
        }
      };

      let onTouchEnd = e => {
        // @ts-ignore
        let touch = [...e.changedTouches].findIndex(_ref2 => {
          let {
            identifier
          } = _ref2;
          return identifier === state.current.id;
        });

        if (touch >= 0) {
          end('touch');
          state.current.id = null;
          removeGlobalListener(window, 'touchmove', onTouchMove);
          removeGlobalListener(window, 'touchend', onTouchEnd);
          removeGlobalListener(window, 'touchcancel', onTouchEnd);
        }
      };

      moveProps.onTouchStart = e => {
        if (e.changedTouches.length === 0 || state.current.id != null) {
          return;
        }

        let {
          pageX,
          pageY,
          identifier
        } = e.changedTouches[0];
        start();
        e.stopPropagation();
        e.preventDefault();
        state.current.lastPosition = {
          pageX,
          pageY
        };
        state.current.id = identifier;
        addGlobalListener(window, 'touchmove', onTouchMove, false);
        addGlobalListener(window, 'touchend', onTouchEnd, false);
        addGlobalListener(window, 'touchcancel', onTouchEnd, false);
      };
    } else {
      let onPointerMove = e => {
        if (e.pointerId === state.current.id) {
          // @ts-ignore
          let pointerType = e.pointerType || 'mouse'; // Problems with PointerEvent#movementX/movementY:
          // 1. it is always 0 on macOS Safari.
          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS

          move(pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };

      let onPointerUp = e => {
        if (e.pointerId === state.current.id) {
          // @ts-ignore
          let pointerType = e.pointerType || 'mouse';
          end(pointerType);
          state.current.id = null;
          removeGlobalListener(window, 'pointermove', onPointerMove, false);
          removeGlobalListener(window, 'pointerup', onPointerUp, false);
          removeGlobalListener(window, 'pointercancel', onPointerUp, false);
        }
      };

      moveProps.onPointerDown = e => {
        if (e.button === 0 && state.current.id == null) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          state.current.id = e.pointerId;
          addGlobalListener(window, 'pointermove', onPointerMove, false);
          addGlobalListener(window, 'pointerup', onPointerUp, false);
          addGlobalListener(window, 'pointercancel', onPointerUp, false);
        }
      };
    }

    let triggerKeyboardMove = (deltaX, deltaY) => {
      start();
      move('keyboard', deltaX, deltaY);
      end('keyboard');
    };

    moveProps.onKeyDown = e => {
      switch (e.key) {
        case 'Left':
        case 'ArrowLeft':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(-1, 0);
          break;

        case 'Right':
        case 'ArrowRight':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(1, 0);
          break;

        case 'Up':
        case 'ArrowUp':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(0, -1);
          break;

        case 'Down':
        case 'ArrowDown':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(0, 1);
          break;
      }
    };

    return moveProps;
  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);
  return {
    moveProps
  };
} // scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that

function useScrollWheel(props, ref) {
  let {
    onScroll,
    isDisabled
  } = props;
  let onScrollHandler = useCallback(e => {
    // If the ctrlKey is pressed, this is a zoom event, do nothing.
    if (e.ctrlKey) {
      return;
    } // stop scrolling the page


    e.preventDefault();
    e.stopPropagation();

    if (onScroll) {
      onScroll({
        deltaX: e.deltaX,
        deltaY: e.deltaY
      });
    }
  }, [onScroll]);
  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);
}
const $cd8e0096d064b4c36af8a188dfbda75c$var$DEFAULT_THRESHOLD = 500;
/**
 * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,
 * accessibility description, and normalizes behavior across browsers and devices.
 */

function useLongPress(props) {
  let {
    isDisabled,
    onLongPressStart,
    onLongPressEnd,
    onLongPress,
    threshold = $cd8e0096d064b4c36af8a188dfbda75c$var$DEFAULT_THRESHOLD,
    accessibilityDescription
  } = props;
  const timeRef = useRef(null);
  let {
    addGlobalListener,
    removeGlobalListener
  } = useGlobalListeners();
  let {
    pressProps
  } = usePress({
    isDisabled,

    onPressStart(e) {
      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {
        if (onLongPressStart) {
          onLongPressStart(_babelRuntimeHelpersEsmExtends({}, e, {
            type: 'longpressstart'
          }));
        }

        timeRef.current = setTimeout(() => {
          // Prevent other usePress handlers from also handling this event.
          e.target.dispatchEvent(new PointerEvent('pointercancel', {
            bubbles: true
          }));

          if (onLongPress) {
            onLongPress(_babelRuntimeHelpersEsmExtends({}, e, {
              type: 'longpress'
            }));
          }

          timeRef.current = null;
        }, threshold); // Prevent context menu, which may be opened on long press on touch devices

        if (e.pointerType === 'touch') {
          let onContextMenu = e => {
            e.preventDefault();
          };

          addGlobalListener(e.target, 'contextmenu', onContextMenu, {
            once: true
          });
          addGlobalListener(window, 'pointerup', () => {
            // If no contextmenu event is fired quickly after pointerup, remove the handler
            // so future context menu events outside a long press are not prevented.
            setTimeout(() => {
              removeGlobalListener(e.target, 'contextmenu', onContextMenu);
            }, 30);
          }, {
            once: true
          });
        }
      }
    },

    onPressEnd(e) {
      if (timeRef.current) {
        clearTimeout(timeRef.current);
      }

      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {
        onLongPressEnd(_babelRuntimeHelpersEsmExtends({}, e, {
          type: 'longpressend'
        }));
      }
    }

  });
  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);
  return {
    longPressProps: mergeProps(pressProps, descriptionProps)
  };
}
;// CONCATENATED MODULE: ../../node_modules/@react-aria/focus/dist/module.js






/**
 * A utility function that focuses an element while avoiding undesired side effects such
 * as page scrolling and screen reader issues with CSS transitions.
 */

function focusSafely(element) {
  // If the user is interacting with a virtual cursor, e.g. screen reader, then
  // wait until after any animated transitions that are currently occurring on
  // the page before shifting focus. This avoids issues with VoiceOver on iOS
  // causing the page to scroll when moving focus if the element is transitioning
  // from off the screen.
  if (getInteractionModality() === 'virtual') {
    let lastFocusedElement = document.activeElement;
    runAfterTransition(() => {
      // If focus did not move and the element is still in the document, focus it.
      if (document.activeElement === lastFocusedElement && document.contains(element)) {
        focusWithoutScrolling(element);
      }
    });
  } else {
    focusWithoutScrolling(element);
  }
}
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $ee5e90cbb4a22466973155c14222fa1$var$isStyleVisible(element) {
  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {
    return false;
  }

  let {
    display,
    visibility
  } = element.style;
  let isVisible = display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse';

  if (isVisible) {
    const {
      getComputedStyle
    } = element.ownerDocument.defaultView;
    let {
      display: computedDisplay,
      visibility: computedVisibility
    } = getComputedStyle(element);
    isVisible = computedDisplay !== 'none' && computedVisibility !== 'hidden' && computedVisibility !== 'collapse';
  }

  return isVisible;
}

function $ee5e90cbb4a22466973155c14222fa1$var$isAttributeVisible(element, childElement) {
  return !element.hasAttribute('hidden') && (element.nodeName === 'DETAILS' && childElement && childElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true);
}
/**
 * Adapted from https://github.com/testing-library/jest-dom and 
 * https://github.com/vuejs/vue-test-utils-next/.
 * Licensed under the MIT License.
 * @param element - Element to evaluate for display or visibility.
 */


function $ee5e90cbb4a22466973155c14222fa1$export$isElementVisible(element, childElement) {
  return element.nodeName !== '#comment' && $ee5e90cbb4a22466973155c14222fa1$var$isStyleVisible(element) && $ee5e90cbb4a22466973155c14222fa1$var$isAttributeVisible(element, childElement) && (!element.parentElement || $ee5e90cbb4a22466973155c14222fa1$export$isElementVisible(element.parentElement, element));
}

const $c9e8f80f5bb1841844f54e4ad30b$var$FocusContext = /*#__PURE__*/(/* unused pure expression or super */ null && (_react.createContext(null)));

let $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = null;
let $c9e8f80f5bb1841844f54e4ad30b$var$scopes = new Map(); // This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:
// https://github.com/reactjs/rfcs/pull/109
// For now, it relies on the DOM tree order rather than the React tree order, and is probably
// less optimized for performance.

/**
 * A FocusScope manages focus for its descendants. It supports containing focus inside
 * the scope, restoring focus to the previously focused element on unmount, and auto
 * focusing children on mount. It also acts as a container for a programmatic focus
 * management interface that can be used to move focus forward and back in response
 * to user events.
 */

function FocusScope(props) {
  let {
    children,
    contain,
    restoreFocus,
    autoFocus
  } = props;
  let startRef = useRef();
  let endRef = useRef();
  let scopeRef = useRef([]);
  let ctx = useContext($c9e8f80f5bb1841844f54e4ad30b$var$FocusContext);
  let parentScope = ctx == null ? void 0 : ctx.scopeRef;
  useLayoutEffect(() => {
    // Find all rendered nodes between the sentinels and add them to the scope.
    let node = startRef.current.nextSibling;
    let nodes = [];

    while (node && node !== endRef.current) {
      nodes.push(node);
      node = node.nextSibling;
    }

    scopeRef.current = nodes;
  }, [children, parentScope]);
  useLayoutEffect(() => {
    $c9e8f80f5bb1841844f54e4ad30b$var$scopes.set(scopeRef, parentScope);
    return () => {
      // Restore the active scope on unmount if this scope or a descendant scope is active.
      // Parent effect cleanups run before children, so we need to check if the
      // parent scope actually still exists before restoring the active scope to it.
      if ((scopeRef === $c9e8f80f5bb1841844f54e4ad30b$var$activeScope || $c9e8f80f5bb1841844f54e4ad30b$var$isAncestorScope(scopeRef, $c9e8f80f5bb1841844f54e4ad30b$var$activeScope)) && (!parentScope || $c9e8f80f5bb1841844f54e4ad30b$var$scopes.has(parentScope))) {
        $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = parentScope;
      }

      $c9e8f80f5bb1841844f54e4ad30b$var$scopes.delete(scopeRef);
    };
  }, [scopeRef, parentScope]);
  $c9e8f80f5bb1841844f54e4ad30b$var$useFocusContainment(scopeRef, contain);
  $c9e8f80f5bb1841844f54e4ad30b$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $c9e8f80f5bb1841844f54e4ad30b$var$useAutoFocus(scopeRef, autoFocus);
  let focusManager = $c9e8f80f5bb1841844f54e4ad30b$var$createFocusManagerForScope(scopeRef);
  return /*#__PURE__*/_react.createElement($c9e8f80f5bb1841844f54e4ad30b$var$FocusContext.Provider, {
    value: {
      scopeRef,
      focusManager
    }
  }, /*#__PURE__*/_react.createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, /*#__PURE__*/_react.createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}
/**
 * Returns a FocusManager interface for the parent FocusScope.
 * A FocusManager can be used to programmatically move focus within
 * a FocusScope, e.g. in response to user events like keyboard navigation.
 */

function useFocusManager() {
  var _useContext;

  return (_useContext = useContext($c9e8f80f5bb1841844f54e4ad30b$var$FocusContext)) == null ? void 0 : _useContext.focusManager;
}

function $c9e8f80f5bb1841844f54e4ad30b$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts) {
      if (opts === void 0) {
        opts = {};
      }

      let scope = scopeRef.current;
      let {
        from,
        tabbable,
        wrap
      } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[0].previousElementSibling;
      let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {
        tabbable
      }, scope);
      walker.currentNode = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(node, scope) ? node : sentinel;
      let nextNode = walker.nextNode();

      if (!nextNode && wrap) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }

      if (nextNode) {
        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextNode, true);
      }

      return nextNode;
    },

    focusPrevious(opts) {
      if (opts === void 0) {
        opts = {};
      }

      let scope = scopeRef.current;
      let {
        from,
        tabbable,
        wrap
      } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {
        tabbable
      }, scope);
      walker.currentNode = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(node, scope) ? node : sentinel;
      let previousNode = walker.previousNode();

      if (!previousNode && wrap) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }

      if (previousNode) {
        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(previousNode, true);
      }

      return previousNode;
    },

    focusFirst(opts) {
      if (opts === void 0) {
        opts = {};
      }

      let scope = scopeRef.current;
      let {
        tabbable
      } = opts;
      let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {
        tabbable
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();

      if (nextNode) {
        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextNode, true);
      }

      return nextNode;
    },

    focusLast(opts) {
      if (opts === void 0) {
        opts = {};
      }

      let scope = scopeRef.current;
      let {
        tabbable
      } = opts;
      let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {
        tabbable
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();

      if (previousNode) {
        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(previousNode, true);
      }

      return previousNode;
    }

  };
}

const $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];
const $c9e8f80f5bb1841844f54e4ad30b$var$FOCUSABLE_ELEMENT_SELECTOR = $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';
$c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
const $c9e8f80f5bb1841844f54e4ad30b$var$TABBABLE_ELEMENT_SELECTOR = $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');

function $c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}

function $c9e8f80f5bb1841844f54e4ad30b$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = useRef();
  let raf = useRef(null);
  useLayoutEffect(() => {
    let scope = scopeRef.current;

    if (!contain) {
      return;
    } // Handle the Tab key to contain focus within the scope


    let onKeyDown = e => {
      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || scopeRef !== $c9e8f80f5bb1841844f54e4ad30b$var$activeScope) {
        return;
      }

      let focusedElement = document.activeElement;
      let scope = scopeRef.current;

      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(focusedElement, scope)) {
        return;
      }

      let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {
        tabbable: true
      }, scope);
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();

      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }

      e.preventDefault();

      if (nextElement) {
        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextElement, true);
      }
    };

    let onFocus = e => {
      // If focusing an element in a child scope of the currently active scope, the child becomes active.
      // Moving out of the active scope to an ancestor is not allowed.
      if (!$c9e8f80f5bb1841844f54e4ad30b$var$activeScope || $c9e8f80f5bb1841844f54e4ad30b$var$isAncestorScope($c9e8f80f5bb1841844f54e4ad30b$var$activeScope, scopeRef)) {
        $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;
        focusedNode.current = e.target;
      } else if (scopeRef === $c9e8f80f5bb1841844f54e4ad30b$var$activeScope && !$c9e8f80f5bb1841844f54e4ad30b$var$isElementInChildScope(e.target, scopeRef)) {
        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),
        // restore focus to the previously focused node or the first tabbable element in the active scope.
        if (focusedNode.current) {
          focusedNode.current.focus();
        } else if ($c9e8f80f5bb1841844f54e4ad30b$var$activeScope) {
          $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope($c9e8f80f5bb1841844f54e4ad30b$var$activeScope.current);
        }
      } else if (scopeRef === $c9e8f80f5bb1841844f54e4ad30b$var$activeScope) {
        focusedNode.current = e.target;
      }
    };

    let onBlur = e => {
      // Firefox doesn't shift focus back to the Dialog properly without this
      raf.current = requestAnimationFrame(() => {
        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe
        if (scopeRef === $c9e8f80f5bb1841844f54e4ad30b$var$activeScope && !$c9e8f80f5bb1841844f54e4ad30b$var$isElementInChildScope(document.activeElement, scopeRef)) {
          $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;
          focusedNode.current = e.target;
          focusedNode.current.focus();
        }
      });
    };

    document.addEventListener('keydown', onKeyDown, false);
    document.addEventListener('focusin', onFocus, false);
    scope.forEach(element => element.addEventListener('focusin', onFocus, false));
    scope.forEach(element => element.addEventListener('focusout', onBlur, false));
    return () => {
      document.removeEventListener('keydown', onKeyDown, false);
      document.removeEventListener('focusin', onFocus, false);
      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));
      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));
    };
  }, [scopeRef, contain]); // eslint-disable-next-line arrow-body-style

  useEffect(() => {
    return () => cancelAnimationFrame(raf.current);
  }, [raf]);
}

function $c9e8f80f5bb1841844f54e4ad30b$var$isElementInAnyScope(element) {
  for (let scope of $c9e8f80f5bb1841844f54e4ad30b$var$scopes.keys()) {
    if ($c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(element, scope.current)) {
      return true;
    }
  }

  return false;
}

function $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(element, scope) {
  return scope.some(node => node.contains(element));
}

function $c9e8f80f5bb1841844f54e4ad30b$var$isElementInChildScope(element, scope) {
  // node.contains in isElementInScope covers child scopes that are also DOM children,
  // but does not cover child scopes in portals.
  for (let s of $c9e8f80f5bb1841844f54e4ad30b$var$scopes.keys()) {
    if ((s === scope || $c9e8f80f5bb1841844f54e4ad30b$var$isAncestorScope(scope, s)) && $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(element, s.current)) {
      return true;
    }
  }

  return false;
}

function $c9e8f80f5bb1841844f54e4ad30b$var$isAncestorScope(ancestor, scope) {
  let parent = $c9e8f80f5bb1841844f54e4ad30b$var$scopes.get(scope);

  if (!parent) {
    return false;
  }

  if (parent === ancestor) {
    return true;
  }

  return $c9e8f80f5bb1841844f54e4ad30b$var$isAncestorScope(ancestor, parent);
}

function $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(element, scroll) {
  if (scroll === void 0) {
    scroll = false;
  }

  if (element != null && !scroll) {
    try {
      focusSafely(element);
    } catch (err) {// ignore
    }
  } else if (element != null) {
    try {
      element.focus();
    } catch (err) {// ignore
    }
  }
}

function $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope(scope) {
  let sentinel = scope[0].previousElementSibling;
  let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {
    tabbable: true
  }, scope);
  walker.currentNode = sentinel;
  $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(walker.nextNode());
}

function $c9e8f80f5bb1841844f54e4ad30b$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = _react.useRef(autoFocus);

  useEffect(() => {
    if (autoFocusRef.current) {
      $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;

      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(document.activeElement, $c9e8f80f5bb1841844f54e4ad30b$var$activeScope.current)) {
        $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope(scopeRef.current);
      }
    }

    autoFocusRef.current = false;
  }, []);
}

function $c9e8f80f5bb1841844f54e4ad30b$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.
  useLayoutEffect(() => {
    if (!restoreFocus) {
      return;
    }

    let scope = scopeRef.current;
    let nodeToRestore = document.activeElement; // Handle the Tab key so that tabbing out of the scope goes to the next element
    // after the node that had focus when the scope mounted. This is important when
    // using portals for overlays, so that focus goes to the expected element when
    // tabbing out of the overlay.

    let onKeyDown = e => {
      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {
        return;
      }

      let focusedElement = document.activeElement;

      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(focusedElement, scope)) {
        return;
      } // Create a DOM tree walker that matches all tabbable elements


      let walker = getFocusableTreeWalker(document.body, {
        tabbable: true
      }); // Find the next tabbable element after the currently focused element

      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();

      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {
        nodeToRestore = null;
      } // If there is no next element, or it is outside the current scope, move focus to the
      // next element after the node to restore to instead.


      if ((!nextElement || !$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(nextElement, scope)) && nodeToRestore) {
        walker.currentNode = nodeToRestore; // Skip over elements within the scope, in case the scope immediately follows the node to restore.

        do {
          nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
        } while ($c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(nextElement, scope));

        e.preventDefault();
        e.stopPropagation();

        if (nextElement) {
          $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextElement, true);
        } else {
          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)
          // then move focus to the body.
          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)
          if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInAnyScope(nodeToRestore)) {
            focusedElement.blur();
          } else {
            $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nodeToRestore, true);
          }
        }
      }
    };

    if (!contain) {
      document.addEventListener('keydown', onKeyDown, true);
    }

    return () => {
      if (!contain) {
        document.removeEventListener('keydown', onKeyDown, true);
      }

      if (restoreFocus && nodeToRestore && $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(document.activeElement, scope)) {
        requestAnimationFrame(() => {
          if (document.body.contains(nodeToRestore)) {
            $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nodeToRestore);
          }
        });
      }
    };
  }, [scopeRef, restoreFocus, contain]);
}
/**
 * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}
 * that matches all focusable/tabbable elements.
 */


function getFocusableTreeWalker(root, opts, scope) {
  let selector = opts != null && opts.tabbable ? $c9e8f80f5bb1841844f54e4ad30b$var$TABBABLE_ELEMENT_SELECTOR : $c9e8f80f5bb1841844f54e4ad30b$var$FOCUSABLE_ELEMENT_SELECTOR;
  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      var _opts$from; // Skip nodes inside the starting node.


      if (opts != null && (_opts$from = opts.from) != null && _opts$from.contains(node)) {
        return NodeFilter.FILTER_REJECT;
      }

      if (node.matches(selector) && $ee5e90cbb4a22466973155c14222fa1$export$isElementVisible(node) && (!scope || $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(node, scope))) {
        return NodeFilter.FILTER_ACCEPT;
      }

      return NodeFilter.FILTER_SKIP;
    }

  });

  if (opts != null && opts.from) {
    walker.currentNode = opts.from;
  }

  return walker;
}
/**
 * Creates a FocusManager object that can be used to move focus within an element.
 */

function createFocusManager(ref) {
  return {
    focusNext(opts) {
      if (opts === void 0) {
        opts = {};
      }

      let root = ref.current;
      let {
        from,
        tabbable,
        wrap
      } = opts;
      let node = from || document.activeElement;
      let walker = getFocusableTreeWalker(root, {
        tabbable
      });

      if (root.contains(node)) {
        walker.currentNode = node;
      }

      let nextNode = walker.nextNode();

      if (!nextNode && wrap) {
        walker.currentNode = root;
        nextNode = walker.nextNode();
      }

      if (nextNode) {
        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextNode, true);
      }

      return nextNode;
    },

    focusPrevious(opts) {
      if (opts === void 0) {
        opts = {};
      }

      let root = ref.current;
      let {
        from,
        tabbable,
        wrap
      } = opts;
      let node = from || document.activeElement;
      let walker = getFocusableTreeWalker(root, {
        tabbable
      });

      if (root.contains(node)) {
        walker.currentNode = node;
      } else {
        let next = $c9e8f80f5bb1841844f54e4ad30b$var$last(walker);

        if (next) {
          $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(next, true);
        }

        return next;
      }

      let previousNode = walker.previousNode();

      if (!previousNode && wrap) {
        walker.currentNode = root;
        previousNode = $c9e8f80f5bb1841844f54e4ad30b$var$last(walker);
      }

      if (previousNode) {
        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(previousNode, true);
      }

      return previousNode;
    },

    focusFirst(opts) {
      if (opts === void 0) {
        opts = {};
      }

      let root = ref.current;
      let {
        tabbable
      } = opts;
      let walker = getFocusableTreeWalker(root, {
        tabbable
      });
      let nextNode = walker.nextNode();

      if (nextNode) {
        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextNode, true);
      }

      return nextNode;
    },

    focusLast(opts) {
      if (opts === void 0) {
        opts = {};
      }

      let root = ref.current;
      let {
        tabbable
      } = opts;
      let walker = getFocusableTreeWalker(root, {
        tabbable
      });
      let next = $c9e8f80f5bb1841844f54e4ad30b$var$last(walker);

      if (next) {
        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(next, true);
      }

      return next;
    }

  };
}

function $c9e8f80f5bb1841844f54e4ad30b$var$last(walker) {
  let next;
  let last;

  do {
    last = walker.lastChild();

    if (last) {
      next = last;
    }
  } while (last);

  return next;
}
/**
 * Determines whether a focus ring should be shown to indicate keyboard focus.
 * Focus rings are visible only when the user is interacting with a keyboard,
 * not with a mouse, touch, or other input methods.
 */


function useFocusRing(props) {
  if (props === void 0) {
    props = {};
  }

  let {
    autoFocus = false,
    isTextInput,
    within
  } = props;
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocused: false,
    isFocusVisible: autoFocus || isFocusVisible()
  }).current;
  let [isFocused, setFocused] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let [isFocusVisibleState, setFocusVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(() => state.isFocused && state.isFocusVisible);

  let updateState = () => setFocusVisible(state.isFocused && state.isFocusVisible);

  let onFocusChange = isFocused => {
    state.isFocused = isFocused;
    setFocused(isFocused);
    updateState();
  };

  useFocusVisibleListener(isFocusVisible => {
    state.isFocusVisible = isFocusVisible;
    updateState();
  }, [], {
    isTextInput
  });
  let {
    focusProps
  } = module_useFocus({
    isDisabled: within,
    onFocusChange
  });
  let {
    focusWithinProps
  } = useFocusWithin({
    isDisabled: !within,
    onFocusWithinChange: onFocusChange
  });
  return {
    isFocused,
    isFocusVisible: state.isFocused && isFocusVisibleState,
    focusProps: within ? focusWithinProps : focusProps
  };
}
/**
 * A utility component that applies a CSS class when an element has keyboard focus.
 * Focus rings are visible only when the user is interacting with a keyboard,
 * not with a mouse, touch, or other input methods.
 */

function FocusRing(props) {
  let {
    children,
    focusClass,
    focusRingClass
  } = props;
  let {
    isFocused,
    isFocusVisible,
    focusProps
  } = useFocusRing(props);

  let child = _react.Children.only(children);

  return /*#__PURE__*/_react.cloneElement(child, mergeProps(child.props, _babelRuntimeHelpersEsmExtends({}, focusProps, {
    className: _clsx({
      [focusClass || '']: isFocused,
      [focusRingClass || '']: isFocusVisible
    })
  })));
}

let $e11539c8317b2d21639df611cb5658f$var$FocusableContext = /*#__PURE__*/(/* unused pure expression or super */ null && (_react.createContext(null)));

function $e11539c8317b2d21639df611cb5658f$var$useFocusableContext(ref) {
  let context = useContext($e11539c8317b2d21639df611cb5658f$var$FocusableContext) || {};
  useSyncRef(context, ref); // eslint-disable-next-line

  let otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(context, ["ref"]);

  return otherProps;
}
/**
 * Provides DOM props to the nearest focusable child.
 */


function $e11539c8317b2d21639df611cb5658f$var$FocusableProvider(props, ref) {
  let {
    children
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["children"]);

  let context = _babelRuntimeHelpersEsmExtends({}, otherProps, {
    ref
  });

  return /*#__PURE__*/_react.createElement($e11539c8317b2d21639df611cb5658f$var$FocusableContext.Provider, {
    value: context
  }, children);
}

let FocusableProvider = /*#__PURE__*/(/* unused pure expression or super */ null && (_react.forwardRef($e11539c8317b2d21639df611cb5658f$var$FocusableProvider)));
/**
 * Used to make an element focusable and capable of auto focus.
 */

function useFocusable(props, domRef) {
  let {
    focusProps
  } = useFocus(props);
  let {
    keyboardProps
  } = useKeyboard(props);
  let interactions = mergeProps(focusProps, keyboardProps);
  let domProps = $e11539c8317b2d21639df611cb5658f$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = useRef(props.autoFocus);
  useEffect(() => {
    if (autoFocusRef.current && domRef.current) {
      domRef.current.focus();
    }

    autoFocusRef.current = false;
  }, []);
  return {
    focusableProps: mergeProps(_babelRuntimeHelpersEsmExtends({}, interactions, {
      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined
    }), interactionProps)
  };
}
;// CONCATENATED MODULE: ./src/utils/drip.tsx
var drip_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/utils/drip.tsx";





const drip_defaultProps = {
  visible: false,
  x: 0,
  y: 0,
  className: ''
};
const expand = keyframes({
  '0%': {
    opacity: 0,
    transform: 'scale(0.25)'
  },
  '30%': {
    opacity: 1
  },
  '80%': {
    opacity: 0.5
  },
  '100%': {
    transform: 'scale(28)',
    opacity: 0
  }
});
const StyledDrip = styled('div', {
  position: 'absolute',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0,
  '& svg': {
    position: 'absolute',
    animation: `350ms linear ${expand}`,
    animationFillMode: 'forwards',
    width: '$md',
    height: '$md'
  }
});

const Drip = ({
  visible,
  x,
  y,
  color,
  onCompleted,
  className,
  ...props
}) => {
  const dripRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const top = Number.isNaN(+y) ? 0 : y - 10;
  const left = Number.isNaN(+x) ? 0 : x - 10;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!dripRef.current) return;
    dripRef.current.addEventListener('animationend', onCompleted);
    return () => {
      if (!dripRef.current) return;
      dripRef.current.removeEventListener('animationend', onCompleted);
    };
  });
  if (!visible) return null;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDrip, {
    ref: dripRef,
    className: clsx('nextui-drip', className),
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
      width: "20",
      height: "20",
      viewBox: "0 0 20 20",
      style: {
        top,
        left
      },
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("g", {
        stroke: "none",
        strokeWidth: "1",
        fill: "none",
        fillRule: "evenodd",
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("g", {
          className: "nextui-drip-filler",
          fill: color,
          children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("rect", {
            width: "100%",
            height: "100%",
            rx: "10"
          }, void 0, false, {
            fileName: drip_jsxFileName,
            lineNumber: 91,
            columnNumber: 13
          }, undefined)
        }, void 0, false, {
          fileName: drip_jsxFileName,
          lineNumber: 90,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: drip_jsxFileName,
        lineNumber: 89,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: drip_jsxFileName,
      lineNumber: 88,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: drip_jsxFileName,
    lineNumber: 83,
    columnNumber: 5
  }, undefined);
};

const MemoDrip = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Drip);
/* harmony default export */ const drip = (with_defaults(MemoDrip, drip_defaultProps));
;// CONCATENATED MODULE: ./src/button/utils.tsx
const filterPropsWithGroup = (props, config) => {
  var _config$bordered, _config$borderWeight, _config$ghost, _config$ripple, _config$flat, _config$animated, _config$rounded, _config$light, _config$size, _config$color, _config$disabled;

  if (!config.isButtonGroup) return props;
  return { ...props,
    auto: true,
    shadow: false,
    bordered: (_config$bordered = config.bordered) != null ? _config$bordered : props.bordered,
    borderWeight: (_config$borderWeight = config.borderWeight) != null ? _config$borderWeight : props.borderWeight,
    ghost: (_config$ghost = config.ghost) != null ? _config$ghost : props.ghost,
    ripple: (_config$ripple = config.ripple) != null ? _config$ripple : props.ripple,
    flat: (_config$flat = config.flat) != null ? _config$flat : props.flat,
    animated: (_config$animated = config.animated) != null ? _config$animated : props.animated,
    rounded: (_config$rounded = config.rounded) != null ? _config$rounded : props.rounded,
    light: (_config$light = config.light) != null ? _config$light : props.light,
    size: (_config$size = config.size) != null ? _config$size : props.size,
    color: (_config$color = config.color) != null ? _config$color : props.color,
    disabled: (_config$disabled = config.disabled) != null ? _config$disabled : props.disabled
  };
};
;// CONCATENATED MODULE: ./src/button/button-group-context.ts

const button_group_context_defaultContext = {
  isButtonGroup: false,
  disabled: false
};
const ButtonGroupContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(button_group_context_defaultContext);
const useButtonGroupContext = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(ButtonGroupContext);
;// CONCATENATED MODULE: ./src/button/button-icon.tsx
var button_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/button/button-icon.tsx";





const button_icon_defaultProps = {
  className: ''
};
const StyledButtonIcon = styled('span', {
  dflex: 'center',
  position: 'absolute',
  left: '$$buttonPadding',
  right: 'auto',
  top: '50%',
  transform: 'translateY(-50%)',
  color: 'inherit',
  zIndex: '$1',
  '& svg': {
    background: 'transparent'
  },
  variants: {
    isAuto: {
      true: {
        position: 'relative',
        transform: 'none',
        top: '0%'
      }
    },
    isRight: {
      true: {
        right: '$$buttonPadding',
        left: 'auto'
      }
    },
    isSingle: {
      true: {
        position: 'static',
        transform: 'none',
        m: 0
      }
    }
  },
  compoundVariants: [// isAuto && isRight
  {
    isAuto: true,
    isRight: true,
    css: {
      order: 2,
      ml: '$$buttonPadding',
      right: '0%',
      left: '0%'
    }
  }, // isAuto && !isRight
  {
    isAuto: true,
    isRight: false,
    css: {
      order: 0,
      mr: '$$buttonPadding',
      right: '0%',
      left: '0%'
    }
  }, // isAuto && isSingle
  {
    isAuto: true,
    isSingle: true,
    css: {
      m: 0
    }
  }]
});

const ButtonIcon = ({
  children,
  className,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledButtonIcon, {
    className: clsx('nextui-button-icon', className),
    ...props,
    children: children
  }, void 0, false, {
    fileName: button_icon_jsxFileName,
    lineNumber: 94,
    columnNumber: 5
  }, undefined);
};

ButtonIcon.toString = () => '.nextui-button-icon';

const MemoButtonIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ButtonIcon);
/* harmony default export */ const button_icon = (with_defaults(MemoButtonIcon, button_icon_defaultProps));
;// CONCATENATED MODULE: ./src/use-drip/use-drip.ts


const useDrip = (initialValue = false, ref) => {
  const [dripVisible, setDripVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialValue);
  const [dripX, setDripX] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(0);
  const [dripY, setDripY] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(0);

  const dripCompletedHandle = () => {
    setDripVisible(false);
    setDripX(0);
    setDripY(0);
  };

  const clickHandler = event => {
    if (!ref.current) return;
    const rect = ref.current.getBoundingClientRect();
    setDripVisible(true);
    setDripX(event.clientX - rect.left);
    setDripY(event.clientY - rect.top);
  };

  return {
    visible: dripVisible,
    x: dripX,
    y: dripY,
    onClick: clickHandler,
    onCompleted: dripCompletedHandle
  };
};

/* harmony default export */ const use_drip = (useDrip);
;// CONCATENATED MODULE: ./src/use-drip/index.ts

/* harmony default export */ const src_use_drip = (use_drip);
;// CONCATENATED MODULE: ./src/button/button.styles.ts


const StyledButton = styled('button', {
  dflex: 'center',
  appearance: 'none',
  boxSizing: ' border-box',
  fontWeight: '$medium',
  us: 'none',
  lineHeight: '$sm',
  ta: 'center',
  whiteSpace: 'nowrap',
  transition: '$default',
  position: 'relative',
  overflow: 'hidden',
  border: 'none',
  cursor: 'pointer',
  pe: 'auto',
  p: 0,
  '&:hover': {
    opacity: 0.85
  },
  '@motion': {
    transition: 'none'
  },
  '.nextui-button-text': {
    dflex: 'center',
    zIndex: '$2',
    'p, pre, div': {
      margin: 0
    }
  },
  [`& ${StyledDrip}`]: {
    zIndex: '$1',
    '.nextui-drip-filler': {
      opacity: 0.25,
      fill: '$accents2'
    }
  },
  variants: {
    bordered: {
      true: {
        bg: 'transparent',
        borderStyle: 'solid',
        color: '$text'
      }
    },
    ghost: {
      true: {
        '&:hover': {
          color: '$white'
        }
      }
    },
    color: {
      default: {
        bg: '$primary',
        color: '$white'
      },
      primary: {
        bg: '$primary',
        color: '$white'
      },
      secondary: {
        bg: '$secondary',
        color: '$white'
      },
      success: {
        bg: '$success',
        color: '$white'
      },
      warning: {
        bg: '$warning',
        color: '$white'
      },
      error: {
        bg: '$error',
        color: '$white'
      },
      gradient: {
        bg: '$gradient',
        color: '$white'
      }
    },
    size: {
      xs: {
        $$buttonPadding: '$space$3',
        px: '$3',
        height: '$10',
        lh: '$space$10',
        width: 'auto',
        minWidth: '$20',
        fontSize: '$tiny',
        br: '$xs'
      },
      sm: {
        $$buttonPadding: '$space$5',
        px: '$5',
        height: '$12',
        lh: '$space$14',
        width: 'auto',
        minWidth: '$36',
        fontSize: '$xs',
        br: '$sm'
      },
      md: {
        $$buttonPadding: '$space$7',
        px: '$7',
        height: '$14',
        lh: '$space$14',
        width: 'auto',
        minWidth: '$48',
        fontSize: '$xs',
        br: '$md'
      },
      lg: {
        $$buttonPadding: '$space$9',
        px: '$9',
        height: '$15',
        lh: '$space$15',
        width: 'auto',
        minWidth: '$60',
        fontSize: '$base',
        br: '$base'
      },
      xl: {
        $$buttonPadding: '$space$10',
        px: '$10',
        height: '$17',
        lh: '$space$17',
        width: 'auto',
        minWidth: '$72',
        fontSize: '$sm',
        br: '$xl'
      }
    },
    borderWeight: {
      light: {
        bw: '$light'
      },
      normal: {
        bw: '$normal'
      },
      bold: {
        bw: '$bold'
      },
      extrabold: {
        bw: '$extrabold'
      },
      black: {
        bw: '$black'
      }
    },
    flat: {
      true: {
        color: '$text'
      }
    },
    light: {
      true: {
        bg: 'transparent',
        [`& ${StyledDrip}`]: {
          '.nextui-drip-filler': {
            opacity: 0.8,
            fill: '$accents2'
          }
        }
      }
    },
    shadow: {
      true: {
        bs: '$sm'
      }
    },
    disabled: {
      true: {
        bg: '$accents2',
        color: '$accents4',
        cursor: 'not-allowed',
        pe: 'auto',
        '&:hover': {
          opacity: 1
        }
      }
    },
    clickable: {
      false: {
        cursor: 'default',
        pe: 'none'
      }
    },
    animated: {
      true: {
        '&:active': {
          transform: 'scale(0.97)'
        }
      },
      false: {
        transition: 'none'
      }
    },
    auto: {
      true: {
        width: 'auto',
        minWidth: 'min-content'
      }
    },
    rounded: {
      true: {
        br: '$pill'
      }
    }
  },
  compoundVariants: [// size / auto
  {
    auto: true,
    size: 'xs',
    css: {
      px: '$5',
      minWidth: 'min-content'
    }
  }, {
    auto: true,
    size: 'sm',
    css: {
      px: '$8',
      minWidth: 'min-content'
    }
  }, {
    auto: true,
    size: 'md',
    css: {
      px: '$9',
      minWidth: 'min-content'
    }
  }, {
    auto: true,
    size: 'lg',
    css: {
      px: '$10',
      minWidth: 'min-content'
    }
  }, {
    auto: true,
    size: 'xl',
    css: {
      px: '$11',
      minWidth: 'min-content'
    }
  }, // animated / disabled
  {
    animated: true,
    disabled: true,
    css: {
      '&:active': {
        transform: 'none'
      }
    }
  }, // shadow / color
  {
    shadow: true,
    color: 'default',
    css: {
      normalShadow: '$primaryShadow'
    }
  }, {
    shadow: true,
    color: 'primary',
    css: {
      normalShadow: '$primaryShadow'
    }
  }, {
    shadow: true,
    color: 'secondary',
    css: {
      normalShadow: '$secondaryShadow'
    }
  }, {
    shadow: true,
    color: 'warning',
    css: {
      normalShadow: '$warningShadow'
    }
  }, {
    shadow: true,
    color: 'success',
    css: {
      normalShadow: '$successShadow'
    }
  }, {
    shadow: true,
    color: 'error',
    css: {
      normalShadow: '$errorShadow'
    }
  }, {
    shadow: true,
    color: 'gradient',
    css: {
      normalShadow: '$primaryShadow'
    }
  }, // light / color
  {
    light: true,
    color: 'default',
    css: {
      bg: 'transparent',
      color: '$text'
    }
  }, {
    light: true,
    color: 'primary',
    css: {
      bg: 'transparent',
      color: '$primary'
    }
  }, {
    light: true,
    color: 'secondary',
    css: {
      bg: 'transparent',
      color: '$secondary'
    }
  }, {
    light: true,
    color: 'warning',
    css: {
      bg: 'transparent',
      color: '$warning'
    }
  }, {
    light: true,
    color: 'success',
    css: {
      bg: 'transparent',
      color: '$success'
    }
  }, {
    light: true,
    color: 'error',
    css: {
      bg: 'transparent',
      color: '$error'
    }
  }, // bordered / color
  {
    bordered: true,
    color: 'default',
    css: {
      bg: 'transparent',
      borderColor: '$primary',
      color: '$primary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$primary'
        }
      }
    }
  }, {
    bordered: true,
    color: 'primary',
    css: {
      bg: 'transparent',
      borderColor: '$primary',
      color: '$primary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$primary'
        }
      }
    }
  }, {
    bordered: true,
    color: 'secondary',
    css: {
      bg: 'transparent',
      borderColor: '$secondary',
      color: '$secondary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$secondary'
        }
      }
    }
  }, {
    bordered: true,
    color: 'success',
    css: {
      bg: 'transparent',
      borderColor: '$success',
      color: '$success',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$success'
        }
      }
    }
  }, {
    bordered: true,
    color: 'warning',
    css: {
      bg: 'transparent',
      borderColor: '$warning',
      color: '$warning',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$warning'
        }
      }
    }
  }, {
    bordered: true,
    color: 'error',
    css: {
      bg: 'transparent',
      borderColor: '$error',
      color: '$error',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$error'
        }
      }
    }
  }, {
    bordered: true,
    color: 'gradient',
    css: {
      bg: 'transparent',
      color: '$text',
      padding: '$1',
      bgClip: 'content-box, border-box',
      borderColor: '$primary',
      backgroundImage: 'linear-gradient($background, $background), $gradient',
      border: 'none',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$secondary'
        }
      }
    }
  }, // ghost / color
  {
    ghost: true,
    color: 'default',
    css: {
      '&:hover': {
        bg: '$primary'
      }
    }
  }, {
    ghost: true,
    color: 'primary',
    css: {
      '&:hover': {
        bg: '$primary'
      }
    }
  }, {
    ghost: true,
    color: 'secondary',
    css: {
      '&:hover': {
        bg: '$secondary'
      }
    }
  }, {
    ghost: true,
    color: 'success',
    css: {
      '&:hover': {
        bg: '$success'
      }
    }
  }, {
    ghost: true,
    color: 'warning',
    css: {
      '&:hover': {
        bg: '$warning'
      }
    }
  }, {
    ghost: true,
    color: 'error',
    css: {
      '&:hover': {
        bg: '$error'
      }
    }
  }, {
    ghost: true,
    color: 'gradient',
    css: {
      '&:hover': {
        bg: '$gradient'
      }
    }
  }, // flat / color
  {
    flat: true,
    color: 'default',
    css: {
      bg: '$primaryLight',
      color: '$primary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$primary'
        }
      }
    }
  }, {
    flat: true,
    color: 'primary',
    css: {
      bg: '$primaryLight',
      color: '$primary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$primary'
        }
      }
    }
  }, {
    flat: true,
    color: 'secondary',
    css: {
      bg: '$secondaryLight',
      color: '$secondary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$secondary'
        }
      }
    }
  }, {
    flat: true,
    color: 'success',
    css: {
      bg: '$successLight',
      color: '$success',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$success'
        }
      }
    }
  }, {
    flat: true,
    color: 'warning',
    css: {
      bg: '$warningLight',
      color: '$warning',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$warning'
        }
      }
    }
  }, {
    flat: true,
    color: 'error',
    css: {
      bg: '$errorLight',
      color: '$error',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$error'
        }
      }
    }
  }, // border-weight / gradient-color / bordered
  {
    bordered: true,
    color: 'gradient',
    borderWeight: 'light',
    css: {
      padding: '$borderWeights$light'
    }
  }, {
    bordered: true,
    color: 'gradient',
    borderWeight: 'normal',
    css: {
      padding: '$borderWeights$normal'
    }
  }, {
    bordered: true,
    color: 'gradient',
    borderWeight: 'bold',
    css: {
      padding: '$borderWeights$bold'
    }
  }, {
    bordered: true,
    color: 'gradient',
    borderWeight: 'extrabold',
    css: {
      padding: '$borderWeights$extrabold'
    }
  }, {
    bordered: true,
    color: 'gradient',
    borderWeight: 'black',
    css: {
      padding: '$borderWeights$black'
    }
  }, // size / auto / gradient-color / bordered
  {
    auto: true,
    color: 'gradient',
    bordered: true,
    size: 'xs',
    css: {
      px: '$1',
      py: '$1',
      '.nextui-button-text': {
        px: '$5'
      }
    }
  }, {
    auto: true,
    color: 'gradient',
    bordered: true,
    size: 'sm',
    css: {
      px: '$1',
      py: '$1',
      '.nextui-button-text': {
        px: '$8'
      }
    }
  }, {
    auto: true,
    color: 'gradient',
    bordered: true,
    size: 'md',
    css: {
      px: '$1',
      py: '$1',
      '.nextui-button-text': {
        px: '$9'
      }
    }
  }, {
    auto: true,
    color: 'gradient',
    bordered: true,
    size: 'lg',
    css: {
      px: '$1',
      py: '$1',
      '.nextui-button-text': {
        px: '$14'
      }
    }
  }, {
    auto: true,
    color: 'gradient',
    bordered: true,
    size: 'xl',
    css: {
      px: '$1',
      py: '$1',
      '.nextui-button-text': {
        px: '$12'
      }
    }
  }, // rounded && size
  {
    rounded: true,
    size: 'xs',
    css: {
      br: '$pill'
    }
  }, {
    rounded: true,
    size: 'sm',
    css: {
      br: '$pill'
    }
  }, {
    rounded: true,
    size: 'md',
    css: {
      br: '$pill'
    }
  }, {
    rounded: true,
    size: 'lg',
    css: {
      br: '$pill'
    }
  }, {
    rounded: true,
    size: 'xl',
    css: {
      br: '$pill'
    }
  }],
  defaultVariants: {
    color: 'default',
    borderWeight: 'normal',
    animated: true,
    size: 'md'
  }
}, cssFocusVisible);
/* harmony default export */ const button_styles = (StyledButton);
;// CONCATENATED MODULE: ./src/button/button.tsx
var button_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/button/button.tsx";














const button_defaultProps = {
  clickable: true,
  ghost: false,
  bordered: false,
  ripple: true,
  animated: true,
  disabled: false,
  auto: false,
  className: ''
};
const Button = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({ ...btnProps
}, ref) => {
  const buttonRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => buttonRef.current);
  const groupConfig = useButtonGroupContext();
  const filteredProps = filterPropsWithGroup(btnProps, groupConfig);
  /* eslint-disable @typescript-eslint/no-unused-vars */

  const {
    flat,
    children,
    disabled,
    animated,
    light,
    ripple,
    bordered,
    auto,
    borderWeight,
    onClick,
    icon,
    iconRight,
    ghost,
    clickable,
    className,
    ...props
  } = filteredProps;
  /* eslint-enable @typescript-eslint/no-unused-vars */

  if (__DEV__ && filteredProps.color === 'gradient' && (flat || light)) {
    src_use_warning('Using the gradient color on flat and light buttons will have no effect.');
  }

  const hasIcon = icon || iconRight;
  const isRight = Boolean(iconRight);
  const {
    isFocusVisible,
    focusProps
  } = useFocusRing();
  const {
    onClick: onDripClickHandler,
    ...dripBindings
  } = src_use_drip(false, buttonRef);

  const clickHandler = event => {
    if (disabled || !clickable) return;

    if (animated && ripple && buttonRef.current) {
      onDripClickHandler(event);
    }

    onClick && onClick(event);
  };

  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return disabled ? 'disabled' : 'ready';
  }, [disabled]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_styles, {
    ref: buttonRef,
    borderWeight: borderWeight,
    auto: auto,
    flat: flat,
    light: light,
    ghost: ghost,
    bordered: bordered || ghost,
    clickable: clickable,
    "data-state": getState,
    disabled: disabled,
    animated: animated,
    onClick: clickHandler,
    isFocusVisible: isFocusVisible,
    className: clsx('nextui-button', `nextui-button--${getState}`, className),
    ...focusProps,
    ...props,
    children: [external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.count(children) === 0 ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_icon, {
      isAuto: auto,
      isRight: isRight,
      isSingle: true,
      children: hasIcon
    }, void 0, false, {
      fileName: button_jsxFileName,
      lineNumber: 143,
      columnNumber: 9
    }, undefined) : hasIcon ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_icon, {
        isAuto: auto,
        isRight: isRight,
        children: hasIcon
      }, void 0, false, {
        fileName: button_jsxFileName,
        lineNumber: 148,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
        className: clsx('nextui-button-text', {
          'nextui-button-text-right': isRight,
          'nextui-button-text-left': !isRight
        }),
        children: children
      }, void 0, false, {
        fileName: button_jsxFileName,
        lineNumber: 151,
        columnNumber: 11
      }, undefined)]
    }, void 0, true) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-button-text",
      children: children
    }, void 0, false, {
      fileName: button_jsxFileName,
      lineNumber: 161,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(drip, {
      color: "white",
      ...dripBindings
    }, void 0, false, {
      fileName: button_jsxFileName,
      lineNumber: 163,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: button_jsxFileName,
    lineNumber: 124,
    columnNumber: 5
  }, undefined);
});

if (__DEV__) {
  Button.displayName = 'NextUI - Button';
}

Button.toString = () => '.nextui-button';

/* harmony default export */ const button_button = (with_defaults(Button, button_defaultProps));
;// CONCATENATED MODULE: ./src/button/button-group.styles.ts


const StyledButtonGroup = styled('div', {
  display: 'inline-flex',
  margin: '$3',
  backgroundColor: 'transparent',
  height: 'min-content',
  [`& ${button_styles}`]: {
    '.nextui-button-text': {
      top: 0
    }
  },
  variants: {
    vertical: {
      true: {
        fd: 'column',
        [`& ${button_styles}`]: {
          '&:not(:first-child)': {
            btlr: 0,
            // top-left
            btrr: 0 // top-right

          },
          '&:not(:last-child)': {
            bblr: 0,
            bbrr: 0
          }
        }
      },
      false: {
        fd: 'row',
        [`& ${button_styles}`]: {
          '&:not(:first-child)': {
            btlr: 0,
            // top-left
            bblr: 0 // bottom-left

          },
          '&:not(:last-child)': {
            btrr: 0,
            // top-right
            bbrr: 0 // bottom-right

          }
        }
      }
    },
    size: {
      xs: {
        br: '$xs'
      },
      sm: {
        br: '$sm'
      },
      md: {
        br: '$md'
      },
      lg: {
        br: '$base'
      },
      xl: {
        br: '$xl'
      }
    },
    rounded: {
      true: {
        br: '$pill'
      }
    },
    bordered: {
      true: {
        bg: 'transparent'
      }
    },
    gradient: {
      true: {
        pl: 0
      }
    }
  },
  defaultVariants: {
    vertical: false
  },
  compoundVariants: [// bordered / vertical:true
  {
    bordered: true,
    vertical: true,
    css: {
      [`& ${button_styles}`]: {
        '&:not(:last-child)': {
          borderBottom: 'none',
          paddingBottom: '0'
        }
      }
    }
  }, // bordered / vertical:false
  {
    bordered: true,
    vertical: false,
    css: {
      [`& ${button_styles}`]: {
        '&:not(:first-child)': {
          borderLeft: 'none'
        }
      }
    }
  }, // gradient / vertical:false
  {
    gradient: true,
    vertical: false,
    css: {
      [`& ${button_styles}`]: {
        '&:not(:last-child)&:not(:first-child)': {
          pl: 0,
          filter: 'hue-rotate(310deg)'
        },
        '&:last-child': {
          pl: 0,
          filter: 'hue-rotate(250deg)'
        }
      }
    }
  }]
});
/* harmony default export */ const button_group_styles = (StyledButtonGroup);
;// CONCATENATED MODULE: ./src/button/button-group.tsx
var button_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/button/button-group.tsx";





const button_group_defaultProps = {
  borderWeight: 'normal',
  size: 'md',
  color: 'default'
};

const ButtonGroup = groupProps => {
  const {
    disabled,
    size,
    color,
    bordered,
    ghost,
    light,
    flat,
    shadow,
    auto,
    animated,
    rounded,
    ripple,
    borderWeight,
    children,
    ...props
  } = groupProps;
  const initialValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    disabled,
    size,
    color,
    bordered,
    light,
    ghost,
    flat,
    shadow,
    auto,
    borderWeight,
    animated,
    rounded,
    ripple,
    isButtonGroup: true
  }), [disabled, animated, size, ripple, color, bordered, light, ghost, flat, borderWeight]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(ButtonGroupContext.Provider, {
    value: initialValue,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_group_styles, {
      size: size,
      bordered: bordered || ghost,
      gradient: groupProps.color === 'gradient',
      ...props,
      children: children
    }, void 0, false, {
      fileName: button_group_jsxFileName,
      lineNumber: 93,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: button_group_jsxFileName,
    lineNumber: 92,
    columnNumber: 5
  }, undefined);
};

ButtonGroup.toString = () => '.nextui-button-group';

const MemoButtonGroup = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ButtonGroup);
/* harmony default export */ const button_group = (with_defaults(MemoButtonGroup, button_group_defaultProps));
;// CONCATENATED MODULE: ./src/button/index.ts





button_button.Group = button_group;
/* harmony default export */ const src_button = (button_button);
;// CONCATENATED MODULE: ./src/image/image.styles.ts

const loading = keyframes({
  '0%': {
    backgroundPosition: '200% 0'
  },
  to: {
    backgroundPosition: '-200% 0'
  }
});
const StyledImageContainer = styled('div', {
  opacity: 0,
  margin: '0 auto',
  position: 'relative',
  br: '$lg',
  overflow: 'hidden',
  maxWidth: '100%',
  transition: 'transform 250ms ease 0ms, opacity 200ms ease-in 0ms',
  '@motion': {
    transition: 'none'
  },
  variants: {
    ready: {
      true: {
        opacity: 1
      },
      false: {
        opacity: 0
      }
    }
  }
});
const StyledImage = styled('img', {
  size: '100%',
  display: 'block'
});
const StyledImageSkeleton = styled('div', {
  position: 'absolute',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  size: '100%',
  borderRadius: '$lg',
  backgroundImage: 'linear-gradient(270deg,$accents1,$accents2,$accents2,$accents1)',
  backgroundSize: '400% 100%',
  animation: `${loading} 5s ease-in-out infinite`,
  transition: 'opacity 300ms ease-out'
});
;// CONCATENATED MODULE: ./src/image/image.skeleton.tsx
var image_skeleton_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/image/image.skeleton.tsx";






const image_skeleton_defaultProps = {
  opacity: 0.5,
  className: ''
};
const ImageSkeleton = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(({
  opacity,
  css,
  className,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledImageSkeleton, {
    css: {
      opacity,
      ...css
    },
    className: clsx('nextui-image-skeleton', className),
    ...props
  }, void 0, false, {
    fileName: image_skeleton_jsxFileName,
    lineNumber: 30,
    columnNumber: 7
  }, undefined);
});

if (__DEV__) {
  ImageSkeleton.displayName = 'NextUI - ImageSkeleton';
}

ImageSkeleton.toString = () => '.nextui-image-skeleton';

/* harmony default export */ const image_skeleton = (with_defaults(ImageSkeleton, image_skeleton_defaultProps));
;// CONCATENATED MODULE: ./src/image/image.tsx
var image_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/image/image.tsx";








const image_defaultProps = {
  showSkeleton: true,
  autoResize: false,
  objectFit: 'scale-down',
  maxDelay: 3000,
  className: ''
};

const Image = ({
  src,
  width,
  height,
  showSkeleton: showSkeletonProp,
  className,
  maxDelay,
  autoResize,
  objectFit,
  containerCss,
  css,
  ...props
}) => {
  const [loading, setLoading] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(true);
  const [showSkeleton, setShowSkeleton] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(showSkeletonProp);
  const {
    w,
    h
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return {
      w: width ? typeof width === 'number' ? `${width}px` : width : 'auto',
      h: height ? typeof height === 'number' ? `${height}px` : height : 'auto'
    };
  }, [width, height]);
  const [zoomHeight, setZoomHeight, zoomHeightRef] = src_use_current_state(h);
  const imageRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [shape, updateShape] = src_use_real_shape(imageRef);
  const showAnimation = showSkeletonProp && !!width && !!height;

  const onImageLoaded = () => {
    setLoading(false);
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!showAnimation) return;
    if (!imageRef.current) return;

    if (imageRef.current.complete) {
      setLoading(false);
      setShowSkeleton(false);
    }
  });
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const timer = setTimeout(() => {
      if (showAnimation) {
        setShowSkeleton(false);
      }

      clearTimeout(timer);
    }, maxDelay);
    return () => clearTimeout(timer);
  }, [loading]);
  /**
   * On mobile devices, the render witdth may be less than CSS width value.
   * If the image is scaled, set the height manually.
   * This is to ensure the aspect ratio of the image.
   *
   * If the image is auto width, ignore all.
   */

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!autoResize) return;
    const notLoaded = shape.width === 0;
    const isAutoZoom = zoomHeightRef.current === 'auto';
    if (notLoaded || !width || !height) return;

    if (shape.width < width) {
      !isAutoZoom && setZoomHeight('auto');
    } else {
      isAutoZoom && setZoomHeight(h);
    }
  }, [shape, width]);
  src_use_resize(() => {
    if (!autoResize) return;
    updateShape();
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return loading ? 'loading' : 'ready';
  }, [loading]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledImageContainer, {
    className: clsx('nextui-image-container', `nextui-image--${getState}`, className),
    "data-state": getState,
    ready: !loading,
    css: { ...containerCss,
      width: w,
      height: zoomHeight
    },
    children: [showSkeleton && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(image_skeleton, {
      opacity: 1
    }, void 0, false, {
      fileName: image_jsxFileName,
      lineNumber: 138,
      columnNumber: 24
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledImage, {
      ref: imageRef,
      className: "nextui-image",
      width: width,
      height: height,
      onLoad: onImageLoaded,
      src: src,
      "data-state": getState,
      alt: props.alt || '',
      css: {
        objectFit,
        ...css
      },
      ...props
    }, void 0, false, {
      fileName: image_jsxFileName,
      lineNumber: 139,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: image_jsxFileName,
    lineNumber: 124,
    columnNumber: 5
  }, undefined);
};

Image.toString = () => '.nextui-image';

Image.defaultProps = image_defaultProps;
/* harmony default export */ const image_image = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Image));
;// CONCATENATED MODULE: ./src/image/index.ts


/* harmony default export */ const src_image = (image_image);
;// CONCATENATED MODULE: ./src/card/card.styles.ts


const StyledCardBody = styled('div', {
  d: 'flex',
  w: '100%',
  h: 'auto',
  flex: '1 1 auto',
  fd: 'column',
  jc: 'inherit',
  ai: 'inherit',
  ac: 'inherit',
  p: '$sm $lg',
  oy: 'auto',
  position: 'relative',
  ta: 'left',
  '*:first-child': {
    mt: 0
  },
  '*:last-child': {
    mb: 0
  }
});
const StyledCard = styled('div', {
  m: 0,
  p: 0,
  br: '$lg',
  position: 'relative',
  display: 'flex',
  overflow: 'hidden',
  fd: 'column',
  width: '100%',
  height: 'auto',
  boxSizing: 'border-box',
  '@motion': {
    transition: 'none'
  },
  '.nextui-image': {
    width: '100%'
  },
  [`& ${StyledDrip}`]: {
    zIndex: '$1',
    '.nextui-drip-filler': {
      opacity: 0.25,
      fill: '$accents6'
    }
  },
  variants: {
    color: {
      default: {
        $$cardColor: '$colors$background',
        bg: '$$cardColor'
      },
      primary: {
        $$cardColor: '$colors$primary',
        color: '$white',
        bg: '$$cardColor'
      },
      secondary: {
        $$cardColor: '$colors$secondary',
        color: '$white',
        bg: '$$cardColor'
      },
      success: {
        $$cardColor: '$colors$success',
        color: '$white',
        bg: '$$cardColor'
      },
      warning: {
        $$cardColor: '$colors$warning',
        color: '$white',
        bg: '$$cardColor'
      },
      error: {
        $$cardColor: '$colors$error',
        color: '$white',
        bg: '$$cardColor'
      },
      gradient: {
        $$cardColor: '$colors$gradient',
        color: '$white',
        bg: '$$cardColor'
      }
    },
    shadow: {
      true: {
        boxShadow: '$md'
      }
    },
    bordered: {
      true: {
        borderStyle: 'solid',
        borderColor: '$border'
      },
      false: {
        bw: 0
      }
    },
    borderWeight: {
      light: {
        bw: '$light'
      },
      normal: {
        bw: '$normal'
      },
      bold: {
        bw: '$bold'
      },
      extrabold: {
        bw: '$extrabold'
      },
      black: {
        bw: '$black'
      }
    },
    animated: {
      true: {
        transition: '$default'
      },
      false: {
        transition: 'none'
      }
    },
    clickable: {
      true: {
        cursor: 'pointer',
        us: 'none',
        WebkitTapHighlightColor: 'transparent',
        '&:focus:not(&:focus-visible)': {
          boxShadow: 'none'
        },
        '&:focus': {
          outline: 'none',
          boxShadow: '0 0 0 2px $colors$background, 0 0 0 4px $colors$primary'
        },
        '@safari': {
          WebkitTapHighlightColor: 'transparent',
          outline: 'none'
        }
      }
    },
    hoverable: {
      true: {
        '&:hover': {
          transform: 'translateY(-2px)',
          boxShadow: '$lg'
        }
      }
    },
    cover: {
      true: {
        '.nextui-image': {
          objectFit: 'cover !important' // TODO: remove important when image be styled

        },
        [`& ${StyledCardBody}`]: {
          p: 0
        }
      },
      false: {
        '.nextui-image, .nextui-image-container': {
          bblr: '0 !important',
          // TODO: remove important when image be styled
          bbrr: '0 !important'
        }
      }
    },
    isDark: {
      true: {}
    }
  },
  compoundVariants: [// isDark && color === 'default'
  {
    color: 'default',
    isDark: true,
    css: {
      $$cardColor: '$colors$accents1'
    }
  }, // color default && shadow && !isDark
  {
    color: 'default',
    shadow: true,
    isDark: false,
    css: {
      $$cardColor: '$colors$background',
      bg: '$$cardColor'
    }
  }, // color default && shadow && isDark
  {
    color: 'default',
    shadow: true,
    isDark: true,
    css: {
      $$cardColor: '$colors$accents1',
      bg: '$$cardColor'
    }
  }, // clickable && animated
  {
    clickable: true,
    animated: true,
    css: {
      '&:active': {
        scale: 0.97
      }
    }
  }],
  defaultVariants: {
    color: 'default',
    borderWeight: 'normal',
    animated: true,
    bordered: false,
    shadow: true
  }
});
const StyledCardHeader = styled('div', {
  w: '100%',
  display: 'flex',
  flexShrink: 0,
  zIndex: '$1',
  jc: 'flex-start',
  ai: 'center',
  overflow: 'hidden',
  color: 'inherit',
  fontSize: '$xs',
  p: '$sm',
  '*:first-child': {
    mt: 0
  },
  '*:last-child': {
    mb: 0
  }
});
const StyledCardFooter = styled('div', {
  w: '100%',
  h: 'auto',
  p: '$sm $lg',
  d: 'flex',
  ai: 'center',
  overflow: 'hidden',
  color: 'inherit',
  fontSize: '$xs',
  bblr: '$lg',
  bbrr: '$lg',
  '*': {
    mt: 0,
    mb: 0
  },
  variants: {
    blur: {
      true: {
        bf: 'saturate(180%) blur(10px)',
        bg: '$$cardColor'
      }
    }
  }
}); // types
;// CONCATENATED MODULE: ./src/card/card.tsx
var card_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/card/card.tsx";












const card_defaultProps = {
  animated: true,
  ripple: true,
  cover: false,
  preventDefault: false
};
const Card = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({ ...cardProps
}, ref) => {
  const {
    children,
    cover,
    animated,
    ripple,
    clickable,
    onClick,
    preventDefault,
    ...props
  } = cardProps;
  const cardRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => cardRef.current);
  const {
    isDark
  } = src_use_theme();
  const {
    onClick: onDripClickHandler,
    ...dripBindings
  } = src_use_drip(false, cardRef);
  const [withoutHeaderChildren, headerChildren] = pickChild(children, StyledCardHeader);
  const [withoutFooterChildren, footerChildren] = pickChild(withoutHeaderChildren, StyledCardFooter);
  const [withoutImageChildren, imageChildren] = pickChild(withoutFooterChildren, src_image);
  const hasContent = hasChild(withoutImageChildren, StyledCardBody);
  const hasHeader = hasChild(children, StyledCardHeader);

  const clickHandler = event => {
    if (animated && cardRef.current) {
      onDripClickHandler(event);
    }

    onClick && onClick(event);
  };

  const {
    bindings
  } = src_use_keyboard(event => {
    if (!clickable) {
      return;
    }

    clickHandler(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCard, {
    ref: cardRef,
    role: clickable ? 'button' : 'section',
    cover: cover,
    animated: animated,
    clickable: clickable,
    tabIndex: clickable ? 0 : -1,
    onClick: clickHandler,
    isDark: isDark,
    ...props,
    ...bindings,
    children: [hasHeader ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [headerChildren, imageChildren]
    }, void 0, true) : imageChildren, hasContent ? withoutImageChildren : !cover ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCardBody, {
      children: withoutImageChildren
    }, void 0, false, {
      fileName: card_jsxFileName,
      lineNumber: 133,
      columnNumber: 9
    }, undefined) : null, clickable && animated && ripple && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(drip, { ...dripBindings
    }, void 0, false, {
      fileName: card_jsxFileName,
      lineNumber: 135,
      columnNumber: 43
    }, undefined), footerChildren]
  }, void 0, true, {
    fileName: card_jsxFileName,
    lineNumber: 110,
    columnNumber: 5
  }, undefined);
});

if (__DEV__) {
  Card.displayName = 'NextUI - Card';
}

Card.toString = () => '.nextui-card';

/* harmony default export */ const card = (with_defaults(Card, card_defaultProps));
;// CONCATENATED MODULE: ./src/card/index.ts




card.Header = StyledCardHeader;
card.Body = StyledCardBody;
card.Footer = StyledCardFooter;
card.Image = src_image;
/* harmony default export */ const src_card = (card);
;// CONCATENATED MODULE: ./src/checkbox/checkbox-context.ts

const checkbox_context_defaultContext = {
  color: 'default',
  labelColor: 'default',
  size: 'md',
  disabledAll: false,
  inGroup: false,
  values: []
};
const CheckboxContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(checkbox_context_defaultContext);
const useCheckbox = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(CheckboxContext);
;// CONCATENATED MODULE: ./src/checkbox/checkbox.styles.ts

const StyledCheckboxLabel = styled('label', {
  d: 'inline-flex',
  jc: 'flex-start',
  ai: 'center',
  position: 'relative',
  w: 'auto',
  cursor: 'pointer',
  transition: '$default',
  zIndex: '$1',
  opacity: 1,
  '@motion': {
    transition: 'none'
  },
  variants: {
    size: {
      xs: {
        $$checkboxSize: '$space$7'
      },
      sm: {
        $$checkboxSize: '$space$8'
      },
      md: {
        $$checkboxSize: '$space$9'
      },
      lg: {
        $$checkboxSize: '$space$10'
      },
      xl: {
        $$checkboxSize: '$space$11'
      }
    },
    disabled: {
      true: {
        opacity: 0.75,
        cursor: 'not-allowed'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    }
  },
  defaultVariants: {
    size: 'md'
  }
});
const StyledCheckboxContainer = styled('div', {
  br: '$squared',
  position: 'relative',
  sizeMin: '$$checkboxSize',
  opacity: 1,
  transition: '$default',
  zIndex: '$1',
  '@motion': {
    transition: 'none'
  },
  variants: {
    color: {
      default: {
        $$checkboxColor: '$colors$primary',
        $$checkboxColorHover: '$colors$primaryDark'
      },
      primary: {
        $$checkboxColor: '$colors$primary',
        $$checkboxColorHover: '$colors$primaryDark'
      },
      secondary: {
        $$checkboxColor: '$colors$secondary',
        $$checkboxColorHover: '$colors$secondaryDark'
      },
      success: {
        $$checkboxColor: '$colors$success',
        $$checkboxColorHover: '$colors$successDark'
      },
      warning: {
        $$checkboxColor: '$colors$warning',
        $$checkboxColorHover: '$colors$warningDark'
      },
      error: {
        $$checkboxColor: '$colors$error',
        $$checkboxColorHover: '$colors$errorDark'
      },
      gradient: {
        $$checkboxColor: '$colors$gradient',
        $$checkboxColorHover: '$colors$gradient'
      }
    },
    rounded: {
      true: {
        br: '$pill'
      }
    },
    disabled: {
      true: {
        opacity: 0.4,
        cursor: 'not-allowed'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    }
  },
  defaultVariants: {
    color: 'default'
  }
}, sharedFocus);
const StyledIconCheckFirstLine = styled('div', {
  content: '',
  background: 'transparent',
  position: 'absolute',
  width: '8px',
  height: '1px',
  transition: '$default',
  br: '5px',
  zIndex: '$1',
  bottom: '0px',
  '&:after': {
    content: '',
    position: 'absolute',
    left: '0px',
    width: '0%',
    height: '2px',
    background: '$white',
    transition: '$default',
    br: '5px 0px 0px 5px'
  },
  '@motion': {
    transition: 'none',
    '&:after': {
      transition: 'none'
    }
  },
  variants: {
    indeterminate: {
      true: {
        display: 'none'
      }
    },
    checked: {
      true: {
        '&:after': {
          width: '100%',
          transition: 'all 0.25s ease 0.1s'
        }
      }
    },
    animated: {
      false: {
        transition: 'none',
        '&:after': {
          transition: 'none'
        }
      }
    }
  }
});
const StyledIconCheckSecondLine = styled('div', {
  content: '',
  position: 'absolute',
  h: '13px',
  br: '5px',
  bottom: '0',
  right: '0',
  zIndex: '$1',
  background: 'transparent',
  transition: '$default',
  width: '2px',
  '@motion': {
    transition: 'none',
    '&:after': {
      transition: 'none'
    }
  },
  '&:after': {
    content: '',
    position: 'absolute',
    width: '2px',
    height: '0%',
    background: '$white',
    transition: '$default',
    left: '0px',
    bottom: '0px',
    br: '5px 5px 0px 0px'
  },
  variants: {
    indeterminate: {
      true: {
        display: 'none'
      }
    },
    checked: {
      true: {
        '&:after': {
          height: '100%',
          transition: 'all 0.2s ease 0.3s'
        }
      }
    },
    animated: {
      false: {
        transition: 'none',
        '&:after': {
          transition: 'none'
        }
      }
    }
  }
});
const StyledIconCheck = styled('i', {
  size: '$$checkboxSize',
  dflex: 'center',
  br: 'inherit',
  opacity: 0,
  zIndex: '$2',
  transition: '$default',
  '&:after': {
    content: '',
    opacity: 0,
    position: 'relative',
    width: '10px',
    height: '2px',
    br: '1px',
    background: '$white',
    display: 'block'
  },
  '@motion': {
    transition: 'none',
    '&:after': {
      transition: 'none'
    }
  },
  variants: {
    indeterminate: {
      true: {
        transform: 'rotate(0deg)',
        width: 'auto',
        height: 'auto',
        margin: '0px',
        '&:after': {
          opacity: 1
        }
      },
      false: {
        width: '8px',
        height: '14px',
        display: 'block',
        position: 'relative',
        marginTop: '-4px'
      }
    },
    size: {
      xs: {
        marginTop: '-2px',
        transform: 'rotate(45deg) scale(0.5)'
      },
      sm: {
        marginTop: '-2px',
        transform: 'rotate(45deg) scale(0.5)'
      },
      md: {
        transform: 'rotate(45deg) scale(0.8)'
      },
      lg: {
        transform: 'rotate(45deg)'
      },
      xl: {
        transform: 'rotate(45deg)'
      }
    },
    checked: {
      true: {
        opacity: 1
      }
    },
    animated: {
      false: {
        transition: 'none',
        '&:after': {
          transition: 'none'
        }
      }
    }
  },
  compoundVariants: [// indeterminate && xs size
  {
    indeterminate: true,
    size: 'xs',
    css: {
      scale: '0.5'
    }
  }, // indeterminate && sm size
  {
    indeterminate: true,
    size: 'sm',
    css: {
      scale: '0.5'
    }
  }, // indeterminate && md size
  {
    indeterminate: true,
    size: 'md',
    css: {
      scale: '0.8'
    }
  }, // indeterminate && lg size
  {
    indeterminate: true,
    size: 'lg',
    css: {
      transform: 'none'
    }
  }, // indeterminate && xl size
  {
    indeterminate: true,
    size: 'lg',
    css: {
      transform: 'none'
    }
  }]
});
const StyledCheckboxMask = styled('div', {
  size: '100%',
  position: 'absolute',
  pe: 'none',
  boxSizing: 'border-box',
  dflex: 'center',
  zIndex: '-$1',
  br: 'inherit',
  transition: '$default',
  '&:before': {
    content: '',
    position: 'absolute',
    top: '0px',
    left: '0px',
    size: '100%',
    br: 'inherit',
    transition: '$default',
    zIndex: '-$1',
    border: '$borderWeights$normal solid $border',
    boxSizing: 'border-box'
  },
  '&:after': {
    content: '',
    position: 'absolute',
    top: '0px',
    left: '0px',
    size: '100%',
    bg: '$$checkboxColor',
    scale: 0.5,
    br: 'inherit',
    opacity: 0,
    transition: '$default',
    zIndex: '-$1'
  },
  '@motion': {
    transition: 'none',
    '&:before': {
      transition: 'none'
    },
    '&:after': {
      transition: 'none'
    }
  },
  variants: {
    checked: {
      true: {
        '&before': {
          opacity: 0,
          scale: 1.2
        },
        '&:after': {
          opacity: 1,
          scale: 1
        }
      }
    },
    animated: {
      false: {
        transition: 'none',
        '&:before': {
          transition: 'none'
        },
        '&:after': {
          transition: 'none'
        }
      }
    }
  }
});
const StyledCheckboxText = styled('span', {
  position: 'relative',
  dflex: 'center',
  color: '$text',
  opacity: 1,
  pl: 'calc($$checkboxSize * 0.57)',
  ln: '$$checkboxSize',
  fontSize: '$$checkboxSize',
  us: 'none',
  '@motion': {
    '&:before': {
      transition: 'none'
    }
  },
  variants: {
    color: {
      default: {
        color: '$text'
      },
      primary: {
        color: '$primary'
      },
      secondary: {
        color: '$secondary'
      },
      success: {
        color: '$success'
      },
      warning: {
        color: '$warning'
      },
      error: {
        color: '$error'
      }
    },
    line: {
      true: {
        '&:before': {
          content: '',
          position: 'absolute',
          width: '0px',
          height: '2px',
          background: '$text',
          transition: '$default'
        }
      }
    },
    checked: {
      true: {
        '&:before': {
          opacity: 0.8
        }
      }
    },
    disabled: {
      true: {
        color: '$accents4'
      }
    },
    animated: {
      false: {
        '&:before': {
          transition: 'none'
        }
      }
    }
  },
  compoundVariants: [{
    line: true,
    checked: true,
    css: {
      opacity: 0.6,
      '&:before': {
        w: 'calc(100% - 10px)'
      }
    }
  }]
});
const StyledCheckboxInput = styled('input', {
  position: 'absolute',
  width: '100%',
  height: '100%',
  top: '0px',
  left: '0px',
  margin: '0px',
  padding: '0px',
  opacity: 0,
  zIndex: '$1',
  cursor: 'pointer',
  '&:active': {
    [`& ~${StyledCheckboxMask}`]: {
      bg: '$border',
      '&:after': {
        bg: '$$checkboxColorHover'
      }
    }
  },
  '&:hover': {
    [`& ~${StyledCheckboxMask}`]: {
      bg: '$border',
      '&:before': {
        border: '2px solid transparent'
      },
      '&:after': {
        bg: '$$checkboxColorHover'
      }
    }
  },
  '&:disabled': {
    cursor: 'not-allowed'
  }
});
const StyledCheckboxGroup = styled('div', {
  display: 'flex',
  flexDirection: 'colunm',
  variants: {
    size: {
      xs: {
        $$checkboxSize: '$space$7'
      },
      sm: {
        $$checkboxSize: '$space$8'
      },
      md: {
        $$checkboxSize: '$space$9'
      },
      lg: {
        $$checkboxSize: '$space$10'
      },
      xl: {
        $$checkboxSize: '$space$11'
      }
    },
    row: {
      true: {
        flexDirection: 'row',
        mt: 0,
        [`& ${StyledCheckboxLabel}`]: {
          mr: '$$checkboxSize'
        }
      },
      false: {
        mr: 0,
        flexDirection: 'column',
        [`& ${StyledCheckboxLabel}`]: {
          mt: '$$checkboxSize'
        }
      }
    }
  },
  defaultVariants: {
    row: false
  }
}); // types
;// CONCATENATED MODULE: ./src/checkbox/checkbox.tsx
var checkbox_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/checkbox/checkbox.tsx";








const checkbox_defaultProps = {
  value: '',
  size: 'md',
  color: 'default',
  labelColor: 'default',
  disabled: false,
  preventDefault: true,
  initialChecked: false,
  indeterminate: false,
  rounded: false,
  line: false,
  animated: true,
  className: ''
};

const Checkbox = ({
  checked,
  initialChecked,
  line,
  rounded,
  indeterminate,
  disabled,
  onChange,
  size,
  className,
  children,
  label,
  color,
  labelColor,
  animated,
  value,
  preventDefault,
  ...props
}) => {
  const [selfChecked, setSelfChecked] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialChecked);
  const {
    color: groupColor,
    labelColor: labelGroupColor,
    size: groupSize,
    updateState,
    inGroup,
    disabledAll,
    values
  } = useCheckbox();
  const isDisabled = inGroup ? disabledAll || disabled : disabled;
  const checkboxColor = color !== 'default' ? color : groupColor;
  const checkboxSize = size !== 'md' ? size : groupSize;
  const textColor = labelColor !== 'default' ? labelColor : labelGroupColor;

  if (__DEV__ && inGroup && checked) {
    src_use_warning('Remove props "checked" when [Checkbox] component is in the group.', 'Checkbox');
  }

  if (inGroup) {
    (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
      const next = values.includes(value);
      if (next === selfChecked) return;
      setSelfChecked(next);
    }, [values.join(',')]);
  }

  const changeHandle = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(ev => {
    if (isDisabled) return;
    const selfEvent = {
      target: {
        checked: !selfChecked
      },
      stopPropagation: ev.stopPropagation,
      preventDefault: ev.preventDefault,
      nativeEvent: ev
    };

    if (inGroup && updateState) {
      updateState && updateState(value, !selfChecked);
    }

    setSelfChecked(!selfChecked);
    onChange && onChange(selfEvent);
  }, [updateState, onChange, isDisabled, selfChecked]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (checked === undefined) return;
    setSelfChecked(checked);
  }, [checked]);
  const {
    bindings
  } = src_use_keyboard(event => {
    changeHandle(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return selfChecked && indeterminate ? 'mixed' : selfChecked ? 'checked' : 'uncheked';
  }, [selfChecked, indeterminate]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxLabel, {
    size: checkboxSize,
    disabled: isDisabled,
    animated: animated,
    className: clsx('nextui-checkbox-label', `nextui-checkbox--${getState}`, className),
    css: props.css,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxContainer, {
      className: "nextui-checkbox-container",
      tabIndex: isDisabled ? -1 : 0,
      color: checkboxColor,
      rounded: rounded,
      disabled: isDisabled,
      animated: animated,
      ...bindings,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxInput, {
        type: "checkbox",
        className: "nextui-checkbox-input",
        tabIndex: -1,
        "data-state": getState,
        disabled: isDisabled,
        checked: selfChecked,
        "aria-checked": selfChecked && indeterminate ? 'mixed' : selfChecked,
        "aria-disabled": isDisabled,
        onChange: changeHandle,
        ...props
      }, void 0, false, {
        fileName: checkbox_jsxFileName,
        lineNumber: 188,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxMask, {
        checked: selfChecked,
        animated: animated,
        className: "nextui-checkbox-mask",
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledIconCheck, {
          size: checkboxSize,
          indeterminate: indeterminate,
          checked: selfChecked,
          animated: animated,
          className: "nextui-icon-check",
          children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledIconCheckFirstLine, {
            indeterminate: indeterminate,
            checked: selfChecked,
            animated: animated,
            className: "nextui-icon-check-line1"
          }, void 0, false, {
            fileName: checkbox_jsxFileName,
            lineNumber: 212,
            columnNumber: 13
          }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledIconCheckSecondLine, {
            indeterminate: indeterminate,
            checked: selfChecked,
            animated: animated,
            className: "nextui-icon-check-line2"
          }, void 0, false, {
            fileName: checkbox_jsxFileName,
            lineNumber: 218,
            columnNumber: 13
          }, undefined)]
        }, void 0, true, {
          fileName: checkbox_jsxFileName,
          lineNumber: 205,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: checkbox_jsxFileName,
        lineNumber: 200,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: checkbox_jsxFileName,
      lineNumber: 179,
      columnNumber: 7
    }, undefined), (children || label) && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxText, {
      className: "nextui-checkbox-text",
      color: textColor,
      line: line,
      checked: selfChecked,
      disabled: isDisabled,
      animated: animated,
      children: children || label
    }, void 0, false, {
      fileName: checkbox_jsxFileName,
      lineNumber: 228,
      columnNumber: 11
    }, undefined)]
  }, void 0, true, {
    fileName: checkbox_jsxFileName,
    lineNumber: 168,
    columnNumber: 5
  }, undefined);
};

Checkbox.defaultProps = checkbox_defaultProps;

Checkbox.toString = () => '.nextui-checkbox';

if (__DEV__) {
  Checkbox.displayName = 'NextUI - Checkbox';
}

/* harmony default export */ const checkbox_checkbox = (Checkbox);
;// CONCATENATED MODULE: ./src/checkbox/checkbox-group.tsx
var checkbox_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/checkbox/checkbox-group.tsx";







const checkbox_group_defaultProps = {
  color: 'default',
  labelColor: 'default',
  disabled: false,
  size: 'md'
};

const CheckboxGroup = ({
  color,
  labelColor,
  disabled,
  onChange,
  value,
  size,
  children,
  className,
  style,
  ...props
}) => {
  const [selfVal, setSelfVal] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)([]);

  if (!value && __DEV__) {
    value = [];
    src_use_warning('Props "value" is required.', 'Checkbox Group');
  }

  const updateState = (val, checked) => {
    const removed = selfVal.filter(v => v !== val);
    const next = checked ? [...removed, val] : removed;
    setSelfVal(next);
    onChange && onChange(next);
  };

  const providerValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return {
      updateState,
      color,
      labelColor,
      size,
      disabledAll: disabled,
      inGroup: true,
      values: selfVal
    };
  }, [disabled, selfVal]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    setSelfVal(value);
  }, [value.join(',')]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(CheckboxContext.Provider, {
    value: providerValue,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxGroup, {
      role: "group",
      size: size,
      ...props,
      children: children
    }, void 0, false, {
      fileName: checkbox_group_jsxFileName,
      lineNumber: 79,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: checkbox_group_jsxFileName,
    lineNumber: 78,
    columnNumber: 5
  }, undefined);
};

CheckboxGroup.toString = () => '.nextui-checkbox-group';

/* harmony default export */ const checkbox_group = (with_defaults(CheckboxGroup, checkbox_group_defaultProps));
;// CONCATENATED MODULE: ./src/checkbox/index.ts


checkbox_checkbox.Group = checkbox_group; // export styled components


/* harmony default export */ const src_checkbox = (checkbox_checkbox);
;// CONCATENATED MODULE: ./src/code/code.styles.ts

const StyledCode = styled('code', {});
const StyledPre = styled('pre', {
  width: 'initial',
  mw: '100'
});
;// CONCATENATED MODULE: ./src/code/code.tsx
var code_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/code/code.tsx";




const code_defaultProps = {
  block: false
};

const Code = ({
  block,
  children,
  ...props
}) => {
  if (!block) return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCode, { ...props,
    children: children
  }, void 0, false, {
    fileName: code_jsxFileName,
    lineNumber: 23,
    columnNumber: 22
  }, undefined);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPre, { ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCode, {
      children: children
    }, void 0, false, {
      fileName: code_jsxFileName,
      lineNumber: 26,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: code_jsxFileName,
    lineNumber: 25,
    columnNumber: 5
  }, undefined);
};

Code.toString = () => '.nextui-code';

const MemoCode = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Code);
/* harmony default export */ const code = (with_defaults(MemoCode, code_defaultProps));
;// CONCATENATED MODULE: ./src/code/index.ts


/* harmony default export */ const src_code = (code);
;// CONCATENATED MODULE: ./src/col/col.styles.ts

const StyledCol = styled('div', {
  float: 'left',
  boxSizing: 'border-box',
  pl: 'calc($$rowGap / 2)',
  pr: 'calc($$rowGap / 2)'
});
/* harmony default export */ const col_styles = (StyledCol);
;// CONCATENATED MODULE: ./src/col/col.tsx
var col_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/col/col.tsx";




const col_defaultProps = {
  span: 12,
  offset: 0
};

const Col = ({
  children,
  span,
  offset,
  css,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(col_styles, {
    css: {
      width: `${100 / 12 * span}%`,
      marginLeft: `${100 / 12 * offset}%`,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: col_jsxFileName,
    lineNumber: 33,
    columnNumber: 5
  }, undefined);
};

Col.toString = () => '.nextui-column';

const MemoCol = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Col);
/* harmony default export */ const col = (with_defaults(MemoCol, col_defaultProps));
;// CONCATENATED MODULE: ./src/col/index.ts


/* harmony default export */ const src_col = (col);
;// CONCATENATED MODULE: ./src/collapse/collapse.styles.ts

const StyledCollapse = styled('div', {
  transition: '$default',
  '.nextui-collapse-title-content': {
    w: '100%',
    'h1,h2,h3,h4,h5,h6,p,span,b': {
      margin: 0
    }
  },
  '.nextui-collapse-title-container': {
    d: 'flex',
    jc: 'space-between',
    ai: 'center'
  },
  '.nextui-collapse-title': {
    color: '$foreground'
  },
  '.nextui-collapse-subtitle': {
    color: '$accents5',
    margin: 0,
    '*': {
      margin: 0
    }
  },
  '.nextui-collapse-title-content-left': {
    mr: '$sm'
  },
  '.nextui-collapse-title-content-left, .nextui-collapse-title-content-right': {
    d: 'flex',
    ai: 'center'
  },
  '@motion': {
    transition: 'none',
    '.nextui-collapse-title-content-right ': {
      svg: {
        transition: 'none'
      }
    }
  },
  variants: {
    shadow: {
      true: {
        border: 'none',
        boxShadow: '$md',
        br: '$lg',
        p: '0 $lg',
        bg: '$background'
      }
    },
    borderWeight: {
      light: {
        $$collapseBorderWidth: '$borderWeights$light'
      },
      normal: {
        $$collapseBorderWidth: '$borderWeights$normal'
      },
      bold: {
        $$collapseBorderWidth: '$borderWeights$bold'
      },
      extrabold: {
        $$collapseBorderWidth: '$borderWeights$extrabold'
      },
      black: {
        $$collapseBorderWidth: '$borderWeights$black'
      }
    },
    divider: {
      true: {
        borderTop: '$$collapseBorderWidth solid $border',
        borderBottom: '$$collapseBorderWidth solid $border'
      }
    },
    bordered: {
      true: {
        br: '$lg',
        p: '0 $lg',
        border: '$$collapseBorderWidth solid $border'
      }
    },
    animated: {
      true: {
        '.nextui-collapse-title-content-right ': {
          svg: {
            transition: 'transform 200ms ease'
          }
        }
      },
      false: {
        transition: 'none'
      }
    },
    visible: {
      true: {
        '.nextui-collapse-title-content-right ': {
          svg: {
            transform: 'rotateZ(-90deg)'
          }
        }
      },
      false: {
        '.nextui-collapse-title-content-right': {
          svg: {
            transform: 'rotateZ(0deg)'
          }
        }
      }
    },
    isDark: {
      true: {}
    }
  },
  defaultVariants: {
    borderWeight: 'light'
  },
  compoundVariants: [// isDark && shadow
  {
    isDark: true,
    shadow: true,
    css: {
      bg: '$accents1'
    }
  }]
}, sharedFocus);
const StyledCollapseView = styled('div', {
  w: '100%',
  d: 'block',
  ta: 'left',
  bg: 'transparent',
  border: 'none',
  cursor: 'pointer',
  outline: 'none',
  padding: '$lg 0',
  variants: {
    disabled: {
      true: {
        cursor: 'not-allowed',
        '.nextui-collapse-title, .nextui-collapse-subtitle': {
          opacity: 0.5
        }
      }
    }
  }
});
const StyledCollapseContent = styled('div', {
  fontSize: '$base',
  lineHeight: '$lg',
  pb: '$lg',
  '*:first-child': {
    mt: 0
  },
  '*:last-child': {
    mb: 0
  }
});
const StyledCollapseIcon = styled('svg', {
  path: {
    stroke: '$accents5'
  }
});
const StyledCollapseGroup = styled('div', {
  width: 'auto',
  padding: '0 $sm',
  'div + div': {
    borderTop: 'none'
  },
  [`& ${StyledCollapse}:first-child`]: {
    borderTop: 'none'
  },
  [`& ${StyledCollapse}:last-child`]: {
    borderBottom: 'none'
  },
  variants: {
    borderWeight: {
      light: {
        $$collapseGroupBorderWidth: '$borderWeights$light'
      },
      normal: {
        $$collapseGroupBorderWidth: '$borderWeights$normal'
      },
      bold: {
        $$collapseGroupBorderWidth: '$borderWeights$bold'
      },
      extrabold: {
        $$collapseGroupBorderWidth: '$borderWeights$extrabold'
      },
      black: {
        $$collapseGroupBorderWidth: '$borderWeights$black'
      }
    },
    shadow: {
      true: {
        br: '$lg',
        border: 'none',
        boxShadow: '$md',
        p: '0 $lg',
        bg: '$background'
      }
    },
    bordered: {
      true: {
        br: '$lg',
        p: '0 $lg',
        border: '$$collapseGroupBorderWidth solid $border'
      }
    },
    splitted: {
      true: {
        [`& ${StyledCollapse}`]: {
          br: '$lg',
          border: 'none',
          bg: '$background',
          boxShadow: '$md',
          p: '0 $lg',
          margin: '$md 0'
        }
      }
    },
    isDark: {
      true: {}
    }
  },
  defaultVariants: {
    borderWeight: 'light',
    shadow: false,
    bordered: false,
    splitted: false
  },
  compoundVariants: [// isDark && shadow
  {
    isDark: true,
    shadow: true,
    css: {
      bg: '$accents1'
    }
  }, // splitted && isDark
  {
    isDark: true,
    splitted: true,
    css: {
      [`& ${StyledCollapse}`]: {
        bg: '$accents1'
      }
    }
  }]
});
;// CONCATENATED MODULE: ./src/collapse/collapse-icon.tsx
var collapse_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/collapse/collapse-icon.tsx";




const CollapseIcon = ({ ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseIcon, {
    role: "presentation",
    focusable: "false",
    className: "nextui-collapse-icon",
    width: "20",
    height: "20",
    fill: "none",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg",
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M15.5 19l-7-7 7-7",
      strokeWidth: 1.5,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }, void 0, false, {
      fileName: collapse_icon_jsxFileName,
      lineNumber: 20,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: collapse_icon_jsxFileName,
    lineNumber: 9,
    columnNumber: 5
  }, undefined);
};

CollapseIcon.toString = () => '.nextui-collapse-icon';

const MemoCollapseIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(CollapseIcon);
/* harmony default export */ const collapse_icon = (MemoCollapseIcon);
;// CONCATENATED MODULE: ./src/utils/expand.tsx
var expand_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/utils/expand.tsx";





const expand_defaultProps = {
  isExpanded: false,
  animated: true,
  delay: 200
};
const StyledExpand = styled('div', {
  p: 0,
  m: 0,
  h: 0,
  opacity: 0,
  overflow: 'hidden',
  variants: {
    expanded: {
      true: {
        opacity: 1
      }
    }
  }
});

const Expand = ({
  isExpanded,
  delay,
  animated,
  css,
  children
}) => {
  const [height, setHeight] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isExpanded ? 'auto' : '0');
  const [selfExpanded, setSelfExpanded] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isExpanded);
  const contentRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const entryTimer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const leaveTimer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const resetTimer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const [state, updateShape] = src_use_real_shape(contentRef);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => setHeight(`${state.height}px`), [state.height]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isExpanded === selfExpanded) return; // show element or reset height.
    // force an update once manually, even if the element does not change.
    // (the height of the element might be "auto")

    if (!isExpanded) {
      updateShape();
      setHeight(`${state.height}px`);
    } // show expand animation


    entryTimer.current = window.setTimeout(() => {
      setSelfExpanded(isExpanded);
      clearTimeout(entryTimer.current);
    }, 30); // Reset height after animation

    if (isExpanded) {
      resetTimer.current = window.setTimeout(() => {
        setHeight('auto');
        clearTimeout(resetTimer.current);
      }, delay);
    } else {
      leaveTimer.current = window.setTimeout(() => {
        clearTimeout(leaveTimer.current);
      }, delay / 2);
    }

    return () => {
      clearTimeout(entryTimer.current);
      clearTimeout(leaveTimer.current);
      clearTimeout(resetTimer.current);
    };
  }, [isExpanded]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledExpand, {
    expanded: selfExpanded,
    css: {
      height: selfExpanded ? height : '0',
      transition: animated ? `height ${delay}ms ease 0ms,
    opacity ${delay * 1.5}ms ease 0ms;` : 'none',
      ...css
    },
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
      ref: contentRef,
      className: "nextui-expand-content",
      children: children
    }, void 0, false, {
      fileName: expand_jsxFileName,
      lineNumber: 99,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: expand_jsxFileName,
    lineNumber: 88,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ const utils_expand = (with_defaults(Expand, expand_defaultProps));
;// CONCATENATED MODULE: ./src/collapse/collapse-context.ts

const collapse_context_defaultContext = {
  values: []
};
const CollapseContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(collapse_context_defaultContext);
const useCollapseContext = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(CollapseContext);
;// CONCATENATED MODULE: ./src/collapse/collapse.tsx
var collapse_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/collapse/collapse.tsx";













const collapse_defaultProps = {
  shadow: false,
  divider: true,
  bordered: false,
  showArrow: true,
  animated: true,
  disabled: false,
  preventDefault: true,
  expanded: false
};
const preClass = 'nextui-collapse';

const Collapse = ({
  children,
  title,
  subtitle,
  expanded,
  shadow,
  className,
  divider,
  arrowIcon,
  showArrow,
  disabled,
  onChange,
  bordered,
  contentLeft,
  preventDefault,
  animated: animatedProp,
  borderWeight,
  index,
  ...props
}) => {
  const [visible, setVisible, visibleRef] = src_use_current_state(expanded);
  const {
    isDark
  } = src_use_theme();
  const {
    values,
    divider: groupDivider,
    animated: groupAnimated,
    updateValues
  } = useCollapseContext();

  if (!title) {
    src_use_warning('"title" is required.', 'Collapse');
  }

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (visible !== expanded) {
      setVisible(expanded);
    }
  }, [expanded]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!values.length) return;
    const isActive = !!values.find(item => item === index);
    setVisible(isActive);
  }, [values.join(',')]);
  const ariaLabelledById = useId();
  const ariaControlId = useId();
  const arrowComponent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!showArrow) return null;
    return arrowIcon ? arrowIcon : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(collapse_icon, {}, void 0, false, {
      fileName: collapse_jsxFileName,
      lineNumber: 115,
      columnNumber: 36
    }, undefined);
  }, [arrowIcon, showArrow]);
  const withDivider = groupDivider === undefined ? divider : groupDivider;
  const animated = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return groupAnimated === undefined ? animatedProp : groupAnimated;
  }, [groupAnimated, animatedProp]);

  const handleChange = event => {
    if (disabled) return;
    const next = !visibleRef.current;
    setVisible(next);
    updateValues && updateValues(index, next);
    onChange && onChange(event, index, next);
  };

  const {
    bindings
  } = src_use_keyboard(event => {
    handleChange(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapse, {
    tabIndex: disabled ? -1 : 0,
    shadow: shadow,
    bordered: bordered,
    animated: animated,
    divider: withDivider,
    borderWeight: borderWeight,
    visible: visible,
    "data-state": getState,
    className: clsx(className, preClass, `${preClass}--${getState}`),
    isDark: isDark,
    ...props,
    ...bindings,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseView, {
      role: "button",
      tabIndex: -1,
      id: ariaLabelledById,
      className: `${preClass}-view`,
      "data-state": getState,
      disabled: disabled,
      "aria-disabled": disabled,
      "aria-expanded": visible,
      "aria-controls": ariaControlId,
      onClick: handleChange,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
        className: clsx(`${preClass}-title-container`),
        children: [contentLeft && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
          className: `${preClass}-title-content-left`,
          children: contentLeft
        }, void 0, false, {
          fileName: collapse_jsxFileName,
          lineNumber: 178,
          columnNumber: 13
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
          className: `${preClass}-title-content`,
          children: [/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(title) ? title : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("h3", {
            className: `${preClass}-title`,
            children: title
          }, void 0, false, {
            fileName: collapse_jsxFileName,
            lineNumber: 186,
            columnNumber: 15
          }, undefined), subtitle && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
            className: `${preClass}-subtitle`,
            children: subtitle
          }, void 0, false, {
            fileName: collapse_jsxFileName,
            lineNumber: 189,
            columnNumber: 15
          }, undefined)]
        }, void 0, true, {
          fileName: collapse_jsxFileName,
          lineNumber: 182,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
          className: `${preClass}-title-content-right`,
          children: arrowComponent
        }, void 0, false, {
          fileName: collapse_jsxFileName,
          lineNumber: 192,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: collapse_jsxFileName,
        lineNumber: 176,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: collapse_jsxFileName,
      lineNumber: 164,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(utils_expand, {
      isExpanded: visible,
      animated: animated,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseContent, {
        role: "region",
        tabIndex: -1,
        id: ariaControlId,
        "aria-labelledby": ariaLabelledById,
        className: `${preClass}-content`,
        children: children
      }, void 0, false, {
        fileName: collapse_jsxFileName,
        lineNumber: 198,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: collapse_jsxFileName,
      lineNumber: 197,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: collapse_jsxFileName,
    lineNumber: 150,
    columnNumber: 5
  }, undefined);
};

Collapse.toString = () => '.nextui-collapse';

/* harmony default export */ const collapse = (with_defaults(Collapse, collapse_defaultProps));
;// CONCATENATED MODULE: ./src/collapse/collapse-group.tsx
var collapse_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/collapse/collapse-group.tsx";









const collapse_group_defaultProps = {
  accordion: true
};

const CollapseGroup = ({
  children,
  accordion,
  animated,
  divider,
  onChange,
  ...props
}) => {
  const [state, setState, stateRef] = src_use_current_state([]);
  const {
    isDark
  } = src_use_theme();

  const updateValues = (currentIndex, nextState) => {
    const hasChild = stateRef.current.find(val => val === currentIndex);
    onChange && onChange(currentIndex, nextState);

    if (accordion) {
      if (nextState) return setState([currentIndex]);
      return setState([]);
    }

    if (nextState) {
      // In a few cases, the user will set Collapse Component state manually.
      // If the user incorrectly set the state, Group component should ignore it.

      /* istanbul ignore if */
      if (hasChild) return;
      return setState([...stateRef.current, currentIndex]);
    }

    setState(stateRef.current.filter(item => item !== currentIndex));
  };

  const initialValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    values: state,
    updateValues,
    divider,
    animated
  }), [state.join(',')]);
  const hasIndexChildren = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => setChildrenIndex(children, [collapse]), [children]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(CollapseContext.Provider, {
    value: initialValue,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseGroup, {
      isDark: isDark,
      ...props,
      children: hasIndexChildren
    }, void 0, false, {
      fileName: collapse_group_jsxFileName,
      lineNumber: 79,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: collapse_group_jsxFileName,
    lineNumber: 78,
    columnNumber: 5
  }, undefined);
};

CollapseGroup.toString = () => '.nextui-collapse-group';

/* harmony default export */ const collapse_group = (with_defaults(CollapseGroup, collapse_group_defaultProps));
;// CONCATENATED MODULE: ./src/collapse/index.ts


collapse.Group = collapse_group; // export styled components


/* harmony default export */ const src_collapse = (collapse);
;// CONCATENATED MODULE: ./src/container/container.styles.ts

const StyledContainer = styled('div', {
  w: '100%',
  mr: 'auto',
  ml: 'auto',
  variants: {
    fluid: {
      true: {
        maxWidth: '100%'
      }
    },
    responsive: {
      true: {
        '@xs': {
          maxWidth: '$breakpoints$xs'
        },
        '@sm': {
          maxWidth: '$breakpoints$sm'
        },
        '@md': {
          maxWidth: '$breakpoints$md'
        },
        '@lg': {
          maxWidth: '$breakpoints$lg'
        },
        '@xl': {
          maxWidth: '$breakpoints$xl'
        }
      }
    }
  },
  defaultVariants: {
    fluid: false,
    responsive: true
  }
});
/* harmony default export */ const container_styles = (StyledContainer);
;// CONCATENATED MODULE: ./src/container/container.tsx
var container_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/container/container.tsx";



const container_defaultProps = {
  gap: 2,
  xs: false,
  sm: false,
  md: false,
  lg: false,
  xl: false,
  responsive: true,
  fluid: false,
  wrap: 'wrap',
  as: 'div',
  display: 'block'
};

const Container = ({
  xs,
  sm,
  md,
  lg,
  xl,
  wrap,
  gap,
  as,
  display,
  justify,
  direction,
  alignItems,
  alignContent,
  children,
  responsive,
  fluid,
  css,
  ...props
}) => {
  const gapUnit = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return `calc(${gap} * $space$sm)`;
  }, [gap]);

  const getMaxWidth = () => {
    if (xs) return '$breakpoints$xs';
    if (sm) return '$breakpoints$sm';
    if (md) return '$breakpoints$md';
    if (lg) return '$breakpoints$lg';
    if (xl) return '$breakpoints$xl';
    return '';
  };

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(container_styles, {
    css: {
      px: gapUnit,
      maxWidth: getMaxWidth(),
      alignItems,
      alignContent,
      flexWrap: wrap,
      display: display,
      justifyContent: justify,
      flexDirection: direction,
      ...css
    },
    responsive: responsive,
    fluid: fluid,
    ...props,
    children: children
  }, void 0, false, {
    fileName: container_jsxFileName,
    lineNumber: 84,
    columnNumber: 5
  }, undefined);
};

Container.toString = () => '.nextui-container';

Container.defaultProps = container_defaultProps;
/* harmony default export */ const container = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Container));
;// CONCATENATED MODULE: ./src/container/index.ts


/* harmony default export */ const src_container = (container);
;// CONCATENATED MODULE: ./src/utils/dimensions.ts
const getMargin = num => {
  return `calc(${num * 15.25}pt + 1px * ${num - 1})`;
};
;// CONCATENATED MODULE: ./src/divider/divider.styles.ts

const StyledDivider = styled('div', {
  width: '100%',
  maxWidth: '100%',
  position: 'relative',
  variants: {
    color: {
      default: {
        bg: '$border'
      },
      primary: {
        bg: '$primary'
      },
      secondary: {
        bg: '$secondary'
      },
      success: {
        bg: '$success'
      },
      warning: {
        bg: '$warning'
      },
      error: {
        bg: '$error'
      }
    }
  },
  defaultVariants: {
    color: 'default'
  }
});
const StyledDividerText = styled('span', {
  position: 'absolute',
  left: '50%',
  top: '50%',
  minHeight: '100%',
  display: 'inline-flex',
  jc: 'center',
  ai: 'center',
  transform: 'translate(-50%, -50%)',
  padding: '0 $lg',
  fontSize: '$base',
  fontWeight: 'bold',
  textTransform: 'capitalize',
  backgroundColor: '$background',
  zIndex: '$1',
  variants: {
    color: {
      default: {
        color: '$text'
      },
      primary: {
        color: '$primary'
      },
      secondary: {
        color: '$secondary'
      },
      success: {
        color: '$success'
      },
      warning: {
        color: '$warning'
      },
      error: {
        color: '$error'
      }
    }
  }
});
;// CONCATENATED MODULE: ./src/divider/divider.tsx
var divider_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/divider/divider.tsx";





const divider_defaultProps = {
  x: 0,
  y: 0,
  height: 1,
  align: 'center'
};

const Divider = ({
  height,
  x,
  y,
  align,
  children,
  textColor,
  css,
  ...props
}) => {
  const alignCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!align || align === 'center') return '';

    if (align === 'left' || align === 'start') {
      return {
        transform: 'translateY(-50%)',
        left: '7%'
      };
    }

    return {
      transform: 'translateY(-50%)',
      left: 'auto',
      right: '7%'
    };
  }, [align]);
  const top = y ? getMargin(y / 2) : 0;
  const left = x ? getMargin(x / 2) : 0;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDivider, {
    role: "separator",
    css: {
      margin: `${top} ${left}`,
      height: `calc(${height} * 1px)`,
      ...css
    },
    ...props,
    children: children && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDividerText, {
      css: { ...alignCss
      },
      color: textColor,
      className: "nextui-divider-text",
      children: children
    }, void 0, false, {
      fileName: divider_jsxFileName,
      lineNumber: 68,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: divider_jsxFileName,
    lineNumber: 58,
    columnNumber: 5
  }, undefined);
};

Divider.toString = () => '.nextui-divider';

const MemoDivider = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Divider);
/* harmony default export */ const divider = (with_defaults(MemoDivider, divider_defaultProps));
;// CONCATENATED MODULE: ./src/divider/index.ts


/* harmony default export */ const src_divider = (divider);
;// CONCATENATED MODULE: ./src/grid/grid.styles.ts

const StyledGridContainer = styled('div', {});
const StyledGridItem = styled('div', {
  margin: 0,
  boxSizing: 'border-box',
  padding: '$$gridGapUnit'
});
;// CONCATENATED MODULE: ./src/grid/grid-item.tsx
var grid_item_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/grid/grid-item.tsx";





const grid_item_defaultProps = {
  xs: false,
  sm: false,
  md: false,
  lg: false,
  xl: false,
  className: ''
};

const getItemLayout = val => {
  const display = val === 0 ? 'none' : 'inherit';

  if (typeof val === 'number') {
    const width = 100 / 12 * val;
    const ratio = width > 100 ? '100%' : width < 0 ? '0' : `${width}%`;
    return {
      flexGrow: 0,
      display,
      maxWidth: ratio,
      flexBasis: ratio
    };
  }

  return {
    flexGrow: 1,
    display,
    maxWidth: '100%',
    flexBasis: '0'
  };
};

const GridItem = ({
  xs,
  sm,
  md,
  lg,
  xl,
  css,
  justify,
  direction,
  alignItems,
  alignContent,
  children,
  className,
  ...props
}) => {
  const classes = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const breaks = {
      xs,
      sm,
      md,
      lg,
      xl
    };
    const classString = Object.keys(breaks).reduce((pre, name) => {
      if (breaks[name] !== undefined && breaks[name] !== false) return `${pre} ${name}`;
      return pre;
    }, '');
    return classString.trim();
  }, [xs, sm, md, lg, xl]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledGridItem, {
    className: clsx('nextui-grid-item', classes, className),
    css: {
      alignItems,
      alignContent,
      justifyContent: justify,
      flexDirection: direction,
      '&.xs': { ...getItemLayout(xs)
      },
      '@xsMax': {
        '&.xs': { ...getItemLayout(xs)
        }
      },
      '@sm': {
        '&.sm': { ...getItemLayout(sm)
        }
      },
      '@md': {
        '&.md': { ...getItemLayout(md)
        }
      },
      '@lg': {
        '&.lg': { ...getItemLayout(lg)
        }
      },
      '@xl': {
        '&.xl': { ...getItemLayout(xl)
        }
      },
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: grid_item_jsxFileName,
    lineNumber: 97,
    columnNumber: 5
  }, undefined);
};

GridItem.toString = () => '.nextui-grid-item';

/* harmony default export */ const grid_item = (with_defaults(GridItem, grid_item_defaultProps));
;// CONCATENATED MODULE: ./src/grid/grid.tsx
var grid_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/grid/grid.tsx";




const Grid = ({
  children,
  css,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(grid_item, {
    css: { ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: grid_jsxFileName,
    lineNumber: 13,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ const grid = (Grid);
;// CONCATENATED MODULE: ./src/grid/grid-container.tsx
var grid_container_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/grid/grid-container.tsx";





const grid_container_defaultProps = {
  gap: 0,
  wrap: 'wrap',
  className: ''
};

const GridContainer = ({
  gap,
  wrap,
  css,
  children,
  className,
  ...props
}) => {
  const gapUnit = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return `calc(${gap} * $space$3)`;
  }, [gap]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(grid_item, {
    className: clsx('nextui-grid-container', className),
    css: {
      $$gridGapUnit: gapUnit,
      display: 'flex',
      flexWrap: wrap,
      boxZizing: 'border-box',
      margin: 'calc(-1 * $$gridGapUnit)',
      width: 'calc(100% + $$gridGapUnit * 2)',
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: grid_container_jsxFileName,
    lineNumber: 36,
    columnNumber: 5
  }, undefined);
};

GridContainer.toString = () => '.nextui-grid-container';

/* harmony default export */ const grid_container = (with_defaults(GridContainer, grid_container_defaultProps));
;// CONCATENATED MODULE: ./src/grid/index.ts



grid.Container = grid_container;
/* harmony default export */ const src_grid = (grid);
;// CONCATENATED MODULE: ./src/spacer/spacer.styles.ts

const StyledSpacer = styled('span', {
  size: '1px',
  variants: {
    inline: {
      true: {
        display: 'inline-block'
      },
      false: {
        display: 'block'
      }
    }
  },
  defaultVariants: {
    inline: false
  }
});
;// CONCATENATED MODULE: ./src/spacer/spacer.tsx
var spacer_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/spacer/spacer.tsx";





const spacer_defaultProps = {
  x: 1,
  y: 1
};

const Spacer = ({
  x,
  y,
  inline,
  css,
  ...props
}) => {
  const marginLeft = getMargin(x);
  const marginTop = getMargin(y);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpacer, {
    css: {
      marginLeft,
      marginTop,
      ...css
    },
    ...props
  }, void 0, false, {
    fileName: spacer_jsxFileName,
    lineNumber: 30,
    columnNumber: 5
  }, undefined);
};

Spacer.toString = () => '.nextui-spacer';

const MemoSpacer = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Spacer);
/* harmony default export */ const spacer = (with_defaults(MemoSpacer, spacer_defaultProps));
;// CONCATENATED MODULE: ./src/spacer/index.ts


/* harmony default export */ const src_spacer = (spacer);
// EXTERNAL MODULE: external {"root":"ReactDOM","commonjs2":"react-dom","commonjs":"react-dom","amd":"react-dom"}
var external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_ = __webpack_require__(156);
;// CONCATENATED MODULE: ./src/utils/css-transition.ts



const css_transition_defaultProps = {
  visible: false,
  enterTime: 60,
  leaveTime: 60,
  clearTime: 60,
  className: '',
  name: 'transition'
};

const CSSTransition = ({
  children,
  className,
  visible,
  enterTime,
  leaveTime,
  clearTime,
  name,
  ...props
}) => {
  const [classes, setClasses] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)('');
  const [renderable, setRenderable] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(visible);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const statusClassName = visible ? 'enter' : 'leave';
    const time = visible ? enterTime : leaveTime;

    if (visible && !renderable) {
      setRenderable(true);
    }

    setClasses(`${name}-${statusClassName}`); // set class to active

    const timer = setTimeout(() => {
      setClasses(`${name}-${statusClassName} ${name}-${statusClassName}-active`);
      clearTimeout(timer);
    }, time); // remove classess when animation over

    const clearClassesTimer = setTimeout(() => {
      if (!visible) {
        setClasses('');
        setRenderable(false);
      }

      clearTimeout(clearClassesTimer);
    }, time + clearTime);
    return () => {
      clearTimeout(timer);
      clearTimeout(clearClassesTimer);
    };
  }, [visible, renderable]);
  if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(children) || !renderable) return null;
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().cloneElement(children, { ...props,
    className: clsx(children.props.className, className, classes)
  });
};

/* harmony default export */ const css_transition = (with_defaults(CSSTransition, css_transition_defaultProps));
;// CONCATENATED MODULE: ./src/tooltip/placement.ts
const defaultRect = {
  top: -1000,
  left: -1000,
  right: -1000,
  bottom: -1000,
  width: 0,
  height: 0
};
const getRect = ref => {
  if (!ref || !ref.current) return defaultRect;
  const rect = ref.current.getBoundingClientRect();
  return { ...rect,
    width: rect.width || rect.right - rect.left,
    height: rect.height || rect.bottom - rect.top,
    top: rect.top + document.documentElement.scrollTop,
    bottom: rect.bottom + document.documentElement.scrollTop,
    left: rect.left + document.documentElement.scrollLeft,
    right: rect.right + document.documentElement.scrollLeft
  };
};
const defaultTooltipPlacement = {
  top: '-1000px',
  left: '-1000px',
  transform: 'none'
};
const getPlacement = (placement, rect, offset) => {
  const placements = {
    top: {
      top: `${rect.top - offset}px`,
      left: `${rect.left + rect.width / 2}px`,
      transform: 'translate(-50%, -100%)'
    },
    topStart: {
      top: `${rect.top - offset}px`,
      left: `${rect.left}px`,
      transform: 'translate(0, -100%)'
    },
    topEnd: {
      top: `${rect.top - offset}px`,
      left: `${rect.left + rect.width}px`,
      transform: 'translate(-100%, -100%)'
    },
    bottom: {
      top: `${rect.bottom + offset}px`,
      left: `${rect.left + rect.width / 2}px`,
      transform: 'translate(-50%, 0)'
    },
    bottomStart: {
      top: `${rect.bottom + offset}px`,
      left: `${rect.left}px`,
      transform: 'translate(0, 0)'
    },
    bottomEnd: {
      top: `${rect.bottom + offset}px`,
      left: `${rect.left + rect.width}px`,
      transform: 'translate(-100%, 0)'
    },
    left: {
      top: `${rect.top + rect.height / 2}px`,
      left: `${rect.left - offset}px`,
      transform: 'translate(-100%, -50%)'
    },
    leftStart: {
      top: `${rect.top}px`,
      left: `${rect.left - offset}px`,
      transform: 'translate(-100%, 0)'
    },
    leftEnd: {
      top: `${rect.top + rect.height}px`,
      left: `${rect.left - offset}px`,
      transform: 'translate(-100%, -100%)'
    },
    right: {
      top: `${rect.top + rect.height / 2}px`,
      left: `${rect.right + offset}px`,
      transform: 'translate(0, -50%)'
    },
    rightStart: {
      top: `${rect.top}px`,
      left: `${rect.right + offset}px`,
      transform: 'translate(0, 0)'
    },
    rightEnd: {
      top: `${rect.top + rect.height}px`,
      left: `${rect.right + offset}px`,
      transform: 'translate(0, -100%)'
    }
  };
  return placements[placement] || placements.top;
};
const getIconPlacement = (placement, offset) => {
  const placements = {
    top: {
      top: 'auto',
      right: 'auto',
      left: '50%',
      bottom: '0px',
      transform: 'translate(-50%, 100%) rotate(45deg)'
    },
    topStart: {
      top: 'auto',
      right: 'auto',
      left: '8%',
      bottom: '0px',
      transform: 'translate(8%, 100%) rotate(45deg)'
    },
    topEnd: {
      top: 'auto',
      right: '8%',
      left: 'auto',
      bottom: '0px',
      transform: 'translate(8%, 100%) rotate(45deg)'
    },
    bottom: {
      top: `0px`,
      right: 'auto',
      left: '50%',
      bottom: 'auto',
      transform: 'translate(-50%, -100%) rotate(225deg)'
    },
    bottomStart: {
      top: `0px`,
      right: 'auto',
      left: '8%',
      bottom: 'auto',
      transform: 'translate(8%, -100%) rotate(225deg)'
    },
    bottomEnd: {
      top: `0px`,
      right: '8%',
      left: 'auto',
      bottom: 'auto',
      transform: 'translate(8%, -100%) rotate(225deg)'
    },
    left: {
      top: '50%',
      right: `-${offset - 1}px`,
      left: 'auto',
      bottom: 'auto',
      transform: 'translate(100%, -50%) rotate(-45deg)'
    },
    leftStart: {
      top: 'calc(15% + 1px)',
      right: `-${offset - 1}px`,
      left: 'auto',
      bottom: 'auto',
      transform: 'translate(100%, 0) rotate(-45deg)'
    },
    leftEnd: {
      top: 'auto',
      right: `-${offset - 1}px`,
      left: 'auto',
      bottom: 'calc(15% + 1px)',
      transform: 'translate(100%, 0) rotate(-45deg)'
    },
    right: {
      top: '50%',
      right: 'auto',
      left: `-${offset - 1}px`,
      bottom: 'auto',
      transform: 'translate(-100%, -50%) rotate(135deg)'
    },
    rightStart: {
      top: 'calc(15% + 1px)',
      right: 'auto',
      left: `-${offset - 1}px`,
      bottom: 'auto',
      transform: 'translate(-100%, 0) rotate(135deg)'
    },
    rightEnd: {
      top: 'auto',
      right: 'auto',
      left: `-${offset - 1}px`,
      bottom: 'calc(15% + 1px)',
      transform: 'translate(-100%, 0) rotate(135deg)'
    }
  };
  return placements[placement] || placements.top;
};
;// CONCATENATED MODULE: ./src/tooltip/tooltip.styles.ts

const StyledTooltipTrigger = styled('div', {
  width: 'max-content',
  display: 'inherit'
});
const StyledTooltipArrow = styled('span', {
  display: 'none',
  content: '',
  size: '$5',
  zIndex: '-2',
  background: '$$tooltipColor',
  br: '0px 0px 2px 0px',
  position: 'absolute'
});
const StyledTooltip = styled('div', {
  position: 'relative',
  fs: '$xs',
  padding: 0,
  variants: {
    hideArrow: {
      false: {
        [`& ${StyledTooltipArrow}`]: {
          display: 'block'
        }
      }
    }
  }
});
const StyledTooltipContent = styled('div', {
  position: 'absolute',
  width: 'auto',
  padding: '$3 $sm',
  opacity: 0,
  zIndex: '$10',
  br: '$lg',
  '@motion': {
    transition: 'none'
  },
  variants: {
    color: {
      default: {
        $$tooltipColor: '$colors$background',
        bg: '$$tooltipColor'
      },
      primary: {
        $$tooltipColor: '$colors$primary',
        bg: '$$tooltipColor'
      },
      secondary: {
        $$tooltipColor: '$colors$secondary',
        bg: '$$tooltipColor'
      },
      success: {
        $$tooltipColor: '$colors$success',
        bg: '$$tooltipColor'
      },
      warning: {
        $$tooltipColor: '$colors$warning',
        bg: '$$tooltipColor'
      },
      error: {
        $$tooltipColor: '$colors$error',
        bg: '$$tooltipColor'
      },
      invert: {
        $$tooltipColor: '$colors$foreground',
        $$tooltipTextColor: '$colors$background',
        bg: '$$tooltipColor'
      }
    },
    contentColor: {
      default: {
        $$tooltipTextColor: '$colors$text',
        color: '$$tooltipTextColor'
      },
      primary: {
        $$tooltipTextColor: '$colors$primary',
        color: '$$tooltipTextColor'
      },
      secondary: {
        $$tooltipTextColor: '$colors$secondary',
        color: '$$tooltipTextColor'
      },
      success: {
        $$tooltipTextColor: '$colors$success',
        color: '$$tooltipTextColor'
      },
      warning: {
        $$tooltipTextColor: '$colors$warning',
        color: '$$tooltipTextColor'
      },
      error: {
        $$tooltipTextColor: '$colors$error',
        color: '$$tooltipTextColor'
      }
    },
    rounded: {
      true: {
        br: '$pill'
      }
    },
    shadow: {
      true: {
        bs: '$md'
      }
    },
    animated: {
      true: {
        transition: 'opacity 0.25s ease 0s, top 0.25s ease 0s'
      },
      false: {
        transition: 'none'
      }
    }
  },
  compoundVariants: [// color='primary' && contentColor='default'
  {
    color: 'primary',
    contentColor: 'default',
    css: {
      $$tooltipTextColor: '$colors$white'
    }
  }, // color='secondary' && contentColor='default'
  {
    color: 'secondary',
    contentColor: 'default',
    css: {
      $$tooltipTextColor: '$colors$white'
    }
  }, // color='success' && contentColor='default'
  {
    color: 'success',
    contentColor: 'default',
    css: {
      $$tooltipTextColor: '$colors$white'
    }
  }, // color='error' && contentColor='default'
  {
    color: 'error',
    contentColor: 'default',
    css: {
      $$tooltipTextColor: '$colors$white'
    }
  }],
  defaultVariants: {
    color: 'default',
    contentColor: 'default'
  }
});
;// CONCATENATED MODULE: ./src/tooltip/tooltip-content.tsx
var tooltip_content_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/tooltip/tooltip-content.tsx";











const tooltip_content_defaultProps = {
  placement: 'top',
  offset: 12,
  className: ''
};
const tooltip_content_preClass = 'nextui-tooltip';

const TooltipContent = ({
  children,
  parent,
  visible,
  offset,
  placement,
  rounded,
  animated,
  className,
  hideArrow,
  css,
  ...props
}) => {
  const el = src_use_portal('tooltip');
  const selfRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [rect, setRect] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultTooltipPlacement);
  if (!parent) return null;

  const updateRect = () => {
    const pos = getPlacement(placement, getRect(parent), offset);
    setRect(pos);
  };

  const {
    transform,
    top,
    left,
    right,
    bottom
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => getIconPlacement(placement, 5), [placement]);
  src_use_resize(updateRect);
  src_use_click_anywhere(() => updateRect());
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    updateRect();
  }, [visible]);

  const preventHandler = event => {
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
  };

  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  if (!el) return null;
  return /*#__PURE__*/(0,external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_.createPortal)( /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
    name: `${tooltip_content_preClass}-wrapper`,
    visible: visible,
    enterTime: 20,
    leaveTime: 20,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltipContent, {
      className: clsx(`${tooltip_content_preClass}-content`, `${tooltip_content_preClass}--${getState}`, className),
      "data-state": getState,
      ref: selfRef,
      onClick: preventHandler,
      animated: animated,
      css: {
        left: rect.left,
        top: `calc(${rect.top} + 6px)`,
        transform: rect.transform,
        [`&.${tooltip_content_preClass}-wrapper-enter-active`]: {
          opacity: 1,
          top: rect.top
        },
        ...css
      },
      ...props,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltip, {
        role: "tooltip",
        "data-state": getState,
        hideArrow: hideArrow,
        className: clsx(tooltip_content_preClass, {
          [`${tooltip_content_preClass}--with-arrow`]: !hideArrow
        }),
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltipArrow, {
          className: `${tooltip_content_preClass}-arrow`,
          css: {
            left,
            top,
            right,
            bottom,
            transform
          }
        }, void 0, false, {
          fileName: tooltip_content_jsxFileName,
          lineNumber: 140,
          columnNumber: 11
        }, undefined), children]
      }, void 0, true, {
        fileName: tooltip_content_jsxFileName,
        lineNumber: 132,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: tooltip_content_jsxFileName,
      lineNumber: 110,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: tooltip_content_jsxFileName,
    lineNumber: 104,
    columnNumber: 5
  }, undefined), el);
};

TooltipContent.toString = () => '.nextui-tooltip-content';

/* harmony default export */ const tooltip_content = (with_defaults(TooltipContent, tooltip_content_defaultProps));
;// CONCATENATED MODULE: ./src/tooltip/tooltip.tsx
var tooltip_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/tooltip/tooltip.tsx";






const tooltip_defaultProps = {
  initialVisible: false,
  hideArrow: false,
  animated: true,
  shadow: true,
  rounded: false,
  keepMounted: false,
  trigger: 'hover',
  enterDelay: 0,
  leaveDelay: 0,
  className: '',
  portalClassName: '',
  onVisibleChange: () => {}
};

const Tooltip = ({
  children,
  initialVisible,
  content,
  offset,
  placement,
  portalClassName,
  enterDelay,
  leaveDelay,
  trigger,
  rounded,
  animated,
  shadow,
  className,
  color,
  contentColor,
  onVisibleChange,
  hideArrow,
  css,
  triggerCss,
  onClick,
  keepMounted,
  visible: customVisible,
  ...props
}) => {
  const timer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [visible, setVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialVisible);
  const contentProps = {
    animated,
    visible,
    css,
    shadow,
    offset,
    placement,
    rounded,
    color,
    contentColor,
    hideArrow,
    parent: ref,
    className: portalClassName
  };

  const changeVisible = nextState => {
    const clear = () => {
      clearTimeout(timer.current);
      timer.current = undefined;
    };

    const handler = nextState => {
      setVisible(nextState);
      onVisibleChange(nextState);
      clear();
    };

    clear();

    if (nextState) {
      timer.current = window.setTimeout(() => handler(true), enterDelay);
      return;
    }

    timer.current = window.setTimeout(() => handler(false), leaveDelay);
  };

  const mouseEventHandler = next => {
    trigger === 'hover' && changeVisible(next);
  };

  const clickEventHandler = () => {
    trigger === 'click' && changeVisible(!visible);
    onClick == null ? void 0 : onClick();
  };

  src_use_click_away(ref, () => trigger === 'click' && !keepMounted && changeVisible(false));
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (customVisible === undefined) return;
    changeVisible(customVisible);
  }, [customVisible]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltipTrigger, {
    ref: ref,
    role: "button",
    tabIndex: -1,
    className: `nextui-tooltip-button ${className}`,
    onClick: clickEventHandler,
    onKeyUp: () => mouseEventHandler(true),
    onMouseEnter: () => mouseEventHandler(true),
    onMouseLeave: () => mouseEventHandler(false),
    onFocus: () => mouseEventHandler(true),
    onBlur: () => mouseEventHandler(false),
    css: { ...triggerCss
    },
    ...props,
    children: [children, /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(tooltip_content, { ...contentProps,
      children: content
    }, void 0, false, {
      fileName: tooltip_jsxFileName,
      lineNumber: 160,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: tooltip_jsxFileName,
    lineNumber: 143,
    columnNumber: 5
  }, undefined);
};

Tooltip.toString = () => '.nextui-tooltip';

/* harmony default export */ const tooltip = (with_defaults(Tooltip, tooltip_defaultProps));
;// CONCATENATED MODULE: ./src/tooltip/index.ts


/* harmony default export */ const src_tooltip = (tooltip);
;// CONCATENATED MODULE: ./src/snippet/snippet.styles.ts

const StyledSnippet = styled('div', {
  display: 'flex',
  position: 'relative',
  width: 'initial',
  maxWidth: '100%',
  padding: 'calc($space$lg * 0.75) $space$lg',
  br: '$lg',
  bg: '$background',
  variants: {
    color: {
      default: {
        $$snippetBorderColor: '$border',
        $$snippetBgColor: '$background',
        color: '$text'
      },
      primary: {
        $$snippetBorderColor: '$border',
        $$snippetBgColor: '$primary',
        color: '$text'
      },
      success: {
        $$snippetBorderColor: '$success',
        $$snippetBgColor: '$background',
        color: '$success'
      },
      warning: {
        $$snippetBorderColor: '$warning',
        $$snippetBgColor: '$background',
        color: '$warning'
      },
      error: {
        $$snippetBorderColor: '$error',
        $$snippetBgColor: '$background',
        color: '$error'
      },
      secondary: {
        $$snippetBorderColor: '$secondary',
        $$snippetBgColor: '$background',
        color: '$secondary'
      },
      invert: {
        $$snippetBorderColor: '$foreground',
        $$snippetBgColor: '$foreground',
        color: '$background'
      }
    },
    borderWeight: {
      light: {
        $$borderWeight: '$light'
      },
      normal: {
        $$borderWeight: '$normal'
      },
      bold: {
        $$borderWeight: '$bold'
      },
      extrabold: {
        $$borderWeight: '$extrabold'
      },
      black: {
        $$borderWeight: '$black'
      }
    },
    bordered: {
      true: {
        border: '$$borderWeight solid $$snippetBorderColor'
      }
    },
    filled: {
      true: {
        backgroundColor: '$$snippetBgColor'
      }
    }
  },
  defaultVariants: {
    color: 'default',
    borderWeight: 'normal',
    filled: false
  }
});
const StyledSnippetPre = styled('pre', {
  margin: 0,
  padding: 0,
  border: 'none',
  br: 0,
  bgColor: 'transparent',
  color: 'inherit',
  fontSize: '$xs',
  '*': {
    margin: 0,
    padding: 0,
    fontSize: 'inherit',
    color: 'inherit'
  },
  variants: {
    withCopyButton: {
      true: {
        width: 'calc(100% - 2 * $lg)'
      },
      false: {
        width: '100%'
      }
    }
  }
});
const StyledSnippetCopyButtonIcon = styled('svg', {});
const StyledSnippetCopyButton = styled('button', {
  display: 'inline-flex',
  jc: 'center',
  border: 'none',
  ai: 'flex-start',
  bg: 'transparent',
  width: 'calc(2 * $space$lg)',
  br: '$xs',
  color: 'inherit',
  transition: 'opacity 0.2s ease 0s',
  cursor: 'pointer',
  us: 'none',
  '@motion': {
    transition: 'none'
  },
  '&:hover': {
    opacity: '0.7'
  },
  [`& ${StyledSnippetCopyButtonIcon}`]: {
    path: {
      fill: '$accents6'
    }
  }
}, sharedFocus);
;// CONCATENATED MODULE: ./src/snippet/snippet-icon.tsx
var snippet_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/snippet/snippet-icon.tsx";




const snippet_icon_defaultProps = {
  width: 18,
  height: 18
};

const Copy = ({
  size,
  fill,
  width,
  height,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetCopyButtonIcon, {
    xmlns: "http://www.w3.org/2000/svg",
    width: size || width,
    height: size || height,
    viewBox: "0 0 24 24",
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      fill: fill,
      d: "M20 2H10c-1.103 0-2 .897-2 2v4H4c-1.103 0-2 .897-2 2v10c0 1.103.897 2 2 2h10c1.103 0 2-.897 2-2v-4h4c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2zM4 20V10h10l.002 10H4zm16-6h-4v-4c0-1.103-.897-2-2-2h-4V4h10v10z"
    }, void 0, false, {
      fileName: snippet_icon_jsxFileName,
      lineNumber: 33,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: snippet_icon_jsxFileName,
    lineNumber: 26,
    columnNumber: 5
  }, undefined);
};

Copy.toString = () => '.nextui-snippet-copy-icon';

const MemoCopy = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_.memo(Copy);
/* harmony default export */ const snippet_icon = (with_defaults(MemoCopy, snippet_icon_defaultProps));
;// CONCATENATED MODULE: ./src/snippet/snippet.tsx
var snippet_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/snippet/snippet.tsx";








const snippet_defaultProps = {
  symbol: '$',
  showTooltip: true,
  copy: 'default',
  tooltipColor: 'default',
  tooltipCopyText: 'Copy',
  tooltipCopiedText: 'Copied'
};

const textArrayToString = text => {
  return text.reduce((pre, current) => {
    if (!current) return pre;
    return pre ? `${pre}\n${current}` : current;
  }, '');
};

const Snippet = ({
  bordered,
  children,
  symbol,
  showTooltip,
  text,
  tooltipCopyText,
  tooltipCopiedText,
  tooltipColor,
  copy: copyType,
  ...props
}) => {
  const [copied, setCopied] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const {
    copy
  } = src_use_clipboard();
  const ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const isMultiLine = text && Array.isArray(text);
  const showCopyIcon = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => copyType !== 'prevent', [copyType]);
  const childText = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isMultiLine) return textArrayToString(text);
    if (!children) return text;
    if (!ref.current) return '';
    return ref.current.textContent;
  }, [ref.current, children, text]);
  const symbolBefore = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const str = symbol.trim();
    return str ? `${str} ` : '';
  }, [symbol]);

  const clickHandler = () => {
    if (!childText || !showCopyIcon) return;
    copy(childText);
    if (copyType === 'slient') return;
    setCopied(true);
  };

  const handleTooltipVisibleChange = () => {
    setTimeout(() => {
      setCopied(false);
    }, 300);
  };

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippet, { ...props,
    children: [isMultiLine ? text.map((t, index) => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetPre, {
      css: {
        '&:before': {
          content: symbolBefore,
          us: 'none'
        }
      },
      className: "nextui-snippet-pre",
      children: t
    }, `${index}-${t}`, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 98,
      columnNumber: 11
    }, undefined)) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetPre, {
      css: {
        '&:before': {
          content: symbolBefore,
          us: 'none'
        }
      },
      className: "nextui-snippet-pre",
      ref: ref,
      children: children || text
    }, void 0, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 112,
      columnNumber: 9
    }, undefined), showCopyIcon && copyType !== 'slient' ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_tooltip, {
      hideArrow: true,
      rounded: true,
      color: tooltipColor,
      content: copied ? tooltipCopiedText : tooltipCopyText,
      onVisibleChange: handleTooltipVisibleChange,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetCopyButton, {
        className: "nextui-snippet-copy-button",
        onClick: clickHandler,
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(snippet_icon, {}, void 0, false, {
          fileName: snippet_jsxFileName,
          lineNumber: 137,
          columnNumber: 13
        }, undefined)
      }, void 0, false, {
        fileName: snippet_jsxFileName,
        lineNumber: 133,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 126,
      columnNumber: 9
    }, undefined) : copyType !== 'prevent' && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetCopyButton, {
      className: "nextui-snippet-copy-button",
      onClick: clickHandler,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(snippet_icon, {}, void 0, false, {
        fileName: snippet_jsxFileName,
        lineNumber: 146,
        columnNumber: 13
      }, undefined)
    }, void 0, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 142,
      columnNumber: 11
    }, undefined)]
  }, void 0, true, {
    fileName: snippet_jsxFileName,
    lineNumber: 95,
    columnNumber: 5
  }, undefined);
};

if (__DEV__) {
  Snippet.displayName = 'NextUI - Snippet';
}

Snippet.toString = () => '.nextui-snippet';

const MemoSnippet = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Snippet);
/* harmony default export */ const snippet = (with_defaults(MemoSnippet, snippet_defaultProps));
;// CONCATENATED MODULE: ./src/snippet/index.ts


/* harmony default export */ const src_snippet = (snippet);
;// CONCATENATED MODULE: ./src/row/row.styles.ts

const StyledRow = styled('div', {
  display: 'flex',
  position: 'relative',
  boxSizing: 'border-box',
  variants: {
    fluid: {
      true: {
        width: '100%'
      }
    }
  },
  defaultVariants: {
    fluid: true
  }
});
/* harmony default export */ const row_styles = (StyledRow);
;// CONCATENATED MODULE: ./src/row/row.tsx
var row_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/row/row.tsx";




const row_defaultProps = {
  gap: 0,
  wrap: 'nowrap',
  justify: 'flex-start',
  align: 'flex-start'
};

const Row = ({
  children,
  gap,
  justify,
  align,
  wrap,
  css,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(row_styles, {
    css: {
      flexWrap: wrap,
      $$rowGap: `calc(${gap} * $space$lg)`,
      marginLeft: `calc(${gap} * $space$lg / 2)`,
      marginRight: `calc(${gap} * $space$lg / 2)`,
      justifyContent: justify,
      alignItems: align,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: row_jsxFileName,
    lineNumber: 37,
    columnNumber: 5
  }, undefined);
};

Row.toString = () => '.nextui-row';

const MemoRow = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Row);
/* harmony default export */ const row = (with_defaults(MemoRow, row_defaultProps));
;// CONCATENATED MODULE: ./src/row/index.ts


/* harmony default export */ const src_row = (row);
;// CONCATENATED MODULE: ./src/utils/color.ts

const getCssVar = name => {
  if (typeof document !== 'undefined' || !name) {
    const property = isCssVar(name) ? name.replace('var(', '').replace(')', '') : `--${name}`;
    return getComputedStyle(document.documentElement).getPropertyValue(property);
  }

  return '';
};
const isCssVar = property => {
  return property && (property == null ? void 0 : property.indexOf('var(')) === 0 ? true : false;
};
/**
 * This function allows validate if a string is a hexadecimal
 * value
 * @param str [string] hexadecimal value
 * @returns result [boolean]
 */

const isHex = str => {
  const exp = /#[a-fA-F0-9]{3,6}/g;
  return exp.test(str);
};
/**
 *
 * @param hex [string]
 * @param alpha [number]
 * @returns [string]
 */

const hexToRGBA = (hex, alpha = 1) => {
  let r = 0,
      g = 0,
      b = 0; // 3 digits

  if (hex.length == 4) {
    r = '0x' + hex[1] + hex[1];
    g = '0x' + hex[2] + hex[2];
    b = '0x' + hex[3] + hex[3]; // 6 digits
  } else if (hex.length == 7) {
    r = '0x' + hex[1] + hex[2];
    g = '0x' + hex[3] + hex[4];
    b = '0x' + hex[5] + hex[6];
  }

  return `rgba(${+r}, ${+g},${+b},${alpha})`;
};
const isNormalColor = color => {
  let found = normalColors.find(el => el === color);
  return found !== undefined && found !== null;
};
/**
 * Function that checks color name support in the current browser
 * @param strColor
 * @returns boolean
 */

const isColor = strColor => {
  let s = new Option().style;
  s.color = strColor;
  return s.color == strColor;
};
const hexToRgb = color => {
  const fullReg = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  const full = color.replace(fullReg, (_, r, g, b) => `${r}${r}${g}${g}${b}${b}`);
  const values = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(full);

  if (!values) {
    throw new Error(`Next UI: Unsupported ${color} color.`);
  }

  return [Number.parseInt(values[1], 16), Number.parseInt(values[2], 16), Number.parseInt(values[3], 16)];
};
const hexFromString = (str, defaultColor = '', returnLast = false) => {
  const fullReg = /#[a-fA-F0-9]{6}|#[a-fA-F0-9]{3}$/g;
  const hexCodes = str.match(fullReg);

  if (hexCodes && hexCodes.length > 0) {
    return returnLast ? hexCodes[hexCodes.length - 1] : hexCodes;
  }

  return defaultColor;
};
const colorToRgbValues = colorProp => {
  const color = isCssVar(colorProp) ? getCssVar(colorProp) : colorProp;
  if (color.charAt(0) === '#') return hexToRgb(color);
  const safeColor = color.replace(/ /g, '');
  const colorType = color.substr(0, 4);
  const regArray = safeColor.match(/\((.+)\)/);

  if (!colorType.startsWith('rgb') || !regArray) {
    throw new Error(`Next UI: Only support ["RGB", "RGBA", "HEX"] color.`);
  }

  return regArray[1].split(',').map(str => Number.parseFloat(str));
};
const addColorAlpha = (colorProp, alpha = 1) => {
  if (!colorProp) return '';
  const color = isCssVar(colorProp) ? getCssVar(colorProp) : colorProp;

  if (isHex(color)) {
    return hexToRGBA(color, alpha);
  } else if (!/^#|rgb|RGB/.test(color)) {
    return color;
  }

  const [r, g, b] = colorToRgbValues(color);
  const safeAlpha = alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;
  return `rgba(${r}, ${g}, ${b}, ${safeAlpha})`;
};

function padZero(str, len) {
  len = len || 2;
  var zeros = new Array(len).join('0');
  return (zeros + str).slice(-len);
}

const invertHex = (hexProp, smooth = true) => {
  let hex = isCssVar(hexProp) ? getCssVar(hexProp) : hexProp;

  if (hex.indexOf('#') === 0) {
    hex = hex.slice(1);
  } // convert 3-digit hex to 6-digits.


  if (hex.length === 3) {
    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }

  if (hex.length !== 6) {
    return hexProp;
  }

  let r = parseInt(hex.slice(0, 2), 16),
      g = parseInt(hex.slice(2, 4), 16),
      b = parseInt(hex.slice(4, 6), 16);

  if (smooth) {
    // http://stackoverflow.com/a/3943023/112731
    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#FFFFFF';
  } // invert color components


  r = 255 - r;
  g = 255 - g;
  b = 255 - b; // pad each with zeros and return

  return '#' + padZero(r.toString(16)) + padZero(g.toString(16)) + padZero(b.toString(16));
};
;// CONCATENATED MODULE: ./src/link/link.styles.ts
var _theme$colors, _theme$colors$link;



const StyledLinkIcon = styled('svg', {
  ml: '$1',
  as: 'center',
  display: 'inline-flex',
  color: 'currentColor'
});
const StyledLink = styled('a', {
  display: 'inline-flex',
  alignItems: 'baseline',
  lineHeight: 'inherit',
  textDecoration: 'none',
  width: 'fitContent',
  '&:hover': {
    opacity: 0.8
  },
  '@motion': {
    transition: 'none'
  },
  variants: {
    color: {
      default: {
        color: '$link'
      },
      text: {
        color: '$text'
      },
      primary: {
        color: '$primary'
      },
      secondary: {
        color: '$secondary'
      },
      success: {
        color: '$success'
      },
      warning: {
        color: '$warning'
      },
      error: {
        color: '$error'
      }
    },
    underline: {
      true: {
        '&:hover, &:active, &:focus': {
          textDecoration: 'underline'
        }
      }
    },
    block: {
      true: {
        padding: '$2 $4',
        borderRadius: '$base'
      }
    },
    animated: {
      true: {
        transition: '$default'
      }
    }
  },
  compoundVariants: [{
    color: 'default',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: addColorAlpha((_theme$colors = theme.colors) == null ? void 0 : (_theme$colors$link = _theme$colors.link) == null ? void 0 : _theme$colors$link.value, 0.2)
      }
    }
  }, {
    color: 'primary',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: '$primaryLight'
      }
    }
  }, {
    color: 'secondary',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: '$secondaryLight'
      }
    }
  }, {
    color: 'success',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: '$successLight'
      }
    }
  }, {
    color: 'warning',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: '$warningLight'
      }
    }
  }, {
    color: 'error',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: '$errorLight'
      }
    }
  }],
  defaultVariants: {
    color: 'default',
    animated: true
  }
});
/* harmony default export */ const link_styles = (StyledLink);
;// CONCATENATED MODULE: ./src/link/icon.tsx
var icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/link/icon.tsx";



const LinkIcon = () => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLinkIcon, {
    viewBox: "0 0 24 24",
    width: "1em",
    height: "1em",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    fill: "none",
    shapeRendering: "geometricPrecision",
    className: "nextui-link-icon",
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"
    }, void 0, false, {
      fileName: icon_jsxFileName,
      lineNumber: 18,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M15 3h6v6"
    }, void 0, false, {
      fileName: icon_jsxFileName,
      lineNumber: 19,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M10 14L21 3"
    }, void 0, false, {
      fileName: icon_jsxFileName,
      lineNumber: 20,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: icon_jsxFileName,
    lineNumber: 6,
    columnNumber: 5
  }, undefined);
};

LinkIcon.toString = () => '.nextui-link-icon';

/* harmony default export */ const link_icon = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(LinkIcon));
;// CONCATENATED MODULE: ./src/link/link.tsx
var link_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/link/link.tsx";






const link_defaultProps = {
  icon: false
};
const Link = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children,
  icon,
  ...props
}, forwardedRef) => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(link_styles, { ...props,
  ref: forwardedRef,
  children: [children, icon && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(link_icon, {}, void 0, false, {
    fileName: link_jsxFileName,
    lineNumber: 28,
    columnNumber: 16
  }, undefined)]
}, void 0, true, {
  fileName: link_jsxFileName,
  lineNumber: 26,
  columnNumber: 5
}, undefined));

if (__DEV__) {
  Link.displayName = 'NextUI - Link';
}

Link.toString = () => '.nextui-link';

/* harmony default export */ const link_link = (with_defaults(Link, link_defaultProps));
;// CONCATENATED MODULE: ./src/link/index.ts


/* harmony default export */ const src_link = (link_link);
;// CONCATENATED MODULE: ./src/loading/loading.styles.ts

const loadingBlink = keyframes({
  '0%': {
    opacity: '0.2'
  },
  '20%': {
    opacity: 1
  },
  '100%': {
    opacity: '0.2'
  }
});
const rotate = keyframes({
  '0%': {
    transform: 'rotate(0deg)'
  },
  '100%': {
    transform: 'rotate(360deg)'
  }
});
const points = keyframes({
  '0%': {
    transform: 'translate(0px, 0px)'
  },
  '50%': {
    transform: 'translate(0, calc(-$$loadingSize * 1.4))'
  },
  '100%': {
    transform: 'translate(0px, 0px)'
  }
});
const spinner = keyframes({
  '0%': {
    opacity: 1
  },
  '100%': {
    opacity: 0.15
  }
});
const StyledLoadingContainer = styled('div', {
  d: 'inline-flex',
  fd: 'column',
  ai: 'center',
  position: 'relative',
  variants: {
    color: {
      white: {
        $$loadingColor: '$colors$white'
      },
      default: {
        $$loadingColor: '$colors$primary'
      },
      primary: {
        $$loadingColor: '$colors$primary'
      },
      secondary: {
        $$loadingColor: '$colors$secondary'
      },
      success: {
        $$loadingColor: '$colors$success'
      },
      warning: {
        $$loadingColor: '$colors$warning'
      },
      error: {
        $$loadingColor: '$colors$error'
      }
    },
    textColor: {
      white: {
        $$loadingTextColor: '$colors$white'
      },
      default: {
        $$loadingTextColor: '$colors$text'
      },
      primary: {
        $$loadingTextColor: '$colors$primary'
      },
      secondary: {
        $$loadingTextColor: '$colors$secondary'
      },
      success: {
        $$loadingTextColor: '$colors$success'
      },
      warning: {
        $$loadingTextColor: '$colors$warning'
      },
      error: {
        $$loadingTextColor: '$colors$error'
      }
    }
  },
  defaultVariants: {
    color: 'default',
    textColor: 'default'
  }
});
const StyledSpinnerContainer = styled('div', {
  size: '100%',
  position: 'relative',
  left: '50%',
  top: '50%'
});
const StyledSpinner = styled('div', {
  d: 'flex',
  fd: 'column',
  jc: 'center',
  ai: 'center',
  position: 'relative',
  variants: {
    size: {
      xs: {
        size: '$6'
      },
      sm: {
        size: '$8'
      },
      md: {
        size: '$9'
      },
      lg: {
        size: '$11'
      },
      xl: {
        size: '$12'
      }
    }
  }
});
const StyledSpinnerSpan = styled('span', {
  bg: '$$loadingColor',
  position: 'absolute',
  top: '-3.9%',
  width: '24%',
  height: '8%',
  left: '-10%',
  br: '$lg',
  animation: `${spinner} 1.2s linear 0s infinite normal none running`,
  '&:nth-child(1)': {
    animationDelay: '-1.2s',
    transform: 'rotate(0deg) translate(146%)'
  },
  '&:nth-child(2)': {
    animationDelay: '-1.1s',
    transform: 'rotate(30deg) translate(146%)'
  },
  '&:nth-child(3)': {
    animationDelay: '-1s',
    transform: 'rotate(60deg) translate(146%)'
  },
  '&:nth-child(4)': {
    animationDelay: '-0.9s',
    transform: 'rotate(90deg) translate(146%)'
  },
  '&:nth-child(5)': {
    animationDelay: '-0.8s',
    transform: 'rotate(120deg) translate(146%)'
  },
  '&:nth-child(6)': {
    animationDelay: '-0.7s',
    transform: 'rotate(150deg) translate(146%)'
  },
  '&:nth-child(7)': {
    animationDelay: '-0.6s',
    transform: 'rotate(180deg) translate(146%)'
  },
  '&:nth-child(8)': {
    animationDelay: '-0.5s',
    transform: 'rotate(210deg) translate(146%)'
  },
  '&:nth-child(9)': {
    animationDelay: '-0.4s',
    transform: 'rotate(240deg) translate(146%)'
  },
  '&:nth-child(10)': {
    animationDelay: '-0.3s',
    transform: 'rotate(270deg) translate(146%)'
  },
  '&:nth-child(11)': {
    animationDelay: '-0.2s',
    transform: 'rotate(300deg) translate(146%)'
  },
  '&:nth-child(12)': {
    animationDelay: '-0.1s',
    transform: 'rotate(330deg) translate(146%)'
  }
});
const StyledLoading = styled('span', {
  position: 'absolute',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  size: '100%',
  dflex: 'center',
  bgColor: 'transparent',
  us: 'none',
  variants: {
    size: {
      xs: {
        $$loadingSize: '$space$8',
        $$loadingBorder: '$space$1'
      },
      sm: {
        $$loadingSize: '$space$10',
        $$loadingBorder: '$space$1'
      },
      md: {
        $$loadingSize: '$space$12',
        $$loadingBorder: 'calc($space$1 * 1.5)'
      },
      lg: {
        $$loadingSize: '$space$15',
        $$loadingBorder: '$space$2'
      },
      xl: {
        $$loadingSize: '$space$18',
        $$loadingBorder: '$space$3'
      }
    },
    type: {
      default: {
        d: 'flex',
        br: '$rounded',
        position: 'relative',
        size: '$$loadingSize',
        i: {
          top: '0px',
          size: '100%',
          position: 'absolute',
          br: 'inherit'
        },
        '._1': {
          border: '$$loadingBorder solid $$loadingColor',
          borderTop: '$$loadingBorder solid transparent',
          borderLeft: '$$loadingBorder solid transparent',
          borderRight: '$$loadingBorder solid transparent',
          animation: `${rotate} 0.8s ease infinite`
        },
        '._2': {
          border: '$$loadingBorder dotted $$loadingColor',
          borderTop: '$$loadingBorder solid transparent',
          borderLeft: '$$loadingBorder solid transparent',
          borderRight: '$$loadingBorder solid transparent',
          animation: `${rotate} 0.8s linear infinite`,
          opacity: 0.5
        },
        '._3': {
          display: 'none'
        }
      },
      points: {
        d: 'flex',
        position: 'relative',
        transform: 'translate(0, calc($$loadingSize * 0.6))',
        i: {
          size: '$$loadingSize',
          margin: '0 3px',
          bg: '$$loadingColor'
        },
        '._1': {
          br: '$rounded',
          animation: `${points} 0.75s ease infinite`
        },
        '._2': {
          br: '$rounded',
          animation: `${points} 0.75s ease infinite 0.25s`
        },
        '._3': {
          br: '$rounded',
          animation: `${points} 0.75s ease infinite 0.5s`
        }
      },
      'points-opacity': {
        d: 'flex',
        position: 'relative',
        i: {
          display: 'inline-block',
          size: '$$loadingSize',
          br: '$rounded',
          bg: '$$loadingColor',
          margin: '0 1px',
          animation: `${loadingBlink} 1.4s infinite both`
        },
        '._2': {
          animationDelay: '0.2s'
        },
        '._3': {
          animationDelay: '0.4s'
        }
      },
      spinner: {},
      gradient: {
        display: 'flex',
        position: 'relative',
        size: '$$loadingSize',
        '._1': {
          position: 'absolute',
          size: '100%',
          border: '0px',
          animation: `${rotate} 1s linear infinite`,
          top: '0px',
          br: '$rounded',
          bg: 'linear-gradient(0deg, $background 33%,$$loadingColor 100%)'
        },
        '._2': {
          top: '2px',
          position: 'absolute',
          size: 'calc(100% - 4px)',
          border: '0px',
          bg: '$background',
          br: '$rounded'
        },
        '._3': {
          display: 'none'
        }
      }
    }
  },
  compoundVariants: [// points-opacity & xs size
  {
    size: 'xs',
    type: 'points-opacity',
    css: {
      $$loadingSize: '$space$1'
    }
  }, // points-opacity & sm size
  {
    size: 'sm',
    type: 'points-opacity',
    css: {
      $$loadingSize: '$space$2'
    }
  }, // points-opacity & md size
  {
    size: 'md',
    type: 'points-opacity',
    css: {
      $$loadingSize: '$space$3'
    }
  }, // points-opacity & lg size
  {
    size: 'lg',
    type: 'points-opacity',
    css: {
      $$loadingSize: '$space$4'
    }
  }, // points-opacity & xl size
  {
    size: 'xl',
    type: 'points-opacity',
    css: {
      $$loadingSize: '$space$5'
    }
  }, // points & xs size
  {
    size: 'xs',
    type: 'points',
    css: {
      $$loadingSize: '$space$1'
    }
  }, // points & sm size
  {
    size: 'sm',
    type: 'points',
    css: {
      $$loadingSize: '$space$2'
    }
  }, // points & md size
  {
    size: 'md',
    type: 'points',
    css: {
      $$loadingSize: '$space$3'
    }
  }, // points & lg size
  {
    size: 'lg',
    type: 'points',
    css: {
      $$loadingSize: '$space$4'
    }
  }, // points & xl size
  {
    size: 'xl',
    type: 'points',
    css: {
      $$loadingSize: '$space$5'
    }
  }],
  defaultVariants: {
    type: 'default'
  }
});
const StyledLoadingLabel = styled('label', {
  mt: '$1',
  color: '$$loadingTextColor',
  fontSize: '$$loadingSize',
  '*': {
    margin: 0
  },
  variants: {
    size: {
      xs: {
        fontSize: '$space$5',
        marginTop: '$2'
      },
      sm: {
        fontSize: '$space$6',
        marginTop: '$3'
      },
      md: {
        fontSize: '$base',
        marginTop: '$4'
      },
      lg: {
        fontSize: '$space$10',
        marginTop: '$4'
      },
      xl: {
        fontSize: '$space$11',
        marginTop: '$5'
      }
    }
  }
});
;// CONCATENATED MODULE: ./src/loading/spinner.tsx
var spinner_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/loading/spinner.tsx";





const Spinner = ({
  children,
  size,
  color,
  textColor,
  className,
  ...props
}) => {
  const isValidChildren = Array.isArray(children) ? (children == null ? void 0 : children.length) > 1 && children[0] !== undefined : children !== undefined;
  const ariaLabel = children && isValidChildren ? '' : 'Loading';
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpinner, {
    className: clsx('nextui-spinner', className),
    color: color,
    size: size,
    ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpinnerContainer, {
      className: "nextui-spinner-container",
      "aria-label": ariaLabel,
      children: [...new Array(12)].map((_, index) => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpinnerSpan, {}, `nextui-spinner-${index}`, false, {
        fileName: spinner_jsxFileName,
        lineNumber: 52,
        columnNumber: 11
      }, undefined))
    }, void 0, false, {
      fileName: spinner_jsxFileName,
      lineNumber: 47,
      columnNumber: 7
    }, undefined), children && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoadingLabel, {
      size: size,
      color: textColor,
      children: children
    }, void 0, false, {
      fileName: spinner_jsxFileName,
      lineNumber: 56,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: spinner_jsxFileName,
    lineNumber: 41,
    columnNumber: 5
  }, undefined);
};

Spinner.toString = () => '.nextui-spinner';

/* harmony default export */ const loading_spinner = (Spinner);
;// CONCATENATED MODULE: ./src/loading/loading.tsx
var loading_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/loading/loading.tsx";






const loading_defaultProps = {
  size: 'md',
  type: 'default'
};
const loading_preClass = 'nextui-loading';

const Loading = ({
  children,
  size,
  gradientBackground,
  loadingCss,
  type,
  ...props
}) => {
  const ariaLabel = children ? '' : 'Loading';
  const loadingGradientCSS = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return type === 'gradient' ? {
      '._2': {
        bg: gradientBackground
      }
    } : {};
  }, [type]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoadingContainer, { ...props,
    children: type === 'spinner' ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(loading_spinner, {
      size: size,
      children: children
    }, void 0, false, {
      fileName: loading_jsxFileName,
      lineNumber: 52,
      columnNumber: 9
    }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoading, {
        className: `${loading_preClass} ${loading_preClass}-${type}`,
        css: { ...loadingCss,
          ...loadingGradientCSS
        },
        type: type,
        size: size,
        "aria-label": ariaLabel,
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("i", {
          className: "_1"
        }, void 0, false, {
          fileName: loading_jsxFileName,
          lineNumber: 65,
          columnNumber: 13
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("i", {
          className: "_2"
        }, void 0, false, {
          fileName: loading_jsxFileName,
          lineNumber: 66,
          columnNumber: 13
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("i", {
          className: "_3"
        }, void 0, false, {
          fileName: loading_jsxFileName,
          lineNumber: 67,
          columnNumber: 13
        }, undefined)]
      }, void 0, true, {
        fileName: loading_jsxFileName,
        lineNumber: 55,
        columnNumber: 11
      }, undefined), children && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoadingLabel, {
        size: size,
        className: `${loading_preClass}-label`,
        children: children
      }, void 0, false, {
        fileName: loading_jsxFileName,
        lineNumber: 70,
        columnNumber: 13
      }, undefined)]
    }, void 0, true)
  }, void 0, false, {
    fileName: loading_jsxFileName,
    lineNumber: 50,
    columnNumber: 5
  }, undefined);
};

Loading.toString = () => '.nextui-loading';

const MemoLoading = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Loading);
/* harmony default export */ const loading_loading = (with_defaults(MemoLoading, loading_defaultProps));
;// CONCATENATED MODULE: ./src/loading/index.ts

// export styled components


/* harmony default export */ const src_loading = (loading_loading);
;// CONCATENATED MODULE: ./src/radio/radio-context.ts

const radio_context_defaultContext = {
  color: 'primary',
  size: 'md',
  textColor: 'default',
  disabledAll: false,
  inGroup: false
};
const RadioContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(radio_context_defaultContext);
const useRadioContext = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(RadioContext);
;// CONCATENATED MODULE: ./src/radio/radio.styles.ts

const StyledRadioInput = styled('input', {}, sharedVisuallyHidden);
const StyledRadioLabel = styled('span', {
  fontSize: '$$radioSize',
  us: 'none',
  d: 'inline-flex',
  ai: 'center',
  variants: {
    color: {
      default: {
        color: '$text'
      },
      primary: {
        color: '$primary'
      },
      secondary: {
        color: '$secondary'
      },
      success: {
        color: '$success'
      },
      warning: {
        color: '$warning'
      },
      error: {
        color: '$error'
      }
    },
    disabled: {
      true: {
        color: '$accents4'
      }
    }
  }
});
const StyledRadioPoint = styled('span', {
  size: '$$radioSize',
  br: '$$radioRadii',
  position: 'relative',
  d: 'inline-block',
  mr: 'calc($$radioSize * 0.375)',
  '&:after': {
    content: '',
    d: 'block',
    position: 'absolute',
    size: '$$radioSize',
    br: '$$radioRadii',
    boxSizing: 'border-box',
    border: '2px solid $border'
  }
}, sharedFocus);
const StyledRadio = styled('label', {
  d: 'flex',
  w: 'initial',
  ai: 'flex-start',
  position: 'relative',
  fd: 'column',
  jc: 'flex-start',
  cursor: 'pointer',
  '@motion': {
    [`& ${StyledRadioPoint}`]: {
      transition: 'none',
      '&:after': {
        transition: 'none'
      }
    }
  },
  variants: {
    color: {
      default: {
        $$radioColor: '$colors$primary',
        $$radioColorHover: '$colors$primaryDark'
      },
      primary: {
        $$radioColor: '$colors$primary',
        $$radioColorHover: '$colors$primaryDark'
      },
      secondary: {
        $$radioColor: '$colors$secondary',
        $$radioColorHover: '$colors$secondaryDark'
      },
      success: {
        $$radioColor: '$colors$success',
        $$radioColorHover: '$colors$successDark'
      },
      warning: {
        $$radioColor: '$colors$warning',
        $$radioColorHover: '$colors$warningDark'
      },
      error: {
        $$radioColor: '$colors$error',
        $$radioColorHover: '$colors$errorDark'
      }
    },
    size: {
      xs: {
        $$radioSize: '$space$7'
      },
      sm: {
        $$radioSize: '$space$8'
      },
      md: {
        $$radioSize: '$space$9'
      },
      lg: {
        $$radioSize: '$space$10'
      },
      xl: {
        $$radioSize: '$space$11'
      }
    },
    disabled: {
      true: {
        cursor: 'not-allowed',
        $$radioColor: '$colors$accents4'
      }
    },
    squared: {
      true: {
        $$radioRadii: '$space$1'
      },
      false: {
        $$radioRadii: '$radii$rounded'
      }
    },
    active: {
      true: {
        [`& ${StyledRadioPoint}`]: {
          '&:after': {
            border: 'calc($$radioSize * 0.34) solid $$radioColor'
          }
        },
        '&:hover': {
          [`& ${StyledRadioPoint}`]: {
            '&:after': {
              border: 'calc($$radioSize * 0.34) solid $$radioColorHover'
            }
          }
        }
      }
    },
    animated: {
      true: {
        [`& ${StyledRadioPoint}`]: {
          transition: '$default',
          '&:after': {
            transition: '$default'
          }
        }
      },
      false: {
        [`& ${StyledRadioPoint}`]: {
          transition: 'none',
          '&:after': {
            transition: 'none'
          }
        }
      }
    }
  },
  defaultVariants: {
    size: 'md',
    squared: false,
    animated: true
  },
  compoundVariants: [{
    // !active && !disabled
    active: false,
    disabled: false,
    css: {
      '&:hover': {
        [`& ${StyledRadioPoint}`]: {
          bg: '$border'
        }
      }
    }
  }]
});
const StyledRadioGroup = styled('div', {
  border: 0,
  margin: 0,
  padding: 0,
  display: 'flex',
  fd: 'column',
  variants: {
    size: {
      xs: {
        $$radioGroupGap: '$space$7'
      },
      sm: {
        $$radioGroupGap: '$space$8'
      },
      md: {
        $$radioGroupGap: '$space$9'
      },
      lg: {
        $$radioGroupGap: '$space$10'
      },
      xl: {
        $$radioGroupGap: '$space$11'
      }
    },
    row: {
      true: {
        fd: 'row',
        [`& ${StyledRadio}`]: {
          marginTop: 0,
          marginRight: '$$radioGroupGap'
        }
      },
      false: {
        [`& ${StyledRadio}`]: {
          marginTop: '$$radioGroupGap',
          marginRight: 0
        }
      }
    }
  },
  defaultVariants: {
    row: false
  }
});
const StyledRadioDescription = styled('span', {
  color: '$accents4',
  fontSize: 'calc($$radioSize * 0.85)',
  paddingLeft: 'calc($$radioSize + $$radioSize * 0.375)'
}); // types
;// CONCATENATED MODULE: ./src/radio/radio.tsx
var radio_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/radio/radio.tsx";










const radio_defaultProps = {
  size: 'md',
  color: 'default',
  textColor: 'default',
  disabled: false,
  preventDefault: true
};
const radio_preClass = 'nextui-radio';

const Radio = ({
  checked,
  onChange,
  disabled,
  color,
  size,
  textColor,
  value: radioValue,
  preventDefault,
  children,
  ...props
}) => {
  const [selfChecked, setSelfChecked] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(!!checked);
  const {
    value: groupValue,
    disabledAll,
    inGroup,
    color: groupColor,
    size: groupSize,
    textColor: textGroupColor,
    updateState
  } = useRadioContext();
  const [withoutDescChildren, DescChildren] = pickChild(children, StyledRadioDescription);

  if (inGroup && __DEV__) {
    if (checked !== undefined) {
      src_use_warning('Remove props "checked" if in the Radio.Group.', 'Radio');
    }

    if (radioValue === undefined) {
      src_use_warning('Props "value" must be deinfed if in the Radio.Group.', 'Radio');
    }
  }

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    setSelfChecked(groupValue === radioValue);
  }, [groupValue, radioValue]);
  const isDisabled = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => disabled || disabledAll, [disabled, disabledAll]);
  const radioColor = color !== 'default' ? color : groupColor;
  const radioSize = size !== 'md' ? size : groupSize;
  const labelColor = textColor !== 'default' ? textColor : textGroupColor;

  const changeHandler = event => {
    if (isDisabled || inGroup && selfChecked) return;
    const selfEvent = {
      target: {
        checked: !selfChecked
      },
      stopPropagation: event.stopPropagation,
      preventDefault: event.preventDefault,
      nativeEvent: event
    };
    setSelfChecked(!selfChecked);

    if (inGroup) {
      updateState && updateState(radioValue);
    }

    onChange && onChange(selfEvent);
  };

  const {
    bindings
  } = src_use_keyboard(event => {
    changeHandler(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (checked === undefined) return;
    setSelfChecked(Boolean(checked));
  }, [checked]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadio, {
    "aria-checked": selfChecked,
    disabled: isDisabled,
    active: selfChecked,
    size: radioSize,
    color: radioColor,
    ...props,
    ...bindings,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioInput, {
      type: "radio",
      tabIndex: -1,
      value: radioValue,
      checked: selfChecked,
      onChange: changeHandler,
      className: `${radio_preClass}-input`,
      ...props
    }, void 0, false, {
      fileName: radio_jsxFileName,
      lineNumber: 158,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioLabel, {
      color: labelColor,
      disabled: isDisabled,
      className: `${radio_preClass}-name`,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioPoint, {
        tabIndex: isDisabled ? -1 : 0,
        className: clsx(`${radio_preClass}-point`, {
          [`${radio_preClass}-active`]: selfChecked,
          [`${radio_preClass}-disabled`]: isDisabled
        })
      }, void 0, false, {
        fileName: radio_jsxFileName,
        lineNumber: 172,
        columnNumber: 9
      }, undefined), withoutDescChildren]
    }, void 0, true, {
      fileName: radio_jsxFileName,
      lineNumber: 167,
      columnNumber: 7
    }, undefined), DescChildren && DescChildren]
  }, void 0, true, {
    fileName: radio_jsxFileName,
    lineNumber: 149,
    columnNumber: 5
  }, undefined);
};

Radio.defaultProps = radio_defaultProps;

if (__DEV__) {
  Radio.displayName = 'NextUI - Radio';
}

Radio.toString = () => '.nextui-radio';

/* harmony default export */ const radio_radio = (with_defaults(Radio, radio_defaultProps));
;// CONCATENATED MODULE: ./src/radio/radio-group.tsx
var radio_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/radio/radio-group.tsx";





const radio_group_defaultProps = {
  disabled: false,
  size: 'md',
  color: 'default',
  textColor: 'default'
};

const RadioGroup = ({
  disabled,
  onChange,
  value,
  size,
  color,
  textColor,
  children,
  initialValue,
  ...props
}) => {
  const [selfVal, setSelfVal] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialValue);

  const updateState = nextValue => {
    setSelfVal(nextValue);
    onChange && onChange(nextValue);
  };

  const providerValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return {
      updateState,
      disabledAll: disabled,
      inGroup: true,
      size,
      color,
      textColor,
      value: selfVal
    };
  }, [disabled, selfVal]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (value === undefined) return;
    setSelfVal(value);
  }, [value]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(RadioContext.Provider, {
    value: providerValue,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioGroup, {
      role: "radiogroup",
      size: size,
      ...props,
      children: children
    }, void 0, false, {
      fileName: radio_group_jsxFileName,
      lineNumber: 70,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: radio_group_jsxFileName,
    lineNumber: 69,
    columnNumber: 5
  }, undefined);
};

RadioGroup.toString = () => '.nextui-radio-group';

/* harmony default export */ const radio_group = (with_defaults(RadioGroup, radio_group_defaultProps));
;// CONCATENATED MODULE: ./src/radio/index.ts



radio_radio.Group = radio_group;
radio_radio.Description = StyledRadioDescription;
radio_radio.Desc = StyledRadioDescription;

/* harmony default export */ const src_radio = (radio_radio);
;// CONCATENATED MODULE: ./src/text/text.styles.ts

const StyledText = styled('p', {
  variants: {
    weight: {
      hairline: {
        fontWeight: '$hairline'
      },
      thin: {
        fontWeight: '$thin'
      },
      light: {
        fontWeight: '$light'
      },
      normal: {
        fontWeight: '$normal'
      },
      medium: {
        fontWeight: '$medium'
      },
      semibold: {
        fontWeight: '$semibold'
      },
      bold: {
        fontWeight: '$bold'
      },
      extrabold: {
        fontWeight: '$extrabold'
      },
      black: {
        fontWeight: '$black'
      }
    }
  }
});
;// CONCATENATED MODULE: ./src/text/child.tsx
var child_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/text/child.tsx";





const child_defaultProps = {
  color: 'default'
};

const TextChild = ({
  children,
  tag,
  color: userColor,
  transform,
  margin: marginProp,
  size,
  css,
  ...props
}) => {
  const color = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isNormalColor(userColor)) {
      switch (userColor) {
        case 'default':
          return '$text';

        default:
          return `$${userColor}`;
      }
    }

    return userColor;
  }, [userColor]);
  const fontSize = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!size) return 'inherit';
    if (typeof size === 'number') return `${size}px`;
    return size;
  }, [size]);
  const margin = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!marginProp) return 'inherit';
    if (typeof marginProp === 'number') return `${size}px`;
    return marginProp;
  }, [marginProp]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledText, {
    as: tag,
    css: {
      color,
      fontSize: size ? fontSize : '',
      margin,
      tt: transform,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: child_jsxFileName,
    lineNumber: 66,
    columnNumber: 5
  }, undefined);
};

TextChild.toString = () => '.nextui-text-child';

const MemoTextChild = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(TextChild);
/* harmony default export */ const child = (with_defaults(MemoTextChild, child_defaultProps));
;// CONCATENATED MODULE: ./src/text/text.tsx
var text_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/text/text.tsx";




const text_defaultProps = {
  h1: false,
  h2: false,
  h3: false,
  h4: false,
  h5: false,
  h6: false,
  b: false,
  small: false,
  transform: 'none',
  i: false,
  span: false,
  del: false,
  em: false,
  blockquote: false,
  color: 'default'
};

const getModifierChild = (tags, children, size, transform) => {
  if (!tags.length) return children;
  const nextTag = tags.slice(1, tags.length);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(child, {
    tag: tags[0],
    size: size,
    transform: transform,
    children: getModifierChild(nextTag, children, size)
  }, void 0, false, {
    fileName: text_jsxFileName,
    lineNumber: 64,
    columnNumber: 5
  }, undefined);
};

const Text = ({
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  b,
  small,
  i,
  span,
  del,
  em,
  blockquote,
  transform,
  size,
  margin,
  children,
  ...props
}) => {
  const elements = {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    blockquote
  };
  const inlineElements = {
    span,
    small,
    b,
    em,
    i,
    del
  };
  const names = Object.keys(elements).filter(name => elements[name]);
  const inlineNames = Object.keys(inlineElements).filter(name => inlineElements[name]);
  /**
   *  Render element "p" only if no element is found.
   *  If there is only one modifier, just rendered one modifier element
   *  e.g.
   *    <Text /> => <p />
   *    <Text em /> => <em />
   *    <Text b em /> => <b><em>children</em></b>
   */

  const tag = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (names[0]) return names[0];
    if (inlineNames[0]) return inlineNames[0];
    return 'p';
  }, [names, inlineNames]);
  const renderableChildElements = inlineNames.filter(name => name !== tag);
  const modifers = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!renderableChildElements.length) return children;
    return getModifierChild(renderableChildElements, children, size, transform);
  }, [renderableChildElements, children, size, transform]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(child, {
    transform: transform,
    tag: tag,
    margin: margin,
    size: size,
    ...props,
    children: modifers
  }, void 0, false, {
    fileName: text_jsxFileName,
    lineNumber: 123,
    columnNumber: 5
  }, undefined);
};

Text.toString = () => '.nextui-text';

const MemoText = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Text);
/* harmony default export */ const text_text = (with_defaults(MemoText, text_defaultProps));
;// CONCATENATED MODULE: ./src/text/index.ts


/* harmony default export */ const src_text = (text_text);
;// CONCATENATED MODULE: ./src/switch/switch.styles.ts

const StyledSwitchContainer = styled('label', {
  WebkitTapHighlightColor: 'transparent',
  d: 'inline-block',
  verticalAlign: 'center',
  whiteSpace: 'nowrap',
  us: 'none',
  transition: '$default',
  padding: '$1 0',
  position: 'relative',
  cursor: 'pointer',
  '@motion': {
    transition: 'none'
  },
  variants: {
    color: {
      default: {
        $$switchColor: '$colors$primary',
        $$switchColorShadow: '$colors$primaryShadow',
        $$switchColorHover: '$colors$primaryDark'
      },
      primary: {
        $$switchColor: '$colors$primary',
        $$switchColorShadow: '$colors$primaryShadow',
        $$switchColorHover: '$colors$primaryDark'
      },
      secondary: {
        $$switchColor: '$colors$secondary',
        $$switchColorShadow: '$colors$secondaryShadow',
        $$switchColorHover: '$colors$secondaryDark'
      },
      success: {
        $$switchColor: '$colors$success',
        $$switchColorShadow: '$colors$successShadow',
        $$switchColorHover: '$colors$successDark'
      },
      warning: {
        $$switchColor: '$colors$warning',
        $$switchColorShadow: '$colors$warningShadow',
        $$switchColorHover: '$colors$warningDark'
      },
      error: {
        $$switchColor: '$colors$error',
        $$switchColorShadow: '$colors$errorShadow',
        $$switchColorHover: '$colors$errorDark'
      }
    },
    size: {
      xs: {
        $$switchWidth: '$space$12',
        $$switchHeight: '$space$9',
        width: ' $$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      sm: {
        $$switchWidth: '$space$14',
        $$switchHeight: '$space$10',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      md: {
        $$switchWidth: '$space$15',
        $$switchHeight: '$space$11',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      lg: {
        $$switchWidth: '$space$17',
        $$switchHeight: '$space$12',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      xl: {
        $$switchWidth: '$space$18',
        $$switchHeight: '$space$13',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      }
    },
    borderWeight: {
      light: {
        $$switchBorderW: '$borderWeights$light'
      },
      normal: {
        $$switchBorderW: '$borderWeights$normal'
      },
      bold: {
        $$switchBorderW: '$borderWeights$bold'
      },
      extrabold: {
        $$switchBorderW: '$borderWeights$extrabold'
      },
      black: {
        $$switchBorderW: '$borderWeights$black'
      }
    },
    disabled: {
      true: {
        cursor: 'not-allowed'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    }
  },
  defaultVariants: {
    color: 'default',
    size: 'md',
    borderWeight: 'normal'
  }
});
const StyledSwitchInput = styled('input', {}, sharedVisuallyHidden);
const StyledSwitchCircle = styled('span', {
  position: 'absolute',
  display: 'flex',
  size: 'calc($$switchHeight * 0.7)',
  jc: 'center',
  ai: 'center',
  top: '50%',
  transform: 'translateY(-50%)',
  left: 'calc($$switchWidth / 15)',
  transition: 'left 0.25s ease, width 0.2s ease',
  bg: '$background',
  br: '$pill',
  '& svg': {
    bg: 'transparent',
    size: 'calc($$switchHeight * 0.44)'
  },
  '@motion': {
    transition: 'none'
  }
});
const StyledSwitch = styled('div', {
  opacity: 1,
  width: '$$switchWidth',
  height: '$$switchHeight',
  transition: '$default',
  position: 'relative',
  overflow: 'hidden',
  padding: 0,
  br: '$pill',
  bg: '$accents2',
  '@motion': {
    transition: 'none'
  },
  variants: {
    checked: {
      true: {
        bg: '$$switchColor',
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc(100% - ($$switchWidth / 15) - $$switchHeight * 0.7)'
        },
        '&:hover:not(&:active)': {
          bg: '$$switchColorHover'
        }
      }
    },
    bordered: {
      true: {
        bg: 'transparent',
        border: '$$switchBorderW solid $border',
        '&:hover': {
          borderColor: '$$switchColor'
        },
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc(($$switchWidth / 15) - ($$switchBorderW / 2))',
          bg: '$accents2'
        }
      }
    },
    squared: {
      true: {
        br: '2px',
        [`& ${StyledSwitchCircle}`]: {
          br: '2px'
        }
      }
    },
    shadow: {
      true: {}
    },
    disabled: {
      true: {
        borderColor: '$accents2',
        bg: '$accents2',
        [`& ${StyledSwitchCircle}`]: {
          bg: '$accents3'
        }
      }
    },
    animated: {
      true: {
        '&:active': {
          [`& ${StyledSwitchCircle}`]: {
            width: 'calc($$switchHeight * 0.7 + ($$switchWidth / 10))'
          }
        }
      },
      false: {
        transition: 'none',
        [`& ${StyledSwitchCircle}`]: {
          transition: 'none'
        }
      }
    }
  },
  compoundVariants: [{
    // checked && disabled
    checked: true,
    disabled: true,
    css: {
      bg: '$accents3',
      [`& ${StyledSwitchCircle}`]: {
        bg: '$accents2'
      },
      '&:hover:not(&:active)': {
        bg: '$accents3'
      }
    }
  }, // shadow && checked
  {
    shadow: true,
    checked: true,
    css: {
      normalShadowVar: '$$switchColorShadow'
    }
  }, // animated && !checked
  {
    animated: true,
    checked: false,
    css: {
      '&:active': {
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc($$switchWidth / 7.5)'
        }
      }
    }
  }, // animated && checked
  {
    animated: true,
    checked: true,
    css: {
      '&:active': {
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc(100% - ($$switchWidth / 5) - $$switchHeight * 0.7)'
        }
      }
    }
  }, // checked && bordered
  {
    checked: true,
    bordered: true,
    css: {
      bg: '$$switchColor',
      border: '$$switchBorderW solid transparent',
      '&:hover:not(&:active)': {
        borderColor: 'transparent'
      },
      [`& ${StyledSwitchCircle}`]: {
        left: 'calc(100% - ($$switchWidth / 15) - $$switchHeight * 0.7 + ($$switchBorderW / 2))',
        bg: '$background'
      }
    }
  }]
}, sharedFocus); // types
;// CONCATENATED MODULE: ./src/switch/switch.tsx
var switch_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/switch/switch.tsx";








const switch_defaultProps = {
  disabled: false,
  bordered: false,
  shadow: false,
  squared: false,
  animated: true,
  preventDefault: true,
  initialChecked: false
};
const switch_preClass = 'nextui-switch';

const Switch = ({
  initialChecked,
  checked,
  disabled,
  onChange,
  squared,
  bordered,
  shadow,
  icon,
  iconOn,
  iconOff,
  animated,
  preventDefault,
  ...props
}) => {
  const [selfChecked, setSelfChecked] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialChecked);

  if (icon && __DEV__ && (iconOn || iconOff)) {
    src_use_warning('Remove props "icon" if iconOn or iconOff exists.', 'Switch');
  }

  const changeHandle = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(ev => {
    if (disabled) return;
    const selfEvent = {
      target: {
        checked: !selfChecked
      },
      stopPropagation: ev.stopPropagation,
      preventDefault: ev.preventDefault,
      nativeEvent: ev
    };
    setSelfChecked(!selfChecked);
    onChange && onChange(selfEvent);
  }, [disabled, selfChecked, onChange]);
  const {
    bindings
  } = src_use_keyboard(event => {
    changeHandle(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const circleIcon = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const hasIcon = icon || iconOn || iconOff;
    const hasIconOn = Boolean(iconOn);
    const hasIconOff = Boolean(iconOff);
    if (!hasIcon) return null;
    if (hasIconOn && selfChecked) return iconOn;
    if (hasIconOff && !selfChecked) return iconOff;
    return hasIcon;
  }, [selfChecked, icon, iconOn, iconOff]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (checked === undefined) return;
    setSelfChecked(checked);
  }, [checked]);
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return selfChecked ? 'checked' : 'unchecked';
  }, [selfChecked]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitchContainer, {
    "data-state": getState,
    disabled: disabled,
    animated: animated,
    ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitchInput, {
      tabIndex: -1,
      type: "checkbox",
      className: clsx(`${switch_preClass}-input`),
      "data-state": getState,
      disabled: disabled,
      checked: selfChecked,
      onChange: changeHandle
    }, void 0, false, {
      fileName: switch_jsxFileName,
      lineNumber: 137,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitch, {
      role: "switch",
      tabIndex: disabled ? -1 : 0,
      checked: selfChecked,
      "aria-checked": selfChecked,
      "aria-disabled": disabled,
      animated: animated,
      disabled: disabled,
      squared: squared,
      bordered: bordered,
      shadow: shadow,
      "data-state": getState,
      className: clsx(switch_preClass, `${switch_preClass}--${getState}`, {
        [`${switch_preClass}-checked`]: selfChecked,
        [`${switch_preClass}-disabled`]: disabled
      }),
      ...bindings,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitchCircle, {
        className: `${switch_preClass}-circle`,
        children: circleIcon
      }, void 0, false, {
        fileName: switch_jsxFileName,
        lineNumber: 164,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: switch_jsxFileName,
      lineNumber: 146,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: switch_jsxFileName,
    lineNumber: 131,
    columnNumber: 5
  }, undefined);
};

Switch.toString = () => '.nextui-switch';

const MemoSwitch = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Switch);
/* harmony default export */ const switch_switch = (with_defaults(MemoSwitch, switch_defaultProps));
;// CONCATENATED MODULE: ./src/switch/index.ts


/* harmony default export */ const src_switch = (switch_switch);
;// CONCATENATED MODULE: ./src/backdrop/backdrop.styles.ts

const StyledBackdropContent = styled('div', {
  position: 'relative',
  display: 'inline-block',
  zIndex: '$max',
  outline: 'none',
  width: '100%',
  margin: '$9 auto',
  verticalAlign: 'middle',
  '@sm': {
    width: '90%',
    maxWidth: '90%'
  }
});
const StyledBackdropLayer = styled('div', {
  position: 'fixed',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  size: '100%',
  pe: 'none',
  zIndex: '$max',
  '@motion': {
    transition: 'none'
  },
  variants: {
    blur: {
      true: {
        opacity: 1,
        transition: 'background 0.35s cubic-bezier(0.4, 0, 0.2, 1)',
        backdropFilter: 'saturate(180%) blur(20px)',
        bg: 'rgba(0, 0, 0, 0.1)'
      },
      false: {
        bg: '$black',
        opacity: '$$backdropOpacity',
        transition: 'opacity 0.35s cubic-bezier(0.4, 0, 0.2, 1)'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    }
  }
});
const StyledBackdrop = styled('div', {
  position: 'fixed',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  overflow: 'auto',
  zIndex: '$max',
  WebkitOverflowScrolling: 'touch',
  boxSizing: 'border-box',
  textAlign: 'center',
  '&:before': {
    content: '',
    display: 'inline-block',
    width: 0,
    height: '100%',
    verticalAlign: 'middle'
  },
  '.nextui-backdrop-wrapper-enter .nextui-backdrop-layer-default': {
    opacity: 0
  },
  '.nextui-backdrop-wrapper-enter-active .nextui-backdrop-layer-default': {
    opacity: '$$backdropOpacity'
  },
  '.nextui-backdrop-wrapper-leave .nextui-backdrop-layer-default': {
    opacity: '$$backdropOpacity'
  },
  '.nextui-backdrop-wrapper-leave-active .nextui-backdrop-layer-default': {
    opacity: 0
  },
  '.nextui-backdrop-wrapper-enter .nextui-backdrop-layer-blur': {
    bg: 'rgba(0, 0, 0, 0.1)'
  },
  '.nextui-backdrop-wrapper-enter-active .nextui-backdrop-layer-blur': {
    bg: 'rgba(0, 0, 0, 0.4)'
  },
  '.nextui-backdrop-wrapper-leave .nextui-backdrop-layer-blur': {
    bg: 'rgba(0, 0, 0, 0.4)'
  },
  '.nextui-backdrop-wrapper-leave-active .nextui-backdrop-layer-blur': {
    bg: 'rgba(0, 0, 0, 0.1)'
  },
  variants: {
    fullScreen: {
      true: {
        display: 'inline-flex',
        overflow: 'hidden',
        [`& ${StyledBackdropContent}`]: {
          width: '100vw',
          maxWidth: '100vw',
          height: '100vh',
          margin: 0
        },
        [`& ${StyledBackdropLayer}`]: {
          display: 'none'
        }
      }
    }
  },
  defaultVariants: {
    fullScreen: false
  }
});
;// CONCATENATED MODULE: ./src/backdrop/backdrop.tsx
var backdrop_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/backdrop/backdrop.tsx";

/* eslint-disable @typescript-eslint/no-explicit-any */










const backdrop_defaultProps = {
  onClick: () => {},
  visible: false,
  blur: false,
  animated: true,
  preventDefault: true,
  opacity: 0.5,
  className: ''
};
const backdrop_preClass = 'nextui-backdrop';
const Backdrop = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(({
  children,
  onClick,
  onKeyPress,
  visible,
  maxWidth,
  blur,
  animated,
  opacity,
  preventDefault,
  className,
  css,
  ...props
}) => {
  const [, setIsContentMouseDown, IsContentMouseDownRef] = src_use_current_state(false);

  const clickHandler = event => {
    if (IsContentMouseDownRef.current) return;
    onClick && onClick(event);
  };

  const childrenClickHandler = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(event => {
    event.stopPropagation();
  }, []);

  const mouseUpHandler = () => {
    if (!IsContentMouseDownRef.current) return;
    const timer = setTimeout(() => {
      setIsContentMouseDown(false);
      clearTimeout(timer);
    }, 0);
  };

  const {
    bindings
  } = src_use_keyboard(ev => {
    onKeyPress && onKeyPress(ev);
  }, [KeyCode.Escape, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  const renderChildren = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBackdrop, {
      tabIndex: -1,
      role: "button",
      "aria-hidden": true,
      "data-state": getState,
      onClick: clickHandler,
      onMouseUp: mouseUpHandler,
      css: {
        $$backdropOpacity: opacity,
        ...css
      },
      className: clsx(backdrop_preClass, `${backdrop_preClass}--${getState}`, className),
      ...bindings,
      ...props,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBackdropLayer, {
        className: clsx(`${backdrop_preClass}-layer`, blur ? `${backdrop_preClass}-layer-blur` : `${backdrop_preClass}-layer-default`),
        animated: animated,
        blur: blur
      }, void 0, false, {
        fileName: backdrop_jsxFileName,
        lineNumber: 117,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBackdropContent, {
        className: `${backdrop_preClass}-content`,
        onClick: childrenClickHandler,
        css: {
          maxWidth
        },
        onMouseDown: () => setIsContentMouseDown(true),
        children: children
      }, void 0, false, {
        fileName: backdrop_jsxFileName,
        lineNumber: 125,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: backdrop_jsxFileName,
      lineNumber: 102,
      columnNumber: 9
    }, undefined);
  }, [children]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
    children: animated ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
      name: `${backdrop_preClass}-wrapper`,
      visible: visible,
      enterTime: 20,
      leaveTime: 20,
      clearTime: 150,
      children: renderChildren
    }, void 0, false, {
      fileName: backdrop_jsxFileName,
      lineNumber: 142,
      columnNumber: 11
    }, undefined) : visible ? renderChildren : null
  }, void 0, false);
});

if (__DEV__) {
  Backdrop.displayName = 'NextUI - Backdrop';
}

Backdrop.toString = () => '.nextui-backdrop';

/* harmony default export */ const backdrop = (with_defaults(Backdrop, backdrop_defaultProps));
;// CONCATENATED MODULE: ./src/backdrop/index.ts


/* harmony default export */ const src_backdrop = (backdrop);
;// CONCATENATED MODULE: ./src/user/user.styles.ts

const StyledUser = styled('div', {
  d: 'inline-flex',
  p: '0 $sm',
  jc: 'center',
  ai: 'center',
  w: 'max-content',
  maxWidth: '100%'
});
const StyledUserInfo = styled('div', {
  ml: '$sm',
  d: 'inline-flex',
  fd: 'column',
  whiteSpace: 'nowrap'
});
const StyledUserName = styled('span', {
  fontSize: '$xs',
  color: '$text',
  lh: '$sm',
  tt: 'capitalize',
  fontWeight: '$medium',
  maxW: '$60',
  to: 'ellipsis',
  // text overflow
  ov: 'hidden' // overflow

});
const StyledUserSocial = styled('span', {
  fontSize: '$tiny',
  color: '$accents4',
  '*:first-child': {
    mt: 0
  },
  '*:last-child': {
    mb: 0
  }
});
const StyledUserLink = styled('a', {
  a: {
    '&:hover': {
      opacity: 0.7
    }
  }
}); // types
;// CONCATENATED MODULE: ./src/user/user.tsx
var user_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/user/user.tsx";




const user_defaultProps = {
  size: 'lg',
  squared: false,
  bordered: false
};
const user_preClass = 'nextui-user';

const User = ({
  src,
  text,
  name,
  children,
  altText,
  color,
  squared,
  bordered,
  size,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUser, { ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_avatar, {
      className: `${user_preClass}-avatar`,
      src: src,
      color: color,
      squared: squared,
      bordered: bordered,
      text: text,
      size: size,
      alt: altText
    }, void 0, false, {
      fileName: user_jsxFileName,
      lineNumber: 56,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUserInfo, {
      className: `${user_preClass}-info`,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUserName, {
        className: `${user_preClass}-name`,
        children: name
      }, void 0, false, {
        fileName: user_jsxFileName,
        lineNumber: 67,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUserSocial, {
        className: `${user_preClass}-social`,
        children: children
      }, void 0, false, {
        fileName: user_jsxFileName,
        lineNumber: 68,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: user_jsxFileName,
      lineNumber: 66,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: user_jsxFileName,
    lineNumber: 55,
    columnNumber: 5
  }, undefined);
};

User.toString = () => '.nextui-user';

/* harmony default export */ const user = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(User));
;// CONCATENATED MODULE: ./src/user/user-link.tsx
var user_link_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/user/user-link.tsx";





const UserLink = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  href,
  className,
  children,
  ...props
}, ref) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUserLink, { ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_link, {
      ref: ref,
      href: href,
      color: "primary",
      target: "_blank",
      rel: "noopener",
      children: children
    }, void 0, false, {
      fileName: user_link_jsxFileName,
      lineNumber: 25,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: user_link_jsxFileName,
    lineNumber: 24,
    columnNumber: 7
  }, undefined);
});

if (__DEV__) {
  UserLink.displayName = 'NextUI - UserLink';
}

UserLink.toString = () => '.nextui-user-link';

const MemoUserLink = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(UserLink);
/* harmony default export */ const user_link = (MemoUserLink);
;// CONCATENATED MODULE: ./src/user/index.ts


user.Link = user_link;

/* harmony default export */ const src_user = (user);
;// CONCATENATED MODULE: ./src/progress/progress.styles.ts

const indeterminateAnimation = keyframes({
  '0%': {
    left: '-40%'
  },
  '100%': {
    left: '100%'
  }
});
const StyledProgress = styled('div', {
  margin: 0,
  padding: 0,
  width: '100%',
  position: 'relative',
  overflow: 'visible',
  variants: {
    color: {
      default: {
        $$progressColor: '$colors$primary',
        $$progressShadowColor: '$colors$primaryShadow'
      },
      primary: {
        $$progressColor: '$colors$primary',
        $$progressShadowColor: '$colors$primaryShadow'
      },
      secondary: {
        $$progressColor: '$colors$secondary',
        $$progressShadowColor: '$colors$secondaryShadow'
      },
      success: {
        $$progressColor: '$colors$success',
        $$progressShadowColor: '$colors$successShadow'
      },
      warning: {
        $$progressColor: '$colors$warning',
        $$progressShadowColor: '$colors$warningShadow'
      },
      error: {
        $$progressColor: '$colors$error',
        $$progressShadowColor: '$colors$errorShadow'
      },
      gradient: {
        $$progressColor: '$colors$gradient',
        $$progressShadowColor: '$colors$primaryShadow'
      }
    },
    status: {
      default: {
        bg: '$accents2'
      },
      primary: {
        bg: '$primaryLight'
      },
      secondary: {
        bg: '$secondaryLight'
      },
      success: {
        bg: '$successLight'
      },
      warning: {
        bg: '$warningLight'
      },
      error: {
        bg: '$errorLight'
      }
    },
    size: {
      xs: {
        $$progressHeight: '$space$2',
        height: '$$progressHeight',
        br: '$$progressHeight'
      },
      sm: {
        $$progressHeight: '$space$4',
        height: '$$progressHeight',
        br: '$$progressHeight'
      },
      md: {
        $$progressHeight: '$space$8',
        height: '$$progressHeight',
        br: '$$progressHeight'
      },
      lg: {
        $$progressHeight: '$space$10',
        height: '$$progressHeight',
        br: '$$progressHeight'
      },
      xl: {
        $$progressHeight: '$space$11',
        height: '$$progressHeight',
        br: '$$progressHeight'
      }
    },
    indeterminated: {
      true: {
        overflow: 'hidden'
      }
    },
    squared: {
      true: {
        br: 'calc($$progressHeight * 0.25)'
      }
    }
  },
  defaultVariants: {
    color: 'defuault',
    status: 'default',
    size: 'md'
  }
});
const StyledProgressBar = styled('div', {
  margin: 0,
  padding: 0,
  width: 0,
  opacity: 0,
  height: '100%',
  minWidth: 'inherit',
  bg: '$$progressColor',
  br: 'inherit',
  transition: 'width 0.5s cubic-bezier(0.4, 0, 0.2, 1)',
  '@motion': {
    transition: 'none'
  },
  variants: {
    animated: {
      false: {
        transition: 'none'
      }
    },
    shadow: {
      true: {
        normalShadowVar: '$$progressShadowColor'
      }
    },
    striped: {
      true: {
        backgroundImage: 'linear-gradient(45deg, rgba(0, 0, 0, 0.1) 25%, transparent 25%, transparent 50%, rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.1) 75%, transparent 75%, transparent)',
        backgroundSize: '$space$lg $space$lg'
      }
    },
    indeterminated: {
      true: {
        position: 'absolute',
        width: '0%',
        transitionProperty: 'background-color, width, left, border-color,opacity, shadow, transform',
        transitionDuration: '300ms',
        willChange: 'left',
        minWidth: '50%',
        animation: `1s ease 0s infinite normal none running ${indeterminateAnimation}`
      }
    }
  }
});
;// CONCATENATED MODULE: ./src/progress/progress.tsx
var progress_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/progress/progress.tsx";








const progress_defaultProps = {
  striped: false,
  animated: true,
  shadow: false,
  indeterminated: false,
  value: 0,
  min: 0,
  max: 100
};
const progress_preClass = 'nextui-progress';

const Progress = ({
  value: valueProp,
  max,
  min,
  striped,
  animated,
  shadow,
  indeterminated,
  css,
  ...props
}) => {
  const value = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => valueProp > max ? max : valueProp < min ? min : valueProp, [valueProp, min, max]);
  const percent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => valueToPercent(value, min, max), [value, min, max]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledProgress, {
    role: "progressbar",
    indeterminated: indeterminated,
    css: {
      'nextui-progress-wrapper-enter': {
        opacity: 0
      },
      '.nextui-progress-wrapper-enter-active': {
        opacity: 1,
        width: `${percent}%`
      },
      ...css
    },
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
      visible: true,
      name: `${progress_preClass}-wrapper`,
      enterTime: 10,
      leaveTime: 20,
      clearTime: 300,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledProgressBar, {
        className: clsx(`${progress_preClass}-bar`, {
          [`${progress_preClass}-striped`]: striped,
          [`${progress_preClass}-indeterminated`]: indeterminated
        }),
        "aria-valuenow": value,
        "aria-valuemin": min,
        "aria-valuemax": max,
        striped: striped,
        animated: animated,
        shadow: shadow,
        indeterminated: indeterminated,
        ...props
      }, void 0, false, {
        fileName: progress_jsxFileName,
        lineNumber: 94,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: progress_jsxFileName,
      lineNumber: 87,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: progress_jsxFileName,
    lineNumber: 72,
    columnNumber: 5
  }, undefined);
};

if (__DEV__) {
  Progress.displayName = 'NextUI - Progress';
}

Progress.toString = () => '.nextui-progress';

const MemoProgress = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Progress);
/* harmony default export */ const progress = (with_defaults(MemoProgress, progress_defaultProps));
;// CONCATENATED MODULE: ./src/progress/index.ts


/* harmony default export */ const src_progress = (progress);
;// CONCATENATED MODULE: ./src/utils/clear-icon.tsx
var clear_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/utils/clear-icon.tsx";



const clear_icon_defaultProps = {
  width: 24,
  height: 24,
  plain: false,
  className: ''
};

const Close = ({
  size,
  fill,
  plain,
  width,
  height,
  className,
  ...props
}) => {
  if (plain) {
    return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
      width: size || width,
      height: size || height,
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: fill,
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      className: className,
      ...props,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M18 6L6 18M6 6l12 12"
      }, void 0, false, {
        fileName: clear_icon_jsxFileName,
        lineNumber: 43,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: clear_icon_jsxFileName,
      lineNumber: 31,
      columnNumber: 7
    }, undefined);
  }

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
    width: size || width,
    height: size || height,
    viewBox: "0 0 24 24",
    className: className,
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M12 2a10 10 0 1010 10A10.016 10.016 0 0012 2zm3.36 12.3a.754.754 0 010 1.06.748.748 0 01-1.06 0l-2.3-2.3-2.3 2.3a.748.748 0 01-1.06 0 .754.754 0 010-1.06l2.3-2.3-2.3-2.3A.75.75 0 019.7 8.64l2.3 2.3 2.3-2.3a.75.75 0 011.06 1.06l-2.3 2.3z",
      fill: fill
    }, void 0, false, {
      fileName: clear_icon_jsxFileName,
      lineNumber: 55,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: clear_icon_jsxFileName,
    lineNumber: 48,
    columnNumber: 5
  }, undefined);
};

const MemoClose = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_.memo(Close);
/* harmony default export */ const clear_icon = (with_defaults(MemoClose, clear_icon_defaultProps));
;// CONCATENATED MODULE: ./src/modal/modal.styles.ts

const reboundAnimation = keyframes({
  '0%': {
    transform: 'scale(0.95)'
  },
  '40%': {
    transform: 'scale(1.02)'
  },
  '80%': {
    transform: 'scale(0.98)'
  },
  '100%': {
    transform: 'scale(1)'
  }
});
const appearanceIn = keyframes({
  '0%': {
    opacity: 0,
    transform: 'scale(0.95)'
  },
  '60%': {
    opacity: 0.75,
    transform: 'scale(1.02)'
  },
  '100%': {
    opacity: 1,
    transform: 'scale(1)'
  }
});
const appearanceOut = keyframes({
  '0%': {
    opacity: 1,
    transform: 'scale(1)'
  },
  '100%': {
    opacity: 0,
    transform: 'scale(0.95)'
  }
});
const StyledModalHideTab = styled('div', {
  outline: 'none',
  overflow: 'hidden',
  width: 0,
  height: 0,
  opacity: 0
});
const StyledModalCloseButton = styled('button', {
  position: 'absolute',
  background: 'transparent',
  border: 'none',
  zIndex: '$1',
  top: '$space$3',
  right: '$space$2',
  margin: 0,
  d: 'inline-flex',
  ai: 'center',
  height: 'auto',
  cursor: 'pointer',
  boxSizing: 'border-box',
  transition: '$default',
  padding: 'calc($space$sm * 0.5)',
  color: '$accents4',
  br: '$space$5',
  svg: {
    color: 'currentColor'
  },
  '&:hover': {
    svg: {
      opacity: 0.8
    }
  },
  variants: {
    disabled: {
      true: {
        cursor: 'not-allowed'
      }
    }
  }
}, sharedFocus);
const StyledModalHeader = styled('div', {
  display: 'flex',
  flexShrink: 0,
  ai: 'center',
  ov: 'hidden',
  color: 'inherit',
  padding: '$sm $10',
  fs: '$xs',
  variants: {
    noPadding: {
      true: {
        padding: 0
      }
    },
    autoMargin: {
      true: {
        '> *:first-child': {
          mt: 0
        },
        '> *:last-child': {
          mb: 0
        }
      }
    }
  }
});
const StyledModalBody = styled('div', {
  display: 'flex',
  flexDirection: 'column',
  flex: '1 1 auto',
  padding: '$sm $10',
  oy: 'auto',
  position: 'relative',
  ta: 'left',
  variants: {
    noPadding: {
      true: {
        flex: 1,
        padding: 0
      }
    },
    autoMargin: {
      true: {
        '> *:first-child': {
          mt: 0
        },
        '> *': {
          mb: '$8'
        },
        '> *:last-child': {
          mb: 0
        }
      }
    }
  }
});
const StyledModalFooter = styled('div', {
  d: 'flex',
  flexWrap: 'wrap',
  flexShrink: 0,
  overflow: 'hidden',
  color: 'inherit',
  ai: 'center',
  fs: '$xs',
  padding: '$sm $lg',
  variants: {
    noPadding: {
      true: {
        padding: 0
      }
    },
    autoMargin: {
      true: {
        '> *': {
          m: '$2'
        }
      }
    }
  }
});
const StyledModal = styled('section', {
  maxWidth: '100%',
  verticalAlign: 'middle',
  overflow: 'hidden',
  height: 'fit-content(20em)',
  maxHeight: 'inherit',
  display: 'flex',
  outline: 'none',
  flexDirection: 'column',
  position: 'relative',
  boxSizing: 'border-box',
  color: '$foreground',
  br: '$lg',
  boxShadow: '$lg',
  bg: '$background',
  animationFillMode: 'forwards',
  '&.nextui-modal-wrapper-enter:not(.nextui-modal-rendered)': {
    animationName: appearanceIn,
    animationDuration: '200ms',
    animationTimingFunction: 'ease-in',
    animationDirection: 'normal'
  },
  '&.nextui-modal-wrapper-leave': {
    animationName: appearanceOut,
    animationDuration: '50ms',
    animationTimingFunction: 'ease-out'
  },
  variants: {
    fullScreen: {
      true: {
        size: '100%',
        maxHeight: '100%'
      },
      false: {
        '&.nextui-modal-rebound': {
          animationDuration: '250ms',
          animationName: reboundAnimation,
          animationTimingFunction: 'ease',
          animationFillMode: 'forwards'
        }
      }
    },
    scroll: {
      true: {
        maxHeight: 'calc(100vh - 200px)'
      }
    },
    closeButton: {
      true: {
        paddingTop: '$lg',
        [`& ${StyledModalCloseButton}`]: {
          svg: {
            size: '$10'
          }
        }
      }
    },
    isDark: {
      true: {
        bg: '$accents1'
      }
    }
  },
  compoundVariants: [{
    // scroll && fullScreen
    scroll: true,
    fullScreen: true,
    css: {
      maxHeight: '100%'
    }
  }]
});
;// CONCATENATED MODULE: ./src/modal/modal-close-button.tsx
var modal_close_button_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-close-button.tsx";





const ModalCloseButton = ({
  onClick,
  ...props
}) => {
  const clickHandler = event => {
    event.preventDefault();
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
    onClick && onClick(event);
  };

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalCloseButton, {
    type: "button",
    onClick: clickHandler,
    className: "nextui-modal-close-icon",
    "aria-label": "Close",
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(clear_icon, {
      plain: true,
      size: 18,
      className: "nextui-modal-close-icon-svg",
      fill: "currentColor",
      "aria-hidden": true
    }, void 0, false, {
      fileName: modal_close_button_jsxFileName,
      lineNumber: 39,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: modal_close_button_jsxFileName,
    lineNumber: 32,
    columnNumber: 5
  }, undefined);
};

ModalCloseButton.toString = () => '.nextui-modal-close-icon';

const MemoModalCloseButton = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalCloseButton);
/* harmony default export */ const modal_close_button = (MemoModalCloseButton);
;// CONCATENATED MODULE: ./src/modal/modal-wrapper.tsx
var modal_wrapper_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-wrapper.tsx";











const modal_wrapper_defaultProps = {
  className: '',
  visible: false,
  rebound: false
};
const modal_wrapper_preClass = 'nextui-modal';

const ModalWrapper = ({
  className,
  children,
  visible,
  fullScreen,
  closeButton,
  rebound,
  animated,
  onCloseButtonClick,
  scroll,
  ...props
}) => {
  const modalContent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const tabStart = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const tabEnd = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [rendered, setRendered] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const {
    isDark
  } = src_use_theme();
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const timer = setTimeout(() => {
      setRendered(true);
      clearTimeout(timer);
    }, 300);
    return () => clearTimeout(timer);
  }, []);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!visible) return;
    const activeElement = document.activeElement;
    const isChild = isChildElement(modalContent.current, activeElement);
    if (isChild) return;
    tabStart.current && tabStart.current.focus();
  }, [visible]);

  const onKeyDown = event => {
    const isTabDown = event.keyCode === KeyCode.Tab;
    if (!visible || !isTabDown) return;
    const activeElement = document.activeElement;

    if (event.shiftKey) {
      if (activeElement === tabStart.current) {
        tabEnd.current && tabEnd.current.focus();
      }
    } else {
      if (activeElement === tabEnd.current) {
        tabStart.current && tabStart.current.focus();
      }
    }
  };

  const handleClose = () => {
    onCloseButtonClick && onCloseButtonClick();
  };

  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  const renderChildren = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
      (0,jsx_dev_runtime.jsxDEV)(StyledModal, {
        role: "dialog",
        tabIndex: -1,
        "aria-modal": visible,
        ref: modalContent,
        "data-state": getState,
        fullScreen: fullScreen,
        scroll: scroll,
        closeButton: closeButton,
        isDark: isDark,
        className: clsx(modal_wrapper_preClass, `${modal_wrapper_preClass}--${getState}`, {
          [`${modal_wrapper_preClass}-fullscreen`]: fullScreen,
          [`${modal_wrapper_preClass}-with-close-button`]: closeButton,
          [`${modal_wrapper_preClass}-rebound`]: rebound,
          [`${modal_wrapper_preClass}-rendered`]: rendered
        }, className),
        ...props,
        onKeyDown: onKeyDown,
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalHideTab, {
          role: "button",
          tabIndex: 0,
          className: `${modal_wrapper_preClass}-hide-tab`,
          "aria-hidden": "true",
          ref: tabStart
        }, void 0, false, {
          fileName: modal_wrapper_jsxFileName,
          lineNumber: 127,
          columnNumber: 9
        }, undefined), closeButton && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(modal_close_button, {
          onClick: handleClose
        }, void 0, false, {
          fileName: modal_wrapper_jsxFileName,
          lineNumber: 134,
          columnNumber: 25
        }, undefined), children, /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalHideTab, {
          role: "button",
          tabIndex: 0,
          className: `${modal_wrapper_preClass}-hide-tab`,
          "aria-hidden": "true",
          ref: tabEnd
        }, void 0, false, {
          fileName: modal_wrapper_jsxFileName,
          lineNumber: 136,
          columnNumber: 9
        }, undefined)]
      }, void 0, true, {
        fileName: modal_wrapper_jsxFileName,
        lineNumber: 103,
        columnNumber: 7
      }, undefined)
    );
  }, [rebound, children]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
    children: animated ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
      name: `${modal_wrapper_preClass}-wrapper`,
      visible: visible,
      enterTime: 20,
      leaveTime: 20,
      clearTime: 300,
      children: renderChildren
    }, void 0, false, {
      fileName: modal_wrapper_jsxFileName,
      lineNumber: 150,
      columnNumber: 9
    }, undefined) : visible ? renderChildren : null
  }, void 0, false);
};

ModalWrapper.toString = () => '.nextui-modal-wrapper';

/* harmony default export */ const modal_wrapper = (with_defaults(ModalWrapper, modal_wrapper_defaultProps));
;// CONCATENATED MODULE: ./src/modal/modal-context.ts

const modal_context_defaultContext = {};
const ModalContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(modal_context_defaultContext);
const useModalContext = () => React.useContext(ModalContext);
;// CONCATENATED MODULE: ./src/modal/modal.tsx
var modal_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal.tsx";











const modal_defaultProps = {
  width: '400px',
  className: '',
  preventClose: false,
  fullScreen: false,
  closeButton: false,
  animated: true,
  blur: false,
  scroll: false,
  noPadding: false
};

const Modal = ({
  children,
  onClose,
  onOpen,
  open,
  autoMargin,
  width: wrapperWidth,
  className,
  preventClose,
  blur,
  animated,
  fullScreen,
  noPadding,
  ...props
}) => {
  const portal = src_use_portal('modal');
  const [, setBodyHidden] = src_use_body_scroll(null, {
    scrollLayer: true
  });
  const [visible, setVisible, visibleRef] = src_use_current_state(false);
  const [rebound, setRebound] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);

  const closeModal = () => {
    onClose && onClose();
    setVisible(false);
    setBodyHidden(false);
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (open === undefined) return;

    if (open) {
      onOpen && onOpen();
    }

    if (!open && visibleRef.current) {
      onClose && onClose();
    }

    setVisible(open);
    setBodyHidden(open);
  }, [open]);

  const toggleRebound = () => {
    setRebound(true);
    const timer = setTimeout(() => {
      setRebound(false);
      clearTimeout(timer);
    }, 300);
  };

  const {
    bindings
  } = src_use_keyboard(() => {
    if (preventClose) {
      toggleRebound();
      return;
    }

    closeModal();
  }, KeyCode.Escape, {
    disableGlobalEvent: true,
    preventDefault: true
  });

  const closeFromBackdrop = () => {
    if (preventClose) {
      toggleRebound();
      return;
    }

    closeModal();
  };

  const modalConfig = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    close: closeModal,
    autoMargin,
    noPadding
  }), []);
  if (!portal) return null;
  return /*#__PURE__*/(0,external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_.createPortal)( /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(ModalContext.Provider, {
    value: modalConfig,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_backdrop, {
      onClick: closeFromBackdrop,
      visible: visible,
      maxWidth: wrapperWidth,
      fullScreen: fullScreen,
      blur: blur,
      animated: animated,
      ...bindings,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(modal_wrapper, {
        visible: visible,
        onCloseButtonClick: closeModal,
        className: className,
        fullScreen: fullScreen,
        rebound: rebound,
        animated: animated,
        ...props,
        children: children
      }, void 0, false, {
        fileName: modal_jsxFileName,
        lineNumber: 142,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: modal_jsxFileName,
      lineNumber: 133,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: modal_jsxFileName,
    lineNumber: 132,
    columnNumber: 5
  }, undefined), portal);
};

if (__DEV__) {
  src_backdrop.displayName = 'NextUI - Modal';
}

Modal.toString = () => '.nextui-modal';

Modal.defaultProps = modal_defaultProps;
/* harmony default export */ const modal = (Modal);
;// CONCATENATED MODULE: ./src/modal/modal-header.tsx
var modal_header_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-header.tsx";






const modal_header_defaultProps = {
  className: '',
  justify: 'center',
  autoMargin: true
};
const modal_header_preClass = 'nextui-modal-header';

const ModalHeader = ({
  children,
  className,
  justify,
  autoMargin: autoMarginProp,
  css,
  ...props
}) => {
  const {
    autoMargin: autoMarginContext,
    noPadding
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(ModalContext);
  const autoMargin = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return autoMarginContext !== undefined ? autoMarginContext : autoMarginProp;
  }, [autoMarginProp, autoMarginContext]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalHeader, {
    className: clsx(modal_header_preClass, {
      [`${modal_header_preClass}-auto-margin`]: autoMargin,
      [`${modal_header_preClass}-no-padding`]: noPadding
    }, className),
    noPadding: noPadding,
    autoMargin: autoMargin,
    css: {
      justifyContent: justify,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: modal_header_jsxFileName,
    lineNumber: 47,
    columnNumber: 5
  }, undefined);
};

ModalHeader.toString = () => '.nextui-modal-header';

const MemoModalHeader = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalHeader);
/* harmony default export */ const modal_header = (with_defaults(MemoModalHeader, modal_header_defaultProps));
;// CONCATENATED MODULE: ./src/modal/modal-body.tsx
var modal_body_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-body.tsx";






const modal_body_defaultProps = {
  className: '',
  autoMargin: true
};
const modal_body_preClass = 'nextui-modal-body';

const ModalBody = ({
  className,
  children,
  autoMargin: autoMarginProp,
  ...props
}) => {
  const {
    autoMargin: autoMarginContext,
    noPadding
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(ModalContext);
  const autoMargin = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return autoMarginContext !== undefined ? autoMarginContext : autoMarginProp;
  }, [autoMarginProp, autoMarginContext]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalBody, {
    className: clsx(modal_body_preClass, {
      [`${modal_body_preClass}-auto-margin`]: autoMargin,
      [`${modal_body_preClass}-no-padding`]: noPadding
    }, className),
    autoMargin: autoMargin,
    noPadding: noPadding,
    ...props,
    children: children
  }, void 0, false, {
    fileName: modal_body_jsxFileName,
    lineNumber: 41,
    columnNumber: 5
  }, undefined);
};

ModalBody.toString = () => '.nextui-modal-body';

const MemoModalBody = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalBody);
/* harmony default export */ const modal_body = (with_defaults(MemoModalBody, modal_body_defaultProps));
;// CONCATENATED MODULE: ./src/modal/modal-footer.tsx
var modal_footer_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-footer.tsx";






const modal_footer_defaultProps = {
  className: '',
  justify: 'flex-end',
  autoMargin: true
};
const modal_footer_preClass = 'nextui-modal-footer';

const ModalFooter = ({
  children,
  className,
  justify,
  autoMargin: autoMarginProp,
  css,
  ...props
}) => {
  const {
    autoMargin: autoMarginContext,
    noPadding
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(ModalContext);
  const autoMargin = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return autoMarginContext !== undefined ? autoMarginContext : autoMarginProp;
  }, [autoMarginProp, autoMarginContext]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalFooter, {
    className: clsx(modal_footer_preClass, {
      [`${modal_footer_preClass}-auto-margin`]: autoMargin,
      [`${modal_footer_preClass}-no-padding`]: noPadding
    }, className),
    noPadding: noPadding,
    autoMargin: autoMargin,
    css: {
      justifyContent: justify,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: modal_footer_jsxFileName,
    lineNumber: 46,
    columnNumber: 5
  }, undefined);
};

ModalFooter.toString = () => '.nextui-modal-footer';

const MemoModalFooter = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalFooter);
/* harmony default export */ const modal_footer = (with_defaults(MemoModalFooter, modal_footer_defaultProps));
;// CONCATENATED MODULE: ./src/modal/index.ts




modal.Header = modal_header;
modal.Body = modal_body;
modal.Footer = modal_footer;

/* harmony default export */ const src_modal = (modal);
;// CONCATENATED MODULE: ./src/modal/use-modal.ts


const useModal = (initialVisible = false) => {
  const [visible, setVisible, currentRef] = src_use_current_state(initialVisible);
  return {
    visible,
    setVisible,
    currentRef,
    bindings: {
      open: visible,
      onClose: () => setVisible(false)
    }
  };
};

/* harmony default export */ const use_modal = (useModal);
;// CONCATENATED MODULE: ./src/pagination/pagination.styles.ts

const paginationAnimation = keyframes({
  '0%': {
    transform: 'scale(1)'
  },
  '60%': {
    transform: 'scale($$paginationScaleTransform)'
  },
  '100%': {
    transform: 'scale(1)'
  }
});
const StyledPaginationEllipsis = styled('svg', {
  color: 'currentColor',
  stroke: 'currentColor',
  variants: {
    isEllipsis: {
      true: {
        transform: '0deg'
      }
    },
    isBefore: {
      true: {}
    }
  },
  compoundVariants: [{
    // isEllipsis && isBefore
    isEllipsis: true,
    isBefore: true,
    css: {
      transform: 'rotate(180deg)'
    }
  }]
});
const StyledPaginationIcon = styled('svg', {
  transform: 'rotate(180deg)',
  variants: {
    isPrev: {
      true: {
        transform: 'rotate(0deg)'
      }
    }
  }
});
const StyledPaginationItemContent = styled('span', {
  position: 'relative',
  display: 'inline-flex',
  alignItems: 'center',
  top: 0,
  left: 0,
  zIndex: '$2'
});
const StyledPaginationItem = styled('button', {
  border: 'none',
  position: 'relative',
  display: 'inline-flex',
  margin: '0 $$paginationItemMargin',
  ai: 'center',
  jc: 'center',
  padding: 0,
  boxSizing: 'border-box',
  tt: 'capitalize',
  us: 'none',
  whiteSpace: 'nowrap',
  ta: 'center',
  verticalAlign: 'middle',
  bs: 'none',
  outline: 'none',
  height: '$$paginationSize',
  minWidth: '$$paginationSize',
  fs: 'inherit',
  cursor: 'pointer',
  br: '$$paginationItemRadius',
  color: '$text',
  bg: '$accents1',
  '@motion': {
    transition: 'none'
  },
  '&:hover': {
    bg: '$accents2'
  },
  [`& ${StyledPaginationIcon}`]: {
    size: '$$paginationFontSize'
  },
  [`& ${StyledPaginationEllipsis}`]: {
    size: '$$paginationFontSize'
  },
  variants: {
    active: {
      true: {
        fontWeight: '$bold',
        cursor: 'default',
        boxShadow: '$sm',
        [`& ${StyledPaginationItemContent}`]: {
          color: '$white'
        }
      }
    },
    disabled: {
      true: {
        color: '$accents4',
        cursor: 'not-allowed'
      }
    },
    bordered: {
      true: {
        bg: 'transparent',
        border: '$$paginationItemBorderWeight solid $accents2'
      }
    },
    onlyDots: {
      true: {}
    },
    preserveContent: {
      true: {}
    },
    animated: {
      true: {
        transition: 'transform 0.25s ease 0s, background 0.25s ease 0s, box-shadow 0.25s ease 0s'
      },
      false: {
        transition: 'none'
      }
    }
  },
  compoundVariants: [// onlyDots && !preserveContent
  {
    onlyDots: true,
    preserveContent: false,
    css: {
      [`& ${StyledPaginationItemContent}`]: {
        display: 'none'
      }
    }
  }, // animated && !disabled && !active
  {
    animated: true,
    disabled: false,
    active: false,
    css: {
      '&:active': {
        transform: 'scale($$paginationScaleTransform)',
        fs: 'calc($$paginationFontSize * 0.9)'
      }
    }
  }]
}, sharedFocus);
const StyledPaginationHighlight = styled('div', {
  position: 'absolute',
  contain: 'strict',
  top: '0px',
  zIndex: '$1',
  bg: '$$paginationColor',
  br: '$$paginationItemRadius',
  height: '$$paginationSize',
  minWidth: '$$paginationSize',
  animationName: `${paginationAnimation}`,
  animationDirection: 'normal',
  '@motion': {
    transition: 'none'
  },
  variants: {
    animated: {
      true: {
        animationDuration: '350ms',
        animationTimingFunction: 'ease',
        transition: 'left 350ms ease'
      },
      false: {
        animationDuration: 'none',
        animationTimingFunction: 'none',
        transition: 'none'
      }
    },
    noMargin: {
      true: {
        br: '$squared'
      }
    },
    rounded: {
      true: {}
    },
    shadow: {
      true: {
        normalShadowVar: '$$paginationShadowColor'
      }
    }
  },
  compoundVariants: [{
    // rounded && noMargin
    rounded: true,
    noMargin: true,
    css: {
      br: '$pill'
    }
  }]
});
const StyledPagination = styled('nav', {
  m: 0,
  p: 0,
  d: 'inline-flex',
  position: 'relative',
  fontVariant: 'tabular-nums',
  fontFeatureSettings: 'tnum',
  variants: {
    color: {
      default: {
        $$paginationColor: '$colors$primary',
        $$paginationShadowColor: '$colors$primaryShadow'
      },
      primary: {
        $$paginationColor: '$colors$primary',
        $$paginationShadowColor: '$colors$primaryShadow'
      },
      secondary: {
        $$paginationColor: '$colors$secondary',
        $$paginationShadowColor: '$colors$secondaryShadow'
      },
      success: {
        $$paginationColor: '$colors$success',
        $$paginationShadowColor: '$colors$successShadow'
      },
      warning: {
        $$paginationColor: '$colors$warning',
        $$paginationShadowColor: '$colors$warningShadow'
      },
      error: {
        $$paginationColor: '$colors$error',
        $$paginationShadowColor: '$colors$errorShadow'
      },
      gradient: {
        $$paginationColor: '$colors$gradient',
        $$paginationShadowColor: '$colors$primaryShadow'
      }
    },
    size: {
      xs: {
        $$paginationWidth: '$space$9',
        $$paginationFontSize: '$space$5',
        fs: ' $$paginationFontSize'
      },
      sm: {
        $$paginationWidth: '$space$11',
        $$paginationFontSize: '$space$6',
        fs: '$$paginationFontSize'
      },
      md: {
        $$paginationWidth: '$space$12',
        $$paginationFontSize: '$space$7',
        fs: '$$paginationFontSize'
      },
      lg: {
        $$paginationWidth: '$space$14',
        $$paginationFontSize: '$space$8',
        fs: '$$paginationFontSize'
      },
      xl: {
        $$paginationWidth: '$space$15',
        $$paginationFontSize: '$space$9',
        fs: '$$paginationFontSize'
      }
    },
    borderWeight: {
      light: {
        $$paginationItemBorderWeight: '$borderWeights$light'
      },
      normal: {
        $$paginationItemBorderWeight: '$borderWeights$normal'
      },
      bold: {
        $$paginationItemBorderWeight: '$borderWeights$bold'
      },
      extrabold: {
        $$paginationItemBorderWeight: '$borderWeights$extrabold'
      },
      black: {
        $$paginationItemBorderWeight: '$borderWeights$black'
      }
    },
    bordered: {
      true: {}
    },
    onlyDots: {
      true: {
        $$paginationSize: 'calc($$paginationWidth / 2)',
        $$paginationItemRadius: '$radii$pill',
        $$paginationScaleTransform: 0.8
      },
      false: {
        $$paginationSize: '$$paginationWidth',
        $$paginationScaleTransform: 0.9
      }
    },
    rounded: {
      true: {
        $$paginationItemRadius: '$radii$pill'
      },
      false: {
        $$paginationItemRadius: '$radii$squared'
      }
    },
    noMargin: {
      true: {
        $$paginationItemRadius: '0px',
        $$paginationItemMargin: '0',
        [`& ${StyledPaginationItem}:first-of-type`]: {
          btlr: '$squared',
          bblr: '$squared'
        },
        [`& ${StyledPaginationItem}:last-of-type`]: {
          btrr: '$squared',
          bbrr: '$squared'
        }
      },
      false: {
        $$paginationItemMargin: '$space$1'
      }
    }
  },
  compoundVariants: [{
    // bordered && noMargin
    bordered: true,
    noMargin: true,
    css: {
      [`& ${StyledPaginationItem}:not(:last-child)`]: {
        borderRight: 0
      }
    }
  }, {
    // noMargin && rounded
    noMargin: true,
    rounded: true,
    css: {
      $$paginationItemRadius: '0px'
    }
  }],
  defaultVariants: {
    color: 'default',
    size: 'md',
    borderWeight: 'normal',
    onlyDots: false,
    noMargin: false,
    rounded: false
  }
});
;// CONCATENATED MODULE: ./src/pagination/pagination-item.tsx
var pagination_item_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-item.tsx";






const pagination_item_defaultProps = {
  preserveContent: false
};

const getItemAriaLabel = page => {
  if (!page) return;

  switch (page) {
    case DOTS:
      return 'dots element';

    case '<':
      return 'previous page button';

    case '>':
      return 'next page button';

    case 'first':
      return 'first page button';

    case 'last':
      return 'last page button';

    default:
      return `${page} item`;
  }
};

const pagination_item_preClass = 'nextui-pagination-item';

const PaginationItem = ({
  active,
  value,
  children,
  disabled,
  animated,
  bordered,
  onClick,
  onlyDots,
  preserveContent,
  ...props
}) => {
  const ariaLabel = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => active ? `${getItemAriaLabel(value)} active` : getItemAriaLabel(value), [value, active]);

  const clickHandler = event => {
    if (disabled) return;
    onClick && onClick(event);
  };

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationItem, {
    className: clsx(pagination_item_preClass, {
      [`${pagination_item_preClass}-active`]: active,
      [`${pagination_item_preClass}-animated`]: animated,
      [`${pagination_item_preClass}-disabled`]: disabled,
      [`${pagination_item_preClass}-bordered`]: bordered,
      [`${pagination_item_preClass}-only-dots`]: onlyDots,
      [`${pagination_item_preClass}-preserve-content`]: preserveContent
    }),
    animated: animated,
    active: active,
    disabled: disabled,
    bordered: bordered,
    onlyDots: onlyDots,
    preserveContent: preserveContent,
    onClick: clickHandler,
    "aria-label": ariaLabel,
    tabIndex: disabled ? -1 : 0,
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationItemContent, {
      className: `${pagination_item_preClass}-content`,
      children: children
    }, void 0, false, {
      fileName: pagination_item_jsxFileName,
      lineNumber: 100,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: pagination_item_jsxFileName,
    lineNumber: 80,
    columnNumber: 5
  }, undefined);
};

PaginationItem.toString = () => '.nextui-pagination-item';

/* harmony default export */ const pagination_item = (with_defaults(PaginationItem, pagination_item_defaultProps));
;// CONCATENATED MODULE: ./src/pagination/pagination-ellipsis.tsx
var pagination_ellipsis_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-ellipsis.tsx";





const PaginationEllipsis = ({
  value,
  isBefore,
  onlyDots,
  animated,
  bordered,
  onClick
}) => {
  const [showMore, setShowMore] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_item, {
    value: value,
    onlyDots: onlyDots,
    animated: animated,
    bordered: bordered,
    onClick: e => onClick && onClick(e),
    onMouseEnter: () => setShowMore(true),
    onMouseLeave: () => setShowMore(false),
    children: showMore ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationEllipsis, {
      role: "presentation",
      focusable: "false",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      strokeWidth: "1.5",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      fill: "none",
      shapeRendering: "geometricPrecision",
      className: "nextui-pagination-ellipsis",
      isEllipsis: true,
      isBefore: isBefore,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M13 17l5-5-5-5"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 49,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M6 17l5-5-5-5"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 50,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: pagination_ellipsis_jsxFileName,
      lineNumber: 35,
      columnNumber: 9
    }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationEllipsis, {
      viewBox: "0 0 24 24",
      strokeWidth: "1.5",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      fill: "none",
      shapeRendering: "geometricPrecision",
      isEllipsis: false,
      isBefore: isBefore,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "12",
        cy: "12",
        r: "1",
        fill: "currentColor"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 63,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "19",
        cy: "12",
        r: "1",
        fill: "currentColor"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 64,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "5",
        cy: "12",
        r: "1",
        fill: "currentColor"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 65,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: pagination_ellipsis_jsxFileName,
      lineNumber: 53,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: pagination_ellipsis_jsxFileName,
    lineNumber: 25,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ const pagination_ellipsis = (PaginationEllipsis);
;// CONCATENATED MODULE: ./src/pagination/pagination-icon.tsx
var pagination_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-icon.tsx";





const PaginationIcon = ({
  isPrev,
  disabled,
  onlyDots,
  animated,
  bordered,
  onClick,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_item, {
    preserveContent: true,
    value: isPrev ? '<' : '>',
    bordered: bordered,
    animated: animated,
    onlyDots: onlyDots,
    disabled: disabled,
    onClick: e => onClick && onClick(e),
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationIcon, {
      role: "presentation",
      focusable: "false",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className: "nextui-pagination-icon",
      isPrev: isPrev,
      ...props,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M15.5 19l-7-7 7-7",
        stroke: "currentColor",
        strokeWidth: 1.5,
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }, void 0, false, {
        fileName: pagination_icon_jsxFileName,
        lineNumber: 48,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: pagination_icon_jsxFileName,
      lineNumber: 38,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: pagination_icon_jsxFileName,
    lineNumber: 29,
    columnNumber: 5
  }, undefined);
};

PaginationIcon.toString = () => '.nextui-pagination-icon';

const MemoPaginationIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(PaginationIcon);
/* harmony default export */ const pagination_icon = (MemoPaginationIcon);
;// CONCATENATED MODULE: ./src/pagination/pagination-highlight.tsx
var pagination_highlight_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-highlight.tsx";





const PaginationHighlight = ({
  active,
  shadow,
  noMargin,
  rounded,
  css,
  ...props
}) => {
  const leftValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => noMargin ? `$$paginationSize * ${active}` : `$$paginationSize * ${active} + ${active * 4 + 2}px`, [active, noMargin]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationHighlight, {
    "aria-hidden": true,
    shadow: shadow,
    rounded: rounded,
    className: clsx('nextui-pagination-highlight', {
      'nextui-pagination-highlight--rounded': rounded,
      'nextui-pagination-highlight--active': active,
      'nextui-pagination-highlight--no-margin': noMargin,
      'nextui-pagination-highlight--shadow': shadow
    }),
    noMargin: noMargin,
    css: {
      left: `calc(${leftValue})`,
      ...css
    },
    ...props
  }, void 0, false, {
    fileName: pagination_highlight_jsxFileName,
    lineNumber: 37,
    columnNumber: 5
  }, undefined);
};

PaginationHighlight.toString = () => '.nextui-pagination-highlight';

/* harmony default export */ const pagination_highlight = (PaginationHighlight);
;// CONCATENATED MODULE: ./src/pagination/pagination.tsx
var pagination_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination.tsx";










const pagination_defaultProps = {
  shadow: false,
  controls: true,
  bordered: false,
  initialPage: 1,
  siblings: 1,
  boundaries: 1,
  dotsJump: 5,
  total: 1,
  loop: false,
  animated: true,
  onlyDots: false,
  noMargin: false,
  rounded: false
};
const pagination_preClass = 'nextui-pagination';

const Pagination = ({
  page,
  initialPage,
  onlyDots,
  total,
  loop,
  siblings,
  boundaries,
  shadow,
  animated,
  bordered,
  dotsJump,
  controls,
  noMargin,
  onChange,
  rounded,
  ...props
}) => {
  const {
    range,
    active,
    setPage,
    previous,
    next,
    first,
    last
  } = use_pagination({
    page,
    initialPage,
    siblings: onlyDots ? 10 : siblings,
    boundaries: onlyDots ? 10 : boundaries,
    total,
    onChange
  });
  const renderItem = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((value, index) => {
    if (value === DOTS) {
      const isBefore = index < range.indexOf(active);
      return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_ellipsis, {
        value: value,
        bordered: bordered,
        animated: animated,
        isBefore: isBefore,
        onlyDots: onlyDots,
        onClick: () => isBefore ? setPage(active - dotsJump >= 1 ? active - dotsJump : 1) : setPage(active + dotsJump <= total ? active + dotsJump : total)
      }, `${pagination_preClass}-item-${value}-${index}`, false, {
        fileName: pagination_jsxFileName,
        lineNumber: 90,
        columnNumber: 11
      }, undefined);
    }

    return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_item, {
      value: value,
      animated: animated,
      bordered: bordered,
      active: value === active,
      onClick: () => setPage(value),
      onlyDots: onlyDots,
      children: value
    }, `${pagination_preClass}-item-${value}-${index}`, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 108,
      columnNumber: 9
    }, undefined);
  }, [total, onlyDots, active, bordered, animated]);

  const handleNext = () => {
    if (loop && active === total) {
      return first();
    }

    return next();
  };

  const handlePrevious = () => {
    if (loop && active === 1) {
      return last();
    }

    return previous();
  };

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPagination, {
    noMargin: noMargin,
    bordered: bordered,
    rounded: rounded,
    onlyDots: onlyDots,
    className: clsx(pagination_preClass, {
      [`${pagination_preClass}--no-margin`]: noMargin,
      [`${pagination_preClass}--bordered`]: bordered,
      [`${pagination_preClass}--shadow`]: shadow,
      [`${pagination_preClass}--rounded`]: rounded
    }),
    ...props,
    children: [controls && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_icon, {
      isPrev: true,
      bordered: bordered,
      animated: animated,
      onlyDots: onlyDots,
      onClick: handlePrevious,
      disabled: !loop && active === 1
    }, void 0, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 153,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_highlight, {
      noMargin: noMargin,
      animated: animated,
      shadow: shadow,
      rounded: rounded,
      active: controls ? range.indexOf(active) + 1 : range.indexOf(active)
    }, void 0, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 162,
      columnNumber: 7
    }, undefined), range.map(renderItem), controls && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_icon, {
      bordered: bordered,
      animated: animated,
      onlyDots: onlyDots,
      onClick: handleNext,
      disabled: !loop && active === total
    }, void 0, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 171,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: pagination_jsxFileName,
    lineNumber: 139,
    columnNumber: 5
  }, undefined);
};

Pagination.defaultProps = pagination_defaultProps;

if (__DEV__) {
  Pagination.displayName = 'NextUI - Pagination';
}

Pagination.toString = () => '.nextui-pagination';

/* harmony default export */ const pagination = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Pagination));
;// CONCATENATED MODULE: ./src/pagination/index.ts


/* harmony default export */ const src_pagination = (pagination);
;// CONCATENATED MODULE: ../../node_modules/@react-aria/label/dist/module.js

/**
 * Provides the accessibility implementation for labels and their associated elements.
 * Labels provide context for user inputs.
 * @param props - The props for labels and fields.
 */

function useLabel(props) {
  let {
    id,
    label,
    'aria-labelledby': ariaLabelledby,
    'aria-label': ariaLabel,
    labelElementType = 'label'
  } = props;
  id = useId(id);
  let labelId = useId();
  let labelProps = {};

  if (label) {
    ariaLabelledby = ariaLabelledby ? ariaLabelledby + " " + labelId : labelId;
    labelProps = {
      id: labelId,
      htmlFor: labelElementType === 'label' ? id : undefined
    };
  } else if (!ariaLabelledby && !ariaLabel) {
    console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');
  }

  let fieldProps = useLabels({
    id,
    'aria-label': ariaLabel,
    'aria-labelledby': ariaLabelledby
  });
  return {
    labelProps,
    fieldProps
  };
}
/**
 * Provides the accessibility implementation for input fields.
 * Fields accept user input, gain context from their label, and may display a description or error message.
 * @param props - Props for the Field.
 */

function useField(props) {
  let {
    description,
    errorMessage,
    validationState
  } = props;
  let {
    labelProps,
    fieldProps
  } = useLabel(props);
  let descriptionId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);
  let errorMessageId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);
  fieldProps = mergeProps(fieldProps, {
    'aria-describedby': [descriptionId, // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
    errorMessageId, props['aria-describedby']].filter(Boolean).join(' ') || undefined
  });
  return {
    labelProps,
    fieldProps,
    descriptionProps: {
      id: descriptionId
    },
    errorMessageProps: {
      id: errorMessageId
    }
  };
}
;// CONCATENATED MODULE: ./src/input/input-props.ts
const input_props_defaultProps = {
  disabled: false,
  bordered: false,
  readOnly: false,
  clearable: false,
  rounded: false,
  animated: true,
  underlined: false,
  shadow: true,
  fullWidth: false,
  contentClickable: false,
  contentRightStyling: true,
  contentLeftStyling: true,
  required: false,
  width: 'initial',
  size: 'md',
  color: 'default',
  helperColor: 'default',
  status: 'default',
  borderWeight: 'normal',
  autoComplete: 'off',
  className: '',
  placeholder: '',
  initialValue: ''
};
;// CONCATENATED MODULE: ./src/input/input.styles.ts

const baseInputValues = {
  $$inputColor: '$colors$accents1',
  $$inputTextColor: '$colors$text',
  $$inputPlaceholderColor: '$colors$accents3',
  $$inputPlaceholderOpacity: 1,
  $$inputShadow: '$shadows$sm',
  $$inputBorderColor: '$colors$border',
  $$inputHoverBorderColor: '$colors$foreground',
  $$inputLabelColor: '$$inputHoverBorderColor'
};
const StyledInputMainContainer = styled('div', { ...baseInputValues,
  display: 'inline-flex',
  flexDirection: 'column',
  justifyContent: 'center',
  position: 'relative',
  boxSizing: 'border-box',
  WebkitBoxAlign: 'center',
  variants: {
    color: {
      default: {},
      primary: {
        $$inputHoverBorderColor: '$colors$primary',
        $$inputLabelColor: '$colors$primary'
      },
      secondary: {
        $$inputHoverBorderColor: '$colors$secondary',
        $$inputLabelColor: '$colors$secondary'
      },
      success: {
        $$inputHoverBorderColor: '$colors$success',
        $$inputLabelColor: '$colors$success'
      },
      warning: {
        $$inputHoverBorderColor: '$colors$warning',
        $$inputLabelColor: '$colors$warning'
      },
      error: {
        $$inputHoverBorderColor: '$colors$error',
        $$inputLabelColor: '$colors$error'
      }
    },
    status: {
      default: {},
      primary: {
        $$inputColor: '$colors$primaryLight',
        $$inputPlaceholderColor: '$colors$primary',
        $$inputTextColor: '$colors$primary',
        $$inputLabelColor: '$$inputTextColor',
        $$inputHoverBorderColor: '$colors$primary',
        $$inputPlaceholderOpacity: 0.5
      },
      secondary: {
        $$inputColor: '$colors$secondaryLight',
        $$inputPlaceholderColor: '$colors$secondary',
        $$inputTextColor: '$colors$secondary',
        $$inputLabelColor: '$$inputTextColor',
        $$inputHoverBorderColor: '$colors$secondary',
        $$inputPlaceholderOpacity: 0.5
      },
      success: {
        $$inputColor: '$colors$successLight',
        $$inputPlaceholderColor: '$colors$success',
        $$inputTextColor: '$colors$success',
        $$inputLabelColor: '$$inputTextColor',
        $$inputHoverBorderColor: '$colors$success',
        $$inputPlaceholderOpacity: 0.5
      },
      warning: {
        $$inputColor: '$colors$warningLight',
        $$inputPlaceholderColor: '$colors$warning',
        $$inputTextColor: '$colors$warning',
        $$inputLabelColor: '$$inputTextColor',
        $$inputHoverBorderColor: '$colors$warning',
        $$inputPlaceholderOpacity: 0.5
      },
      error: {
        $$inputColor: '$colors$errorLight',
        $$inputPlaceholderColor: '$colors$error',
        $$inputTextColor: '$colors$error',
        $$inputLabelColor: '$$inputTextColor',
        $$inputHoverBorderColor: '$colors$error',
        $$inputPlaceholderOpacity: 0.5
      }
    },
    helperColor: {
      default: {
        $$inputHelperColor: '$colors$text'
      },
      primary: {
        $$inputHelperColor: '$colors$primary'
      },
      secondary: {
        $$inputHelperColor: '$colors$secondary'
      },
      success: {
        $$inputHelperColor: '$colors$success'
      },
      warning: {
        $$inputHelperColor: '$colors$warning'
      },
      error: {
        $$inputHelperColor: '$colors$error'
      }
    },
    borderWeight: {
      light: {
        $$inputBorderWeight: '$borderWeights$light'
      },
      normal: {
        $$inputBorderWeight: '$borderWeights$normal'
      },
      bold: {
        $$inputBorderWeight: '$borderWeights$bold'
      },
      extrabold: {
        $$inputBorderWeight: '$borderWeights$extrabold'
      },
      black: {
        $$inputBorderWeight: '$borderWeights$black'
      }
    },
    size: {
      xs: {
        $$inputBorderRadius: '$space$3',
        $$inputFontSize: '$fontSizes$tiny',
        $$inputHeightRatio: '1.2',
        br: '$$inputBorderRadius'
      },
      sm: {
        $$inputBorderRadius: '$space$4',
        $$inputFontSize: '$fontSizes$tiny',
        $$inputHeightRatio: '1.6',
        br: '$$inputBorderRadius'
      },
      md: {
        $$inputBorderRadius: '$space$6',
        $$inputFontSize: '$fontSizes$xs',
        $$inputHeightRatio: '2',
        br: '$$inputBorderRadius'
      },
      lg: {
        $$inputBorderRadius: '$space$7',
        $$inputFontSize: '$fontSizes$base',
        $$inputHeightRatio: '2.2',
        br: '$$inputBorderRadius'
      },
      xl: {
        $$inputBorderRadius: '$space$8',
        $$inputFontSize: '$fontSizes$sm',
        $$inputHeightRatio: '2.6',
        br: '$$inputBorderRadius'
      }
    },
    rounded: {
      true: {
        $$inputBorderRadius: '$radii$pill'
      }
    },
    disabled: {
      true: {
        $$inputColor: '$colors$accents2',
        $$inputTextColor: '$colors$accents3',
        $$inputPlaceholderColor: '$colors$accents3',
        $$inputShadow: '$shadows$sm'
      }
    }
  }
});
const StyledInputContainer = styled('div', {
  width: '100%',
  br: '$$inputBorderRadius',
  '@motion': {
    transition: 'none'
  },
  variants: {
    isTextarea: {
      false: {
        display: 'inline-flex',
        alignItems: 'center',
        height: 'calc($$inputHeightRatio * $9)'
      }
    },
    focused: {
      true: {}
    },
    isReadOnly: {
      false: {}
    },
    underlined: {
      true: {}
    },
    animated: {
      true: {
        transition: '$default'
      },
      false: {
        transition: 'none'
      }
    }
  },
  compoundVariants: [{
    // underlined && !isReadOnly
    isReadOnly: false,
    underlined: true,
    css: {
      transform: 'none'
    }
  }, {
    // focused && animated && !isReadOnly && !underlined
    focused: true,
    animated: true,
    isReadOnly: false,
    underlined: false,
    css: {
      transform: 'translateY(-$space$1)'
    }
  }]
});
const StyledInput = styled('input', {
  padding: 0,
  fontSize: '$$inputFontSize',
  bg: 'transparent',
  border: 'none',
  color: '$$inputTextColor',
  br: 0,
  outline: 'none',
  size: '100%',
  minWidth: 0,
  WebkitAppearance: 'none',
  '::placeholder': {
    color: '$$inputPlaceholderColor',
    transition: 'opacity 0.25s ease 0s',
    MozTransition: 'opacity 0.25s ease 0s',
    MsTransition: 'opacity 0.25s ease 0s',
    WebkitTransition: 'opacity 0.25s ease 0s'
  },
  '@motion': {
    transition: 'none',
    '&::placeholder': {
      transition: 'none'
    }
  },
  '&:disabled': {
    pe: 'none',
    color: '$accents4',
    cursor: 'not-allowed'
  },
  variants: {
    isTextarea: {
      true: {
        boxShadow: 'none',
        display: 'block',
        size: '100%',
        resize: 'none',
        border: 'none',
        outline: 'none'
      }
    },
    focused: {
      true: {
        '&::placeholder': {
          opacity: 0,
          transition: 'opacity 0.25s ease 0s'
        }
      }
    },
    bordered: {
      true: {
        padding: '0 $3'
      }
    },
    rounded: {
      true: {
        padding: '0 $3'
      }
    },
    animated: {
      false: {
        transition: 'none',
        '::placeholder': {
          transition: 'none'
        }
      }
    },
    hasLeftContent: {
      true: {
        ml: 0
      }
    },
    hasRightContent: {
      true: {
        mr: 0
      }
    }
  }
});
const StyledInputWrapper = styled('div', {
  flex: 1,
  position: 'relative',
  br: '$$inputBorderRadius',
  bg: '$$inputColor',
  display: 'inline-flex',
  verticalAlign: 'middle',
  alignItems: 'center',
  userSelect: 'none',
  '@motion': {
    transition: 'none',
    '&:before': {
      transition: 'none'
    },
    '&:after': {
      transition: 'none'
    }
  },
  variants: {
    focused: {
      true: {}
    },
    isReadOnly: {
      true: {}
    },
    bordered: {
      true: {
        bg: 'transparent',
        border: 'none',
        boxShadow: '0 0 0 $$inputBorderWeight $$inputBorderColor',
        transition: 'box-shadow 0.25s ease'
      }
    },
    shadow: {
      true: {
        transition: '$default'
      }
    },
    disabled: {
      true: {
        cursor: 'not-allowed'
      }
    },
    underlined: {
      true: {
        bg: 'transparent',
        [`& ${StyledInput}`]: {
          margin: '$2 $3'
        },
        '&:before': {
          content: '',
          position: 'absolute',
          zIndex: '$2',
          width: 0,
          bottom: 0,
          height: '$1',
          left: '50%',
          transform: 'translate(-50%)',
          background: '$$inputHoverBorderColor',
          transition: 'width 0.25s ease'
        },
        '&:after': {
          content: '',
          position: 'absolute',
          zIndex: '$1',
          bottom: 0,
          width: '100%',
          height: '$$inputBorderWeight',
          bg: '$$inputBorderColor'
        }
      },
      false: {
        [`& ${StyledInput}`]: {
          margin: '$2 $5'
        }
      }
    },
    animated: {
      false: {
        transition: 'none',
        '&:before': {
          transition: 'none'
        },
        '&:after': {
          transition: 'none'
        }
      }
    },
    isTextarea: {
      true: {
        boxSizing: 'border-box',
        width: '100%',
        maxWidth: '100%',
        height: 'auto'
      },
      false: {
        height: '100%'
      }
    }
  },
  compoundVariants: [{
    // underlined && bordered
    bordered: true,
    underlined: true,
    css: {
      boxShadow: '0 0 0 0px $$inputBorderColor'
    }
  }, {
    // focused && underlined
    focused: true,
    underlined: true,
    css: {
      '&:before': {
        width: '100%'
      }
    }
  }, // focused && shadow && !readOnly
  {
    focused: true,
    shadow: true,
    isReadOnly: false,
    underlined: false,
    css: {
      boxShadow: '$$inputShadow'
    }
  }, // focused && bordered && !readOnly && !underlined
  {
    focused: true,
    bordered: true,
    isReadOnly: false,
    underlined: false,
    css: {
      boxShadow: '0 0 0 $$inputBorderWeight $$inputHoverBorderColor'
    }
  }, //  bordered && !readOnly && !underlined
  {
    bordered: true,
    isReadOnly: false,
    underlined: false,
    css: {
      '&:hover': {
        boxShadow: '0 0 0 $$inputBorderWeight $$inputHoverBorderColor'
      }
    }
  }, // isTextarea  && !underlined
  {
    isTextarea: true,
    underlined: false,
    css: {
      [`& ${StyledInput}`]: {
        margin: '$xs $sm'
      }
    }
  }]
});
const StyledHelperTextContainer = styled('div', {
  position: 'absolute',
  opacity: 0,
  bottom: 'calc($$inputHeightRatio * -$space$5)',
  '@motion': {
    transition: 'none'
  },
  variants: {
    animated: {
      true: {
        transition: 'opacity 0.25s ease'
      },
      false: {
        transition: 'none'
      }
    },
    withValue: {
      true: {
        opacity: 1
      }
    }
  }
});
const StyledHelperText = styled('p', {
  margin: '$1 0 0 $5',
  fontSize: '$space$5',
  color: '$$inputHelperColor'
});
const StyledInputPlaceholder = styled('span', {}, sharedVisuallyHidden); /// Input accessories

const StyledInputBlockLabel = styled('label', {
  d: 'block',
  fontWeight: '$normal',
  color: '$$inputLabelColor',
  p: '0 0 0 $2',
  mb: '$3',
  fs: '$$inputFontSize',
  lh: '$md',
  WebkitTouchCallout: 'none'
  /* iOS Safari */
  ,
  WebkitUserSelect: 'none'
  /* Safari */
  ,
  KhtmlUserSelect: 'none'
  /* Konqueror HTML */
  ,
  MozUserSelect: 'none'
  /* Firefox */
  ,
  MsUserSelect: 'none'
  /* Internet Explorer/Edge */
  ,
  us: 'none'
  /* Non-prefixed version, currently supported by Chrome and Opera */
  ,
  '> *:first-child': {
    marginTop: 0
  },
  '> *:last-child': {
    mb: 0
  },
  '@motion': {
    transition: 'none'
  },
  variants: {
    rounded: {
      true: {
        padding: '0 0 0 $3'
      }
    },
    asPlaceholder: {
      true: {
        position: 'absolute',
        padding: 0,
        zIndex: '$1',
        left: '$space$6',
        top: '20%',
        mb: 0,
        cursor: 'text',
        color: '$$inputPlaceholderColor',
        transition: 'left 0.25s ease 0s, color 0.25s ease 0s, top 0.25s ease 0s'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    },
    focused: {
      true: {
        color: '$$inputHoverBorderColor'
      }
    },
    underlined: {
      true: {}
    },
    withValue: {
      true: {}
    },
    isTextarea: {
      true: {}
    },
    bordered: {
      true: {}
    },
    hasContentLeft: {
      true: {}
    }
  },
  compoundVariants: [// underlined && asPlaceholder
  {
    underlined: true,
    asPlaceholder: true,
    css: {
      left: '$space$2'
    }
  }, // asPlaceholder && focused && !underlined
  {
    asPlaceholder: true,
    focused: true,
    underlined: false,
    isTextarea: false,
    css: {
      top: '-72%',
      left: '$2',
      cursor: 'inherit'
    }
  }, // asPlaceholder && focused && underlined
  {
    asPlaceholder: true,
    focused: true,
    underlined: true,
    isTextarea: false,
    css: {
      top: '-72%',
      left: '0px',
      cursor: 'inherit'
    }
  }, // asPlaceholder && focused && withValue && !underlined
  {
    asPlaceholder: true,
    withValue: true,
    underlined: false,
    isTextarea: false,
    css: {
      color: '$$inputTextColor',
      top: '-72%',
      left: '$2',
      cursor: 'inherit'
    }
  }, // asPlaceholder && focused && withValue && underlined
  {
    asPlaceholder: true,
    withValue: true,
    underlined: true,
    isTextarea: false,
    css: {
      color: '$$inputTextColor',
      top: '-72%',
      left: '0px',
      cursor: 'inherit'
    }
  }, // asPlaceholder && isTextarea
  {
    asPlaceholder: true,
    isTextarea: true,
    css: {
      top: '$5'
    }
  }, // asPlaceholder && hasContentLeft
  {
    asPlaceholder: true,
    hasContentLeft: true,
    css: {
      left: 'calc($space$6 + $$inputHeightRatio * $space$7)'
    }
  }, // asPlaceholder && isTextarea && focused
  {
    asPlaceholder: true,
    isTextarea: true,
    focused: true,
    css: {
      top: 'calc(-$space$10 - $space$3)',
      left: '$2'
    }
  }, // asPlaceholder && isTextarea && withValue
  {
    asPlaceholder: true,
    isTextarea: true,
    withValue: true,
    css: {
      top: '-$11'
    }
  }, // focused && asPlaceholder && isTextarea && bordered
  {
    asPlaceholder: true,
    focused: true,
    isTextarea: true,
    bordered: true,
    css: {
      top: '-$12'
    }
  }],
  defaultVariants: {
    asPlaceholder: false
  }
});
const StyledInputLabel = styled('span', {
  position: 'relative',
  display: 'inline-flex',
  width: 'initial',
  height: '100%',
  fontWeight: '$medium',
  ai: 'center',
  pe: 'none',
  margin: 0,
  padding: '0 $sm',
  color: '$$inputPlaceholderColor',
  fontSize: '$$inputFontSize',
  lineHeight: '$xs',
  variants: {
    isRight: {
      true: {
        btrr: '$$inputBorderRadius',
        bbrr: '$$inputBorderRadius'
      },
      false: {
        btlr: '$$inputBorderRadius',
        bblr: '$$inputBorderRadius'
      }
    },
    isDark: {
      true: {}
    },
    isDefaultStatus: {
      true: {}
    },
    underlined: {
      true: {
        bg: 'transparent'
      }
    },
    bordered: {
      true: {
        '&:after': {
          display: 'none'
        },
        '&:before': {
          display: 'none'
        }
      }
    }
  },
  compoundVariants: [// isRight && underlined
  {
    isRight: true,
    underlined: true,
    css: {
      borderLeftColor: '$$inputPlaceholderColor',
      borderLeftStyle: 'solid',
      marginLeft: '$2',
      borderLeftWidth: 'calc($$inputBorderWeight / 2)',
      height: '40%'
    }
  }, // !isRight && underlined
  {
    isRight: false,
    underlined: true,
    css: {
      borderRightColor: '$$inputPlaceholderColor',
      borderRightStyle: 'solid',
      marginRight: '$2',
      borderRightWidth: 'calc($$inputBorderWeight / 1)',
      height: '40%'
    }
  }, // isDefaultStatus && !bordered && !underlined
  {
    isDefaultStatus: true,
    bordered: false,
    underlined: false,
    css: {
      bg: '$accents2'
    }
  }, // isDefaultStatus && !bordered && !underlined && isDark
  {
    isDefaultStatus: true,
    bordered: false,
    underlined: false,
    isDark: true,
    css: {
      color: '$accents6'
    }
  }, // !isDefaultStatus && !bordered && !underlined
  {
    isDefaultStatus: false,
    bordered: true,
    underlined: false,
    css: {
      bg: '$$inputColor'
    }
  }, // bordered && isRight
  {
    bordered: true,
    isRight: true,
    css: {
      peddingRight: '$sm',
      paddingLeft: 0
    }
  }, // bordered && !isRight
  {
    bordered: true,
    isRight: false,
    css: {
      peddingLeft: '$sm',
      paddingRight: 0
    }
  }],
  defaultVariants: {
    isRight: false
  }
});
const StyledInputContent = styled('span', {
  variants: {
    applyStyles: {
      true: {
        display: 'flex',
        boxSizing: 'content-box',
        width: 'calc($$inputHeightRatio * $space$4)',
        height: '100%',
        alignItems: 'center',
        verticalAlign: 'center',
        margin: 0,
        padding: '0 calc($$inputHeightRatio * $3)',
        color: '$$inputTextColor',
        lineHeight: '$xs',
        position: 'relative',
        cursor: 'default',
        pe: 'none'
      }
    },
    clickable: {
      true: {
        cursor: 'pointer',
        pe: 'auto'
      }
    }
  }
});
const StyledInputClearButton = styled('button', {
  position: 'absolute',
  right: 0,
  margin: 0,
  d: 'inline-flex',
  ai: 'center',
  border: 'none',
  bg: 'transparent',
  width: 'auto',
  height: 'auto',
  cursor: 'pointer',
  boxSizing: 'border-box',
  transition: 'color 250ms ease 0s, transform 250ms ease 0s, opacity 250ms ease 0s',
  color: '$$inputPlaceholderColor',
  visibility: 'hidden',
  transform: 'translateX(20%)',
  opacity: 0,
  '&:hover': {
    opacity: 0.85
  },
  svg: {
    color: 'currentColor',
    size: 'calc($space$5 * $$inputHeightRatio)'
  },
  '@motion': {
    transition: 'none'
  },
  variants: {
    visible: {
      true: {
        visibility: 'visible',
        transform: 'translateX(0)',
        opacity: 1
      }
    },
    underlined: {
      true: {
        padding: '0 $1'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    },
    hasContentRight: {
      true: {
        padding: 0,
        position: 'relative',
        transform: 'translateX(30%)'
      }
    },
    disabled: {
      true: {
        cursor: 'not-allowed',
        '&:hover': {
          color: '$accents3'
        }
      }
    }
  }
}); // types
;// CONCATENATED MODULE: ./src/input/input.tsx
var input_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/input/input.tsx";











const simulateChangeEvent = (el, event) => {
  return { ...event,
    target: el,
    currentTarget: el
  };
};

const input_preClass = 'nextui-input';
const Input = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  as: Component = 'input',
  label,
  labelPlaceholder,
  labelLeft,
  labelRight,
  size,
  helperText,
  color,
  helperColor,
  status,
  contentLeft,
  contentRight,
  contentClickable,
  contentLeftStyling,
  contentRightStyling,
  onContentClick,
  initialValue,
  onChange,
  readOnly,
  value,
  onClearClick,
  clearable,
  shadow,
  animated,
  required,
  width: widthProp,
  className,
  onBlur,
  onFocus,
  autoComplete,
  placeholder,
  fullWidth,
  borderWeight,
  disabled,
  bordered,
  underlined,
  rounded,
  css,
  ...props
}, ref) => {
  const inputRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => inputRef.current);
  const [selfValue, setSelfValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialValue);
  const [hover, setHover] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const {
    isDark
  } = src_use_theme();
  const isControlledComponent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => value !== undefined, [value]);
  const inputLabel = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => label || labelPlaceholder, [label, labelPlaceholder]);
  const inputPlaceholder = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => labelPlaceholder ? '' : placeholder, [placeholder, labelPlaceholder]);
  const width = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (fullWidth) return '100%';
    if (widthProp) return widthProp;
    return 'initial';
  }, [fullWidth, widthProp]);

  if (underlined && __DEV__) {
    bordered && src_use_warning('Using underlined and bordered at the same time will have no effect.');
    rounded && src_use_warning('Using underlined and rounded at the same time will have no effect.');
  }

  const changeHandler = event => {
    if (disabled || readOnly) return;
    setSelfValue(event.target.value);
    onChange && onChange(event);
  };

  const clearHandler = event => {
    event.preventDefault();
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
    setSelfValue('');
    onClearClick && onClearClick(event);
    /* istanbul ignore next */

    if (!inputRef.current) return;
    const changeEvent = simulateChangeEvent(inputRef.current, event);
    changeEvent.target.value = '';
    onChange && onChange(changeEvent);
    inputRef.current.focus();
  };

  const focusHandler = e => {
    setHover(true);
    onFocus && onFocus(e);
  };

  const blurHandler = e => {
    setHover(false);
    onBlur && onBlur(e);
  };

  const contentClickHandler = (key, e) => {
    if (disabled) return;
    onContentClick && onContentClick(key, e);
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isControlledComponent) {
      setSelfValue(value);
    }
  });
  const isTextarea = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => Component === 'textarea', [Component]);
  const controlledValue = isControlledComponent ? {
    value: selfValue
  } : {
    defaultValue: initialValue
  };
  const inputProps = { ...props,
    ...controlledValue
  };
  const {
    labelProps,
    fieldProps
  } = useLabel({ ...inputProps,
    label: inputLabel
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return hover ? 'hover' : disabled ? 'disabled' : readOnly ? 'read-only' : selfValue ? 'with-value' : 'normal';
  }, [hover, disabled, readOnly, selfValue]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputMainContainer, {
    color: color,
    "data-state": getState,
    helperColor: helperColor,
    borderWeight: borderWeight,
    status: status,
    size: size,
    rounded: rounded,
    disabled: disabled,
    css: {
      width,
      ...css
    },
    className: clsx(`${input_preClass}-main-container`, `${input_preClass}-main-container--${getState}`),
    children: [inputLabel && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputBlockLabel, {
      id: labelProps.id,
      className: `${input_preClass}-block-label`,
      htmlFor: labelProps.htmlFor,
      isTextarea: isTextarea,
      underlined: underlined,
      animated: animated,
      bordered: bordered,
      rounded: rounded,
      hasContentLeft: !!contentLeft,
      withValue: !!selfValue,
      asPlaceholder: !!labelPlaceholder,
      focused: hover,
      children: inputLabel
    }, void 0, false, {
      fileName: input_jsxFileName,
      lineNumber: 229,
      columnNumber: 11
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputContainer, {
      animated: animated,
      isTextarea: isTextarea,
      underlined: underlined,
      isReadOnly: readOnly,
      focused: hover,
      className: clsx(`${input_preClass}-container`, `${input_preClass}-container--${getState}`, {
        [`${input_preClass}-container--input`]: !isTextarea,
        [`${input_preClass}-container--textarea`]: isTextarea,
        [`${input_preClass}-container--read-only`]: readOnly
      }, className),
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputWrapper, {
        as: inputLabel ? 'div' : 'label',
        animated: animated,
        bordered: bordered,
        shadow: shadow,
        disabled: disabled,
        focused: hover,
        isReadOnly: readOnly,
        underlined: underlined,
        isTextarea: isTextarea,
        className: clsx(`${input_preClass}-wrapper`, `${input_preClass}-wrapper--${getState}`, {
          [`${input_preClass}-wrapper--bordered`]: bordered,
          [`${input_preClass}-wrapper--underlined`]: underlined,
          [`${input_preClass}-wrapper--shadow`]: shadow
        }),
        children: [!inputLabel && placeholder && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputPlaceholder, {
          className: `${input_preClass}-placeholder`,
          children: placeholder
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 284,
          columnNumber: 15
        }, undefined), labelLeft && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputLabel, {
          className: `${input_preClass}-label--left`,
          isDefaultStatus: status === 'default',
          underlined: underlined,
          bordered: bordered,
          isDark: isDark,
          children: labelLeft
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 289,
          columnNumber: 15
        }, undefined), contentLeft && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputContent, {
          className: clsx(`${input_preClass}-content`, `${input_preClass}-content--left`),
          applyStyles: contentLeftStyling,
          clickable: contentClickable,
          onClick: e => contentClickHandler('left', e),
          children: contentLeft
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 300,
          columnNumber: 15
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInput, {
          type: "text",
          as: Component,
          ref: inputRef,
          className: clsx({
            [`${input_preClass}`]: !isTextarea,
            [`${input_preClass}-textarea`]: isTextarea,
            [`${input_preClass}-disabled`]: disabled,
            [`${input_preClass}-rounded`]: rounded,
            [`${input_preClass}-${input_preClass}-right-content`]: contentRight,
            [`${input_preClass}-left-content`]: contentLeft
          }),
          isTextarea: isTextarea,
          focused: hover,
          bordered: bordered,
          placeholder: inputPlaceholder,
          disabled: disabled,
          readOnly: readOnly,
          onFocus: focusHandler,
          onBlur: blurHandler,
          onChange: changeHandler,
          autoComplete: autoComplete,
          hasLeftContent: !!contentLeft,
          hasRightContent: !!contentRight,
          "data-state": getState,
          "aria-placeholder": inputPlaceholder,
          "aria-readonly": readOnly,
          "aria-required": required,
          "aria-multiline": isTextarea,
          ...inputProps,
          ...fieldProps
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 314,
          columnNumber: 13
        }, undefined), clearable && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputClearButton, {
          type: "button",
          className: `${input_preClass}-clear-button`,
          animated: animated,
          underlined: underlined,
          visible: Boolean(selfValue),
          hasContentRight: !!contentRight,
          disabled: disabled || readOnly,
          onClick: clearHandler,
          children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(clear_icon, {
            fill: "currentColor"
          }, void 0, false, {
            fileName: input_jsxFileName,
            lineNumber: 357,
            columnNumber: 17
          }, undefined)
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 347,
          columnNumber: 15
        }, undefined), contentRight && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputContent, {
          className: clsx(`${input_preClass}-content`, `${input_preClass}-content--right`),
          applyStyles: contentRightStyling,
          clickable: contentClickable,
          onClick: e => contentClickHandler('right', e),
          children: contentRight
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 361,
          columnNumber: 15
        }, undefined), labelRight && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputLabel, {
          className: `${input_preClass}-label--right`,
          isDefaultStatus: status === 'default',
          underlined: underlined,
          bordered: bordered,
          isRight: true,
          isDark: isDark,
          children: labelRight
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 376,
          columnNumber: 15
        }, undefined)]
      }, void 0, true, {
        fileName: input_jsxFileName,
        lineNumber: 263,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: input_jsxFileName,
      lineNumber: 246,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledHelperTextContainer, {
      className: `${input_preClass}-helper-text-container`,
      withValue: !!helperText,
      children: helperText && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledHelperText, {
        className: `${input_preClass}-helper-text`,
        children: helperText
      }, void 0, false, {
        fileName: input_jsxFileName,
        lineNumber: 394,
        columnNumber: 13
      }, undefined)
    }, void 0, false, {
      fileName: input_jsxFileName,
      lineNumber: 389,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: input_jsxFileName,
    lineNumber: 210,
    columnNumber: 7
  }, undefined);
});
Input.displayName = 'NextUI - Input';
Input.defaultProps = input_props_defaultProps;

Input.toString = () => '.nextui-input';

/* harmony default export */ const input = (Input);
;// CONCATENATED MODULE: ./src/textarea/utils.ts

const SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', 'tabSize', 'textIndent', 'textRendering', 'textTransform', 'width', 'wordBreak'];
const HIDDEN_TEXTAREA_STYLE = {
  'min-height': '0',
  'max-height': 'none',
  height: '0',
  visibility: 'hidden',
  overflow: 'hidden',
  position: 'absolute',
  'z-index': '-1000',
  top: '0',
  right: '0'
};
const isIE = typeof document !== 'undefined' ? !!document.documentElement.currentStyle : false;
const forceHiddenStyles = node => {
  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(key => {
    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');
  });
};
const getSizingData = node => {
  const style = window.getComputedStyle(node);

  if (style === null) {
    return null;
  }

  const sizingStyle = pick(SIZING_STYLE, style);
  const {
    boxSizing
  } = sizingStyle; // probably node is detached from DOM, can't read computed dimensions

  if (boxSizing === '') {
    return null;
  } // IE (Edge has already correct behaviour) returns content width as computed width
  // so we need to add manually padding and border widths


  if (isIE && boxSizing === 'border-box') {
    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + 'px';
  }

  const paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);
  const borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);
  return {
    sizingStyle,
    paddingSize,
    borderSize
  };
}; // TODO: use labelled tuples once they are avaiable:
//   export type CalculatedNodeHeights = [height: number, rowHeight: number];
// https://github.com/microsoft/TypeScript/issues/28259

let hiddenTextarea = null;

const getHeight = (node, sizingData) => {
  const height = node.scrollHeight;

  if (sizingData.sizingStyle.boxSizing === 'border-box') {
    // border-box: add border, since height = content + padding + border
    return height + sizingData.borderSize;
  } // remove padding, since height = content


  return height - sizingData.paddingSize;
};

const calculateNodeHeight = (sizingData, value, minRows = 1, maxRows = Infinity) => {
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement('textarea');
    hiddenTextarea.setAttribute('tabindex', '-1');
    hiddenTextarea.setAttribute('aria-hidden', 'true');
    forceHiddenStyles(hiddenTextarea);
  }

  if (hiddenTextarea.parentNode === null) {
    document.body.appendChild(hiddenTextarea);
  }

  const {
    paddingSize,
    borderSize,
    sizingStyle
  } = sizingData;
  const {
    boxSizing
  } = sizingStyle;
  Object.keys(sizingStyle).forEach(_key => {
    const key = _key;
    hiddenTextarea.style[key] = sizingStyle[key];
  });
  forceHiddenStyles(hiddenTextarea);
  hiddenTextarea.value = value;
  let height = getHeight(hiddenTextarea, sizingData); // measure height of a textarea with a single row

  hiddenTextarea.value = 'x';
  const rowHeight = hiddenTextarea.scrollHeight - paddingSize;
  let minHeight = rowHeight * minRows;

  if (boxSizing === 'border-box') {
    minHeight = minHeight + paddingSize + borderSize;
  }

  height = Math.max(minHeight, height);
  let maxHeight = rowHeight * maxRows;

  if (boxSizing === 'border-box') {
    maxHeight = maxHeight + paddingSize + borderSize;
  }

  height = Math.min(maxHeight, height);
  return [height, rowHeight];
};
;// CONCATENATED MODULE: ./src/textarea/textarea.tsx
var textarea_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/textarea/textarea.tsx";









const textarea_defaultProps = {
  minRows: 3,
  maxRows: 6,
  cacheMeasurements: true,
  initialValue: ''
};
const Textarea = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((textareaProps, ref) => {
  const textareaRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const heightRef = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useRef(0);
  const measurementsCacheRef = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useRef();
  const {
    cacheMeasurements,
    rows,
    maxRows,
    minRows,
    onChange,
    onHeightChange,
    css,
    ...props
  } = textareaProps;
  Object.keys(props).forEach(propNameKey => {
    if (excludedInputPropsForTextarea.indexOf(propNameKey) > -1) {
      // @ts-ignored
      delete props[propNameKey];
    }
  });
  const isControlled = props.value !== undefined;

  if (__DEV__ && props.style) {
    if ('maxHeight' in props.style) {
      src_use_warning('Using `style.maxHeight` for <Textarea/> is not supported. Please use `maxRows`.');
    }

    if ('minHeight' in props.style) {
      src_use_warning('Using `style.minHeight` for <Textarea/> is not supported. Please use `minRows`.');
    }
  }

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => textareaRef.current);

  const resizeTextarea = () => {
    const node = textareaRef.current;
    const nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData(node);

    if (!nodeSizingData) {
      return;
    }

    measurementsCacheRef.current = nodeSizingData;
    const [height, rowHeight] = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', rows || minRows, rows || maxRows);

    if (heightRef.current !== height) {
      heightRef.current = height;
      node.style.setProperty('height', `${height}px`, 'important');
      onHeightChange && onHeightChange(height, {
        rowHeight
      });
    }
  };

  const handleChange = event => {
    if (!isControlled) {
      resizeTextarea();
    }

    onChange && onChange(event);
  };

  if (typeof document !== 'undefined') {
    (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useLayoutEffect)(resizeTextarea);
    src_use_resize(resizeTextarea);
  }

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_input, {
    as: "textarea",
    ref: textareaRef,
    onChange: handleChange,
    css: { ...css
    },
    ...props
  }, void 0, false, {
    fileName: textarea_jsxFileName,
    lineNumber: 130,
    columnNumber: 7
  }, undefined);
});

if (__DEV__) {
  Textarea.displayName = 'NextUI - Textarea';
}

Textarea.toString = () => '.nextui-textarea';

/* harmony default export */ const textarea_textarea = (with_defaults(Textarea, textarea_defaultProps));
;// CONCATENATED MODULE: ./src/textarea/index.ts

/* harmony default export */ const src_textarea = (textarea_textarea);
;// CONCATENATED MODULE: ./src/input/password-icon.tsx
var password_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/input/password-icon.tsx";




const PasswordIcon = ({
  visible
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
    viewBox: "0 0 24 24",
    width: "16",
    height: "16",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    fill: "none",
    className: "nextui-input-password-icon",
    shapeRendering: "geometricPrecision",
    style: {
      color: 'currentColor'
    },
    children: !visible ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 24,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "12",
        cy: "12",
        r: "3"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 25,
        columnNumber: 11
      }, undefined)]
    }, void 0, true) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M17.94 17.94A10.07 10.07 0 0112 20c-7 0-11-8-11-8a18.45 18.45 0 015.06-5.94M9.9 4.24A9.12 9.12 0 0112 4c7 0 11 8 11 8a18.5 18.5 0 01-2.16 3.19m-6.72-1.07a3 3 0 11-4.24-4.24"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 29,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M1 1l22 22"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 30,
        columnNumber: 11
      }, undefined)]
    }, void 0, true)
  }, void 0, false, {
    fileName: password_icon_jsxFileName,
    lineNumber: 9,
    columnNumber: 5
  }, undefined);
};

const MemoPasswordIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(PasswordIcon);
/* harmony default export */ const password_icon = (MemoPasswordIcon);
;// CONCATENATED MODULE: ./src/input/input-password.tsx
var input_password_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/input/input-password.tsx";








const passwordDefaultProps = { ...input_props_defaultProps,
  hideToggle: false,
  visibleIcon: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(password_icon, {
    visible: true
  }, void 0, false, {
    fileName: input_password_jsxFileName,
    lineNumber: 19,
    columnNumber: 16
  }, undefined),
  hiddenIcon: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(password_icon, {
    visible: false
  }, void 0, false, {
    fileName: input_password_jsxFileName,
    lineNumber: 20,
    columnNumber: 15
  }, undefined)
};
const InputPassword = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  hideToggle,
  visibleIcon,
  hiddenIcon,
  children,
  ...props
}, ref) => {
  const inputRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [visible, setVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => inputRef.current);

  const iconClickHandler = () => {
    setVisible(v => !v);
  };

  const inputProps = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({ ...props,
    ref: inputRef,
    className: clsx('nextui-input-password', props.className),
    contentClickable: true,
    onContentClick: iconClickHandler,
    type: visible ? 'text' : 'password'
  }), [props, iconClickHandler, visible, inputRef]);
  const icon = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (hideToggle) return null;
    return visible ? visibleIcon : hiddenIcon;
  }, [hideToggle, visible, visibleIcon, hiddenIcon]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(input, {
    contentRight: icon,
    ...inputProps,
    children: children
  }, void 0, false, {
    fileName: input_password_jsxFileName,
    lineNumber: 61,
    columnNumber: 7
  }, undefined);
});

if (__DEV__) {
  InputPassword.displayName = 'NextUI - Input Password';
}

InputPassword.toString = () => '.nextui-input-password';

/* harmony default export */ const input_password = (with_defaults(InputPassword, passwordDefaultProps));
;// CONCATENATED MODULE: ./src/input/index.ts




input.Textarea = src_textarea;
input.Password = input_password;
/* harmony default export */ const src_input = (input);
;// CONCATENATED MODULE: ./src/index.ts
//Utils
 // Hooks















 //Theme



 // Components























































})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});