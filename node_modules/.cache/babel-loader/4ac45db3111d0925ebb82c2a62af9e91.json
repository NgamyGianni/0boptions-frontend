{"ast":null,"code":"import { useId, useLabels, mergeProps, useSlotId } from \"@react-aria/utils\";\n/**\n * Provides the accessibility implementation for labels and their associated elements.\n * Labels provide context for user inputs.\n * @param props - The props for labels and fields.\n */\n\nexport function useLabel(props) {\n  let {\n    id,\n    label,\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    labelElementType = 'label'\n  } = props;\n  id = useId(id);\n  let labelId = useId();\n  let labelProps = {};\n\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? ariaLabelledby + \" \" + labelId : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel) {\n    console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  let fieldProps = useLabels({\n    id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n  return {\n    labelProps,\n    fieldProps\n  };\n}\n/**\n * Provides the accessibility implementation for input fields.\n * Fields accept user input, gain context from their label, and may display a description or error message.\n * @param props - Props for the Field.\n */\n\nexport function useField(props) {\n  let {\n    description,\n    errorMessage,\n    validationState\n  } = props;\n  let {\n    labelProps,\n    fieldProps\n  } = useLabel(props);\n  let descriptionId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n  let errorMessageId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n  fieldProps = mergeProps(fieldProps, {\n    'aria-describedby': [descriptionId, // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n    errorMessageId, props['aria-describedby']].filter(Boolean).join(' ') || undefined\n  });\n  return {\n    labelProps,\n    fieldProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    errorMessageProps: {\n      id: errorMessageId\n    }\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/label/src/useLabel.ts","packages/@react-aria/label/src/useField.ts"],"names":["labelElementType","id","useId","labelId","labelProps","ariaLabelledby","htmlFor","undefined","console","fieldProps","useLabels","validationState","descriptionId","useSlotId","Boolean","errorMessageId","mergeProps","props","descriptionProps","errorMessageProps"],"mappings":";AA+BA;;;;;;OAKO,SAAA,QAAA,CAAA,KAAA,EAAoD;AACzD,MAAI;AAAA,IAAA,EAAA;AAAA,IAAA,KAAA;AAGF,uBAHE,cAAA;AAIF,kBAJE,SAAA;AAKFA,IAAAA,gBAAgB,GAAG;AALjB,MAAJ,KAAA;AAQAC,EAAAA,EAAE,GAAGC,KAAK,CAAVD,EAAU,CAAVA;AACA,MAAIE,OAAO,GAAGD,KAAd,EAAA;AACA,MAAIE,UAAU,GAAd,EAAA;;AACA,MAAA,KAAA,EAAW;AACTC,IAAAA,cAAc,GAAGA,cAAc,GAAMA,cAAN,GAAA,GAAMA,GAAN,OAAA,GAA/BA,OAAAA;AACAD,IAAAA,UAAU,GAAG;AACXH,MAAAA,EAAE,EADS,OAAA;AAEXK,MAAAA,OAAO,EAAEN,gBAAgB,KAAhBA,OAAAA,GAAAA,EAAAA,GAAoCO;AAFlC,KAAbH;AAFF,GAAA,MAMO,IAAI,CAAA,cAAA,IAAmB,CAAvB,SAAA,EAAmC;AACxCI,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,sHAAAA;AACD;;AAED,MAAIC,UAAU,GAAGC,SAAS,CAAC;AAAA,IAAA,EAAA;AAEzB,kBAFyB,SAAA;AAGzB,uBAAmBL;AAHM,GAAD,CAA1B;AAMA,SAAO;AAAA,IAAA,UAAA;AAELI,IAAAA;AAFK,GAAP;AAID;AC1CD;;;;;;OAKO,SAAA,QAAA,CAAA,KAAA,EAAoD;AACzD,MAAI;AAAA,IAAA,WAAA;AAAA,IAAA,YAAA;AAA4BE,IAAAA;AAA5B,MAAJ,KAAA;AACA,MAAI;AAAA,IAAA,UAAA;AAAaF,IAAAA;AAAb,MAA2B,QAAA,CAA/B,KAA+B,CAA/B;AAEA,MAAIG,aAAa,GAAGC,SAAS,CAAC,CAACC,OAAO,CAAR,WAAQ,CAAR,EAAuBA,OAAO,CAA9B,YAA8B,CAA9B,EAA9B,eAA8B,CAAD,CAA7B;AACA,MAAIC,cAAc,GAAGF,SAAS,CAAC,CAACC,OAAO,CAAR,WAAQ,CAAR,EAAuBA,OAAO,CAA9B,YAA8B,CAA9B,EAA/B,eAA+B,CAAD,CAA9B;AAEAL,EAAAA,UAAU,GAAGO,UAAU,CAAA,UAAA,EAAa;AAClC,wBAAoB,CAAA,aAAA,EAElB;AAFkB,IAAA,cAAA,EAIlBC,KAAK,CAJa,kBAIb,CAJa,EAAA,MAAA,CAAA,OAAA,EAAA,IAAA,CAAA,GAAA,KAKWV;AANG,GAAb,CAAvBE;AASA,SAAO;AAAA,IAAA,UAAA;AAAA,IAAA,UAAA;AAGLS,IAAAA,gBAAgB,EAAE;AAChBjB,MAAAA,EAAE,EAAEW;AADY,KAHb;AAMLO,IAAAA,iBAAiB,EAAE;AACjBlB,MAAAA,EAAE,EAAEc;AADa;AANd,GAAP;AAUD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, LabelableProps} from '@react-types/shared';\nimport {ElementType, LabelHTMLAttributes} from 'react';\nimport {useId, useLabels} from '@react-aria/utils';\n\nexport interface LabelAriaProps extends LabelableProps, DOMProps, AriaLabelingProps {\n  /**\n   * The HTML element used to render the label, e.g. 'label', or 'span'.\n   * @default 'label'\n   */\n  labelElementType?: ElementType\n}\n\nexport interface LabelAria {\n  /** Props to apply to the label container element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to apply to the field container element being labeled. */\n  fieldProps: AriaLabelingProps & DOMProps\n}\n\n/**\n * Provides the accessibility implementation for labels and their associated elements.\n * Labels provide context for user inputs.\n * @param props - The props for labels and fields.\n */\nexport function useLabel(props: LabelAriaProps): LabelAria {\n  let {\n    id,\n    label,\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    labelElementType = 'label'\n  } = props;\n\n  id = useId(id);\n  let labelId = useId();\n  let labelProps = {};\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel) {\n    console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  let fieldProps = useLabels({\n    id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n\n  return {\n    labelProps,\n    fieldProps\n  };\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HelpTextProps, Validation} from '@react-types/shared';\nimport {HTMLAttributes} from 'react';\nimport {LabelAria, LabelAriaProps, useLabel} from './useLabel';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\n\ninterface AriaFieldProps extends LabelAriaProps, HelpTextProps, Omit<Validation, 'isRequired'> {}\n\nexport interface FieldAria extends LabelAria {\n  /** Props for the description element, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n  /** Props for the error message element, if any. */\n  errorMessageProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the accessibility implementation for input fields.\n * Fields accept user input, gain context from their label, and may display a description or error message.\n * @param props - Props for the Field.\n */\nexport function useField(props: AriaFieldProps): FieldAria {\n  let {description, errorMessage, validationState} = props;\n  let {labelProps, fieldProps} = useLabel(props);\n\n  let descriptionId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n  let errorMessageId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n\n  fieldProps = mergeProps(fieldProps, {\n    'aria-describedby': [\n      descriptionId,\n      // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n      errorMessageId,\n      props['aria-describedby']\n    ].filter(Boolean).join(' ') || undefined\n  });\n\n  return {\n    labelProps,\n    fieldProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    errorMessageProps: {\n      id: errorMessageId\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}