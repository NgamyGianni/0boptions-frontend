{"ast":null,"code":"import { getWindow } from 'ssr-window';\nexport default function Resize({\n  swiper,\n  on,\n  emit\n}) {\n  const window = getWindow();\n  let observer = null;\n\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('beforeResize');\n    emit('resize');\n  };\n\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    observer = new ResizeObserver(entries => {\n      const {\n        width,\n        height\n      } = swiper;\n      let newWidth = width;\n      let newHeight = height;\n      entries.forEach(({\n        contentBoxSize,\n        contentRect,\n        target\n      }) => {\n        if (target && target !== swiper.el) return;\n        newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n        newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n      });\n\n      if (newWidth !== width || newHeight !== height) {\n        resizeHandler();\n      }\n    });\n    observer.observe(swiper.el);\n  };\n\n  const removeObserver = () => {\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('orientationchange');\n  };\n\n  on('init', () => {\n    if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\n      createObserver();\n      return;\n    }\n\n    window.addEventListener('resize', resizeHandler);\n    window.addEventListener('orientationchange', orientationChangeHandler);\n  });\n  on('destroy', () => {\n    removeObserver();\n    window.removeEventListener('resize', resizeHandler);\n    window.removeEventListener('orientationchange', orientationChangeHandler);\n  });\n}","map":{"version":3,"sources":["/Users/gianningamy/cryptobet/front-end/master/node_modules/swiper/core/modules/resize/resize.js"],"names":["getWindow","Resize","swiper","on","emit","window","observer","resizeHandler","destroyed","initialized","createObserver","ResizeObserver","entries","width","height","newWidth","newHeight","forEach","contentBoxSize","contentRect","target","el","inlineSize","blockSize","observe","removeObserver","unobserve","orientationChangeHandler","params","resizeObserver","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import { getWindow } from 'ssr-window';\nexport default function Resize({\n  swiper,\n  on,\n  emit\n}) {\n  const window = getWindow();\n  let observer = null;\n\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('beforeResize');\n    emit('resize');\n  };\n\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    observer = new ResizeObserver(entries => {\n      const {\n        width,\n        height\n      } = swiper;\n      let newWidth = width;\n      let newHeight = height;\n      entries.forEach(({\n        contentBoxSize,\n        contentRect,\n        target\n      }) => {\n        if (target && target !== swiper.el) return;\n        newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n        newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n      });\n\n      if (newWidth !== width || newHeight !== height) {\n        resizeHandler();\n      }\n    });\n    observer.observe(swiper.el);\n  };\n\n  const removeObserver = () => {\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('orientationchange');\n  };\n\n  on('init', () => {\n    if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\n      createObserver();\n      return;\n    }\n\n    window.addEventListener('resize', resizeHandler);\n    window.addEventListener('orientationchange', orientationChangeHandler);\n  });\n  on('destroy', () => {\n    removeObserver();\n    window.removeEventListener('resize', resizeHandler);\n    window.removeEventListener('orientationchange', orientationChangeHandler);\n  });\n}"]},"metadata":{},"sourceType":"module"}