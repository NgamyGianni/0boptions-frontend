"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _useTooltip = require("../shared/use-tooltip");

var _useIcon = require("../shared/use-icon");

var _useRouteProps = require("../shared/use-route-props");

var _preloader = _interopRequireDefault(require("./preloader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Button = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      text = props.text,
      type = props.type,
      _props$href = props.href,
      href = _props$href === void 0 ? '#' : _props$href,
      target = props.target,
      tabLink = props.tabLink,
      tabLinkActive = props.tabLinkActive,
      round = props.round,
      roundIos = props.roundIos,
      roundAurora = props.roundAurora,
      roundMd = props.roundMd,
      fill = props.fill,
      fillIos = props.fillIos,
      fillAurora = props.fillAurora,
      fillMd = props.fillMd,
      large = props.large,
      largeIos = props.largeIos,
      largeAurora = props.largeAurora,
      largeMd = props.largeMd,
      small = props.small,
      smallIos = props.smallIos,
      smallAurora = props.smallAurora,
      smallMd = props.smallMd,
      raised = props.raised,
      raisedIos = props.raisedIos,
      raisedAurora = props.raisedAurora,
      raisedMd = props.raisedMd,
      active = props.active,
      outline = props.outline,
      outlineIos = props.outlineIos,
      outlineAurora = props.outlineAurora,
      outlineMd = props.outlineMd,
      disabled = props.disabled,
      preloader = props.preloader,
      preloaderSize = props.preloaderSize,
      preloaderColor = props.preloaderColor,
      loading = props.loading;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);

  var onClick = function onClick(e) {
    (0, _utils.emit)(props, 'click', e);
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current
    };
  });
  (0, _useTooltip.useTooltip)(elRef, props);
  (0, _useRouteProps.useRouteProps)(elRef, props);

  var getClasses = function getClasses() {
    return (0, _utils.classNames)(className, 'button', {
      'tab-link': tabLink || tabLink === '',
      'tab-link-active': tabLinkActive,
      'button-round': round,
      'button-round-ios': roundIos,
      'button-round-aurora': roundAurora,
      'button-round-md': roundMd,
      'button-fill': fill,
      'button-fill-ios': fillIos,
      'button-fill-aurora': fillAurora,
      'button-fill-md': fillMd,
      'button-large': large,
      'button-large-ios': largeIos,
      'button-large-aurora': largeAurora,
      'button-large-md': largeMd,
      'button-small': small,
      'button-small-ios': smallIos,
      'button-small-aurora': smallAurora,
      'button-small-md': smallMd,
      'button-raised': raised,
      'button-raised-ios': raisedIos,
      'button-raised-aurora': raisedAurora,
      'button-raised-md': raisedMd,
      'button-active': active,
      'button-outline': outline,
      'button-outline-ios': outlineIos,
      'button-outline-aurora': outlineAurora,
      'button-outline-md': outlineMd,
      'button-preloader': preloader,
      'button-loading': loading,
      disabled: disabled
    }, (0, _mixins.colorClasses)(props), (0, _mixins.routerClasses)(props), (0, _mixins.actionsClasses)(props));
  };

  var ButtonTag = type === 'submit' || type === 'reset' || type === 'button' ? 'button' : 'a';

  var getAttrs = function getAttrs() {
    var hrefComputed = href;
    if (href === true) hrefComputed = '#';
    if (href === false || ButtonTag === 'button') hrefComputed = undefined; // no href attribute

    return (0, _utils.extend)({
      href: hrefComputed,
      target: target,
      type: type,
      'data-tab': (0, _utils.isStringProp)(tabLink) && tabLink || undefined
    }, (0, _mixins.routerAttrs)(props), (0, _mixins.actionsAttrs)(props));
  };

  var iconEl = (0, _useIcon.useIcon)(props);
  var textEl;

  if (text) {
    textEl = /*#__PURE__*/_react.default.createElement("span", null, text);
  }

  if (preloader) {
    return /*#__PURE__*/_react.default.createElement(ButtonTag, _extends({
      ref: elRef,
      id: id,
      style: style,
      className: getClasses()
    }, getAttrs(), extraAttrs, {
      onClick: onClick
    }), /*#__PURE__*/_react.default.createElement(_preloader.default, {
      size: preloaderSize,
      color: preloaderColor
    }), /*#__PURE__*/_react.default.createElement("span", null, iconEl, textEl, children));
  }

  return /*#__PURE__*/_react.default.createElement(ButtonTag, _extends({
    ref: elRef,
    id: id,
    style: style,
    className: getClasses()
  }, getAttrs(), extraAttrs, {
    onClick: onClick
  }), iconEl, textEl, children);
});
Button.displayName = 'f7-button';
var _default = Button;
exports.default = _default;