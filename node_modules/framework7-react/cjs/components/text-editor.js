"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _f = require("../shared/f7");

var _watchProp = require("../shared/watch-prop");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }


var TextEditor = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _f7TextEditor = (0, _react.useRef)(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      mode = props.mode,
      value = props.value,
      buttons = props.buttons,
      customButtons = props.customButtons,
      dividers = props.dividers,
      imageUrlText = props.imageUrlText,
      linkUrlText = props.linkUrlText,
      placeholder = props.placeholder,
      clearFormattingOnPaste = props.clearFormattingOnPaste,
      _props$resizable = props.resizable,
      resizable = _props$resizable === void 0 ? false : _props$resizable;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);

  var onChange = function onChange(editor, editorValue) {
    (0, _utils.emit)(props, 'textEditorChange', editorValue);
  };

  var onInput = function onInput(editor, editorValue) {
    (0, _utils.emit)(props, 'textEditorInput', editorValue);
  };

  var onFocus = function onFocus() {
    (0, _utils.emit)(props, 'textEditorFocus');
  };

  var onBlur = function onBlur() {
    (0, _utils.emit)(props, 'textEditorBlur');
  };

  var onButtonClick = function onButtonClick(editor, button) {
    (0, _utils.emit)(props, 'textEditorButtonClick', button);
  };

  var onKeyboardOpen = function onKeyboardOpen() {
    (0, _utils.emit)(props, 'textEditorKeyboardOpen');
  };

  var onKeyboardClose = function onKeyboardClose() {
    (0, _utils.emit)(props, 'textEditorKeyboardClose');
  };

  var onPopoverOpen = function onPopoverOpen() {
    (0, _utils.emit)(props, 'textEditorPopoverOpen');
  };

  var onPopoverClose = function onPopoverClose() {
    (0, _utils.emit)(props, 'textEditorPopoverClose');
  };

  var onInsertLink = function onInsertLink(editor, url) {
    (0, _utils.emit)(props, 'textEditorInsertLink', url);
  };

  var onInsertImage = function onInsertImage(editor, url) {
    (0, _utils.emit)(props, 'textEditorInsertImage', url);
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current,
      f7TextEditor: function f7TextEditor() {
        return _f7TextEditor.current;
      }
    };
  });
  (0, _watchProp.watchProp)(value, function (newValue) {
    if (_f7TextEditor.current) {
      _f7TextEditor.current.setValue(newValue);
    }
  });

  var onMount = function onMount() {
    var params = (0, _utils.noUndefinedProps)({
      el: elRef.current,
      mode: mode,
      value: value,
      buttons: buttons,
      customButtons: customButtons,
      dividers: dividers,
      imageUrlText: imageUrlText,
      linkUrlText: linkUrlText,
      placeholder: placeholder,
      clearFormattingOnPaste: clearFormattingOnPaste,
      on: {
        change: onChange,
        input: onInput,
        focus: onFocus,
        blur: onBlur,
        buttonClick: onButtonClick,
        keyboardOpen: onKeyboardOpen,
        keyboardClose: onKeyboardClose,
        popoverOpen: onPopoverOpen,
        popoverClose: onPopoverClose,
        insertLink: onInsertLink,
        insertImage: onInsertImage
      }
    });
    (0, _f.f7ready)(function () {
      _f7TextEditor.current = _f.f7.textEditor.create(params);
    });
  };

  var onDestroy = function onDestroy() {
    if (_f7TextEditor.current && _f7TextEditor.current.destroy) {
      _f7TextEditor.current.destroy();
    }

    _f7TextEditor.current = null;
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    onMount();
    return onDestroy;
  }, []);
  var slots = (0, _utils.getSlots)(props);
  var classes = (0, _utils.classNames)(className, 'text-editor', resizable && 'text-editor-resizable', (0, _mixins.colorClasses)(props));
  return /*#__PURE__*/_react.default.createElement("div", _extends({
    ref: elRef,
    id: id,
    style: style,
    className: classes
  }, extraAttrs), slots['root-start'], /*#__PURE__*/_react.default.createElement("div", {
    className: "text-editor-content",
    contentEditable: true
  }, slots.default), slots['root-end'], slots.root);
});
TextEditor.displayName = 'f7-text-editor';
var _default = TextEditor;
exports.default = _default;