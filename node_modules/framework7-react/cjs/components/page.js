"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _f = require("../shared/f7");

var _pageContent = _interopRequireDefault(require("./page-content"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Page = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      name = props.name,
      stacked = props.stacked,
      withSubnavbar = props.withSubnavbar,
      subnavbar = props.subnavbar,
      withNavbarLarge = props.withNavbarLarge,
      navbarLarge = props.navbarLarge,
      noNavbar = props.noNavbar,
      noToolbar = props.noToolbar,
      tabs = props.tabs,
      _props$pageContent = props.pageContent,
      pageContent = _props$pageContent === void 0 ? true : _props$pageContent,
      noSwipeback = props.noSwipeback,
      ptr = props.ptr,
      ptrDistance = props.ptrDistance,
      _props$ptrPreloader = props.ptrPreloader,
      ptrPreloader = _props$ptrPreloader === void 0 ? true : _props$ptrPreloader,
      ptrBottom = props.ptrBottom,
      ptrMousewheel = props.ptrMousewheel,
      infinite = props.infinite,
      infiniteTop = props.infiniteTop,
      infiniteDistance = props.infiniteDistance,
      _props$infinitePreloa = props.infinitePreloader,
      infinitePreloader = _props$infinitePreloa === void 0 ? true : _props$infinitePreloa,
      hideBarsOnScroll = props.hideBarsOnScroll,
      hideNavbarOnScroll = props.hideNavbarOnScroll,
      hideToolbarOnScroll = props.hideToolbarOnScroll,
      messagesContent = props.messagesContent,
      loginScreen = props.loginScreen,
      onPtrPullStart = props.onPtrPullStart,
      onPtrPullMove = props.onPtrPullMove,
      onPtrPullEnd = props.onPtrPullEnd,
      onPtrRefresh = props.onPtrRefresh,
      onPtrDone = props.onPtrDone,
      onInfinite = props.onInfinite;
  var hasSubnavbar = (0, _react.useRef)(false);
  var hasNavbarLarge = (0, _react.useRef)(false);
  var hasNavbarLargeCollapsed = (0, _react.useRef)(false);
  var hasCardExpandableOpened = (0, _react.useRef)(false);
  var routerPositionClass = (0, _react.useRef)('');
  var routerForceUnstack = (0, _react.useRef)(false);
  var routerPageRole = (0, _react.useRef)(null);
  var routerPageRoleDetailRoot = (0, _react.useRef)(false);
  var routerPageMasterStack = (0, _react.useRef)(false);
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null); // Main Page Events

  var onPageMounted = function onPageMounted(page) {
    if (elRef.current !== page.el) return;
    (0, _utils.emit)(props, 'pageMounted', page);
  };

  var onPageInit = function onPageInit(page) {
    if (elRef.current !== page.el) return;

    if (typeof withSubnavbar === 'undefined' && typeof subnavbar === 'undefined') {
      if (page.$navbarEl && page.$navbarEl.length && page.$navbarEl.find('.subnavbar').length || page.$el.children('.navbar').find('.subnavbar').length) {
        hasSubnavbar.current = true;
      }
    }

    if (typeof withNavbarLarge === 'undefined' && typeof navbarLarge === 'undefined') {
      if (page.$navbarEl && page.$navbarEl.hasClass('navbar-large')) {
        hasNavbarLarge.current = true;
      }
    }

    (0, _utils.emit)(props, 'pageInit', page);
  };

  var onPageReinit = function onPageReinit(page) {
    if (elRef.current !== page.el) return;
    (0, _utils.emit)(props, 'pageReinit', page);
  };

  var onPageBeforeIn = function onPageBeforeIn(page) {
    if (elRef.current !== page.el) return;

    if (!page.swipeBack) {
      if (page.from === 'next') {
        routerPositionClass.current = 'page-next';
      }

      if (page.from === 'previous') {
        routerPositionClass.current = 'page-previous';
      }
    }

    (0, _utils.emit)(props, 'pageBeforeIn', page);
  };

  var onPageBeforeOut = function onPageBeforeOut(page) {
    if (elRef.current !== page.el) return;
    (0, _utils.emit)(props, 'pageBeforeOut', page);
  };

  var onPageAfterOut = function onPageAfterOut(page) {
    if (elRef.current !== page.el) return;

    if (page.to === 'next') {
      routerPositionClass.current = 'page-next';
    }

    if (page.to === 'previous') {
      routerPositionClass.current = 'page-previous';
    }

    (0, _utils.emit)(props, 'pageAfterOut', page);
  };

  var onPageAfterIn = function onPageAfterIn(page) {
    if (elRef.current !== page.el) return;
    routerPositionClass.current = 'page-current';
    (0, _utils.emit)(props, 'pageAfterIn', page);
  };

  var onPageBeforeRemove = function onPageBeforeRemove(page) {
    if (elRef.current !== page.el) return;
    (0, _utils.emit)(props, 'pageBeforeRemove', page);
  };

  var onPageBeforeUnmount = function onPageBeforeUnmount(page) {
    if (elRef.current !== page.el) return;
    (0, _utils.emit)(props, 'pageBeforeUnmount', page);
  }; // Helper events


  var onPageStack = function onPageStack(pageEl) {
    if (elRef.current !== pageEl) return;
    routerForceUnstack.current = false;
  };

  var onPageUnstack = function onPageUnstack(pageEl) {
    if (elRef.current !== pageEl) return;
    routerForceUnstack.current = true;
  };

  var onPagePosition = function onPagePosition(pageEl, position) {
    if (elRef.current !== pageEl) return;
    routerPositionClass.current = "page-" + position;
  };

  var onPageRole = function onPageRole(pageEl, rolesData) {
    if (elRef.current !== pageEl) return;
    routerPageRole.current = rolesData.role;
    routerPageRoleDetailRoot.current = rolesData.detailRoot;
  };

  var onPageMasterStack = function onPageMasterStack(pageEl) {
    if (elRef.current !== pageEl) return;
    routerPageMasterStack.current = true;
  };

  var onPageMasterUnstack = function onPageMasterUnstack(pageEl) {
    if (elRef.current !== pageEl) return;
    routerPageMasterStack.current = false;
  };

  var onPageNavbarLargeCollapsed = function onPageNavbarLargeCollapsed(pageEl) {
    if (elRef.current !== pageEl) return;
    hasNavbarLargeCollapsed.current = true;
  };

  var onPageNavbarLargeExpanded = function onPageNavbarLargeExpanded(pageEl) {
    if (elRef.current !== pageEl) return;
    hasNavbarLargeCollapsed.current = false;
  };

  var onCardOpened = function onCardOpened(cardEl, pageEl) {
    if (elRef.current !== pageEl) return;
    hasCardExpandableOpened.current = true;
  };

  var onCardClose = function onCardClose(cardEl, pageEl) {
    if (elRef.current !== pageEl) return;
    hasCardExpandableOpened.current = false;
  };

  var onPageTabShow = function onPageTabShow(pageEl) {
    if (elRef.current !== pageEl) return;
    (0, _utils.emit)(props, 'pageTabShow');
  };

  var onPageTabHide = function onPageTabHide(pageEl) {
    if (elRef.current !== pageEl) return;
    (0, _utils.emit)(props, 'pageTabHide');
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current
    };
  });

  var attachEvents = function attachEvents() {
    (0, _f.f7ready)(function () {
      _f.f7.on('pageMounted', onPageMounted);

      _f.f7.on('pageInit', onPageInit);

      _f.f7.on('pageReinit', onPageReinit);

      _f.f7.on('pageBeforeIn', onPageBeforeIn);

      _f.f7.on('pageBeforeOut', onPageBeforeOut);

      _f.f7.on('pageAfterOut', onPageAfterOut);

      _f.f7.on('pageAfterIn', onPageAfterIn);

      _f.f7.on('pageBeforeRemove', onPageBeforeRemove);

      _f.f7.on('pageBeforeUnmount', onPageBeforeUnmount);

      _f.f7.on('pageStack', onPageStack);

      _f.f7.on('pageUnstack', onPageUnstack);

      _f.f7.on('pagePosition', onPagePosition);

      _f.f7.on('pageRole', onPageRole);

      _f.f7.on('pageMasterStack', onPageMasterStack);

      _f.f7.on('pageMasterUnstack', onPageMasterUnstack);

      _f.f7.on('pageNavbarLargeCollapsed', onPageNavbarLargeCollapsed);

      _f.f7.on('pageNavbarLargeExpanded', onPageNavbarLargeExpanded);

      _f.f7.on('cardOpened', onCardOpened);

      _f.f7.on('cardClose', onCardClose);

      _f.f7.on('pageTabShow', onPageTabShow);

      _f.f7.on('pageTabHide', onPageTabHide);
    });
  };

  var detachEvents = function detachEvents() {
    if (!_f.f7) return;

    _f.f7.off('pageMounted', onPageMounted);

    _f.f7.off('pageInit', onPageInit);

    _f.f7.off('pageReinit', onPageReinit);

    _f.f7.off('pageBeforeIn', onPageBeforeIn);

    _f.f7.off('pageBeforeOut', onPageBeforeOut);

    _f.f7.off('pageAfterOut', onPageAfterOut);

    _f.f7.off('pageAfterIn', onPageAfterIn);

    _f.f7.off('pageBeforeRemove', onPageBeforeRemove);

    _f.f7.off('pageBeforeUnmount', onPageBeforeUnmount);

    _f.f7.off('pageStack', onPageStack);

    _f.f7.off('pageUnstack', onPageUnstack);

    _f.f7.off('pagePosition', onPagePosition);

    _f.f7.off('pageRole', onPageRole);

    _f.f7.off('pageMasterStack', onPageMasterStack);

    _f.f7.off('pageMasterUnstack', onPageMasterUnstack);

    _f.f7.off('pageNavbarLargeCollapsed', onPageNavbarLargeCollapsed);

    _f.f7.off('pageNavbarLargeExpanded', onPageNavbarLargeExpanded);

    _f.f7.off('cardOpened', onCardOpened);

    _f.f7.off('cardClose', onCardClose);

    _f.f7.off('pageTabShow', onPageTabShow);

    _f.f7.off('pageTabHide', onPageTabHide);
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    attachEvents();
    return detachEvents;
  });
  var slots = (0, _utils.getSlots)(props);
  var fixedList = [];
  var staticList = [];
  var slotsStatic = slots.static,
      slotsFixed = slots.fixed,
      slotsDefault = slots.default;
  var fixedTags = 'navbar toolbar tabbar subnavbar searchbar messagebar fab list-index panel'.split(' ').map(function (tagName) {
    return "f7-" + tagName;
  });
  var hasSubnavbarComputed;
  var hasNavbarLargeComputed;
  var hasMessages = messagesContent;

  if (slotsDefault) {
    slotsDefault.forEach(function (child) {
      if (typeof child === 'undefined') return;
      var isFixedTag = false;
      var tag = child.type && (child.type.displayName || child.type.name);

      if (!tag) {
        if (pageContent) staticList.push(child);
        return;
      }

      if (tag === 'f7-subnavbar') hasSubnavbarComputed = true;

      if (tag === 'f7-navbar') {
        if (child.props && child.props.large) hasNavbarLargeComputed = true;
      }

      if (typeof hasMessages === 'undefined' && tag === 'f7-messages') hasMessages = true;

      if (fixedTags.indexOf(tag) >= 0) {
        isFixedTag = true;
      }

      if (pageContent) {
        if (isFixedTag) fixedList.push(child);else staticList.push(child);
      }
    });
  }

  var forceSubnavbar = typeof subnavbar === 'undefined' && typeof withSubnavbar === 'undefined' ? hasSubnavbarComputed || hasSubnavbar.current : false;
  var forceNavbarLarge = typeof navbarLarge === 'undefined' && typeof withNavbarLarge === 'undefined' ? hasNavbarLargeComputed || hasNavbarLarge.current : false;
  var classes = (0, _utils.classNames)(className, 'page', routerPositionClass.current, {
    stacked: stacked && !routerForceUnstack.current,
    tabs: tabs,
    'page-with-subnavbar': subnavbar || withSubnavbar || forceSubnavbar,
    'page-with-navbar-large': navbarLarge || withNavbarLarge || forceNavbarLarge,
    'no-navbar': noNavbar,
    'no-toolbar': noToolbar,
    'no-swipeback': noSwipeback,
    'page-master': routerPageRole.current === 'master',
    'page-master-detail': routerPageRole.current === 'detail',
    'page-master-detail-root': routerPageRoleDetailRoot.current === true,
    'page-master-stacked': routerPageMasterStack.current === true,
    'page-with-navbar-large-collapsed': hasNavbarLargeCollapsed.current === true,
    'page-with-card-opened': hasCardExpandableOpened.current === true,
    'login-screen-page': loginScreen
  }, (0, _mixins.colorClasses)(props));

  if (!pageContent) {
    return /*#__PURE__*/_react.default.createElement("div", _extends({
      id: id,
      style: style,
      className: classes,
      "data-name": name,
      ref: elRef
    }, extraAttrs), slotsFixed, slotsStatic, slotsDefault);
  }

  var pageContentEl = /*#__PURE__*/_react.default.createElement(_pageContent.default, {
    ptr: ptr,
    ptrDistance: ptrDistance,
    ptrPreloader: ptrPreloader,
    ptrBottom: ptrBottom,
    ptrMousewheel: ptrMousewheel,
    infinite: infinite,
    infiniteTop: infiniteTop,
    infiniteDistance: infiniteDistance,
    infinitePreloader: infinitePreloader,
    hideBarsOnScroll: hideBarsOnScroll,
    hideNavbarOnScroll: hideNavbarOnScroll,
    hideToolbarOnScroll: hideToolbarOnScroll,
    messagesContent: messagesContent || hasMessages,
    loginScreen: loginScreen,
    onPtrPullStart: onPtrPullStart,
    onPtrPullMove: onPtrPullMove,
    onPtrPullEnd: onPtrPullEnd,
    onPtrRefresh: onPtrRefresh,
    onPtrDone: onPtrDone,
    onInfinite: onInfinite
  }, slotsStatic, staticList);

  return /*#__PURE__*/_react.default.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    "data-name": name,
    ref: elRef
  }, extraAttrs), fixedList, slotsFixed, pageContentEl);
});
Page.displayName = 'f7-page';
var _default = Page;
exports.default = _default;