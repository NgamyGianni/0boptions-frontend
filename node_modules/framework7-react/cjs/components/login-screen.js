"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _f = require("../shared/f7");

var _watchProp = require("../shared/watch-prop");

var _modalStateClasses = require("../shared/modal-state-classes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }


var LoginScreen = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _f7LoginScreen = (0, _react.useRef)(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      opened = props.opened,
      animate = props.animate,
      containerEl = props.containerEl;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var isOpened = (0, _react.useRef)(opened);
  var isClosing = (0, _react.useRef)(false);
  var elRef = (0, _react.useRef)(null);

  var onOpen = function onOpen(instance) {
    isOpened.current = true;
    isClosing.current = false;
    (0, _utils.emit)(props, 'loginScreenOpen', instance);
  };

  var onOpened = function onOpened(instance) {
    (0, _utils.emit)(props, 'loginScreenOpened', instance);
  };

  var onClose = function onClose(instance) {
    isOpened.current = false;
    isClosing.current = true;
    (0, _utils.emit)(props, 'loginScreenClose', instance);
  };

  var onClosed = function onClosed(instance) {
    isClosing.current = false;
    (0, _utils.emit)(props, 'loginScreenClosed', instance);
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current,
      f7LoginScreen: function f7LoginScreen() {
        return _f7LoginScreen.current;
      }
    };
  }); // watch opened changes

  (0, _watchProp.watchProp)(opened, function (value) {
    if (!_f7LoginScreen.current) return;

    if (value) {
      _f7LoginScreen.current.open();
    } else {
      _f7LoginScreen.current.close();
    }
  });

  var modalEvents = function modalEvents(method) {
    if (!_f7LoginScreen.current) return;

    _f7LoginScreen.current[method]('open', onOpen);

    _f7LoginScreen.current[method]('opened', onOpened);

    _f7LoginScreen.current[method]('close', onClose);

    _f7LoginScreen.current[method]('closed', onClosed);
  };

  var onMount = function onMount() {
    if (!elRef.current) return;
    (0, _f.f7ready)(function () {
      var loginScreenParams = {
        el: elRef.current
      };
      if ('animate' in props) loginScreenParams.animate = animate;
      if ('containerEl' in props) loginScreenParams.containerEl = containerEl;
      _f7LoginScreen.current = _f.f7.loginScreen.create(loginScreenParams);
      modalEvents('on');

      if (opened) {
        _f7LoginScreen.current.open(false);
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_f7LoginScreen.current) {
      _f7LoginScreen.current.destroy();
    }

    _f7LoginScreen.current = null;
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    modalEvents('on');
    return function () {
      modalEvents('off');
    };
  });
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    onMount();
    return onDestroy;
  }, []);
  var classes = (0, _utils.classNames)(className, 'login-screen', (0, _modalStateClasses.modalStateClasses)({
    isOpened: isOpened,
    isClosing: isClosing
  }), (0, _mixins.colorClasses)(props));
  return /*#__PURE__*/_react.default.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
LoginScreen.displayName = 'f7-login-screen';
var _default = LoginScreen;
exports.default = _default;