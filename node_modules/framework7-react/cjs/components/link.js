"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _useIcon = require("../shared/use-icon");

var _useRouteProps = require("../shared/use-route-props");

var _useTooltip = require("../shared/use-tooltip");

var _tabbarContext = require("../shared/tabbar-context");

var _badge = _interopRequireDefault(require("./badge"));

var _useSmartSelect = require("../shared/use-smart-select");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }


var Link = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _f7SmartSelect = (0, _react.useRef)(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      noLinkClass = props.noLinkClass,
      text = props.text,
      tabLink = props.tabLink,
      tabLinkActive = props.tabLinkActive,
      tabbarLabel = props.tabbarLabel,
      iconOnly = props.iconOnly,
      badge = props.badge,
      badgeColor = props.badgeColor,
      _props$href = props.href,
      href = _props$href === void 0 ? '#' : _props$href,
      target = props.target,
      smartSelect = props.smartSelect,
      smartSelectParams = props.smartSelectParams;
  var tabbarContext = (0, _react.useContext)(_tabbarContext.TabbarContext);
  var isTabbarLabel = tabbarLabel || tabbarContext.tabbarHasLabels;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);

  var onClick = function onClick(e) {
    (0, _utils.emit)(props, 'click', e);
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current,
      f7SmartSelect: function f7SmartSelect() {
        return _f7SmartSelect.current;
      }
    };
  });
  (0, _useTooltip.useTooltip)(elRef, props);
  (0, _useRouteProps.useRouteProps)(elRef, props);
  (0, _useSmartSelect.useSmartSelect)(smartSelect, smartSelectParams, _f7SmartSelect, function () {
    return elRef.current;
  });
  var textEl;
  var badgeEl;

  if (text) {
    if (badge) badgeEl = /*#__PURE__*/_react.default.createElement(_badge.default, {
      color: badgeColor
    }, badge);
    textEl = /*#__PURE__*/_react.default.createElement("span", {
      className: isTabbarLabel ? 'tabbar-label' : ''
    }, text, badgeEl);
  }

  var iconEl = (0, _useIcon.useIcon)(props);
  var iconOnlyComputed;

  if (iconOnly || !text && children && children.length === 0 || !text && !children) {
    iconOnlyComputed = true;
  } else {
    iconOnlyComputed = false;
  }

  var classes = (0, _utils.classNames)(className, {
    link: !(noLinkClass || isTabbarLabel),
    'icon-only': iconOnlyComputed,
    'tab-link': tabLink || tabLink === '',
    'tab-link-active': tabLinkActive,
    'smart-select': smartSelect
  }, (0, _mixins.colorClasses)(props), (0, _mixins.routerClasses)(props), (0, _mixins.actionsClasses)(props));
  var hrefComputed = href;
  if (href === true) hrefComputed = '#';
  if (href === false) hrefComputed = undefined; // no href attribute

  var attrs = _extends({
    href: hrefComputed,
    target: target,
    'data-tab': (0, _utils.isStringProp)(tabLink) && tabLink || undefined
  }, (0, _mixins.routerAttrs)(props), (0, _mixins.actionsAttrs)(props));

  return /*#__PURE__*/_react.default.createElement("a", _extends({
    ref: elRef,
    id: id,
    style: style,
    className: classes
  }, attrs, extraAttrs, {
    onClick: onClick
  }), iconEl, textEl, children);
});
Link.displayName = 'f7-link';
var _default = Link;
exports.default = _default;