"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _useIcon = require("../shared/use-icon");

var _f = require("../shared/f7");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var TreeviewItem = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      toggle = props.toggle,
      itemToggle = props.itemToggle,
      selectable = props.selectable,
      selected = props.selected,
      opened = props.opened,
      label = props.label,
      loadChildren = props.loadChildren,
      link = props.link;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);

  var onClick = function onClick(event) {
    (0, _utils.emit)(props, 'click', event);
  };

  var onOpen = function onOpen(el) {
    if (elRef.current !== el) return;
    (0, _utils.emit)(props, 'treeviewOpen', el);
  };

  var onClose = function onClose(el) {
    if (elRef.current !== el) return;
    (0, _utils.emit)(props, 'treeviewClose', el);
  };

  var onLoadChildren = function onLoadChildren(el, done) {
    if (elRef.current !== el) return;
    (0, _utils.emit)(props, 'treeviewLoadChildren', el, done);
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current
    };
  });

  var attachEvents = function attachEvents() {
    if (!elRef.current) return;
    (0, _f.f7ready)(function () {
      _f.f7.on('treeviewOpen', onOpen);

      _f.f7.on('treeviewClose', onClose);

      _f.f7.on('treeviewLoadChildren', onLoadChildren);
    });
  };

  var detachEvents = function detachEvents() {
    if (!_f.f7) return;

    _f.f7.off('treeviewOpen', onOpen);

    _f.f7.off('treeviewClose', onClose);

    _f.f7.off('treeviewLoadChildren', onLoadChildren);
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    attachEvents();
    return detachEvents;
  });
  var slots = (0, _utils.getSlots)(props);
  var hasChildren = slots.default && slots.default.length || slots.children && slots.children.length || slots['children-start'] && slots['children-start'].length;
  var needToggle = typeof toggle === 'undefined' ? hasChildren : toggle;
  var iconEl = (0, _useIcon.useIcon)(props);
  var TreeviewRootTag = link || link === '' ? 'a' : 'div';
  var classes = (0, _utils.classNames)(className, 'treeview-item', {
    'treeview-item-opened': opened,
    'treeview-load-children': loadChildren
  }, (0, _mixins.colorClasses)(props));
  var itemRootClasses = (0, _utils.classNames)('treeview-item-root', {
    'treeview-item-selectable': selectable,
    'treeview-item-selected': selected,
    'treeview-item-toggle': itemToggle
  }, (0, _mixins.routerClasses)(props), (0, _mixins.actionsClasses)(props));
  var href = link;
  if (link === true) href = '#';
  if (link === false) href = undefined; // no href attribute

  var itemRootAttrs = _extends({
    href: href
  }, (0, _mixins.routerAttrs)(props), (0, _mixins.actionsAttrs)(props));

  return /*#__PURE__*/_react.default.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/_react.default.createElement(TreeviewRootTag, _extends({
    onClick: onClick,
    className: itemRootClasses
  }, itemRootAttrs), slots['root-start'], needToggle && /*#__PURE__*/_react.default.createElement("div", {
    className: "treeview-toggle"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "treeview-item-content"
  }, slots['content-start'], iconEl, slots.media, /*#__PURE__*/_react.default.createElement("div", {
    className: "treeview-item-label"
  }, slots['label-start'], label, slots.label), slots.content, slots['content-end']), slots.root, slots['root-end']), hasChildren && /*#__PURE__*/_react.default.createElement("div", {
    className: "treeview-item-children"
  }, slots['children-start'], slots.default, slots.children));
});
TreeviewItem.displayName = 'f7-treeview-item';
var _default = TreeviewItem;
exports.default = _default;