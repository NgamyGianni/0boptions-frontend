"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _f = require("../shared/f7");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Row = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      _props$tag = props.tag,
      tag = _props$tag === void 0 ? 'div' : _props$tag,
      noGap = props.noGap,
      resizable = props.resizable,
      resizableFixed = props.resizableFixed,
      resizableAbsolute = props.resizableAbsolute,
      _props$resizableHandl = props.resizableHandler,
      resizableHandler = _props$resizableHandl === void 0 ? true : _props$resizableHandl;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);

  var onClick = function onClick(event) {
    (0, _utils.emit)(props, 'click', event);
  };

  var onResize = function onResize(el) {
    if (el === elRef.current) {
      (0, _utils.emit)(props, 'gridResize');
    }
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current
    };
  });
  (0, _react.useEffect)(function () {
    (0, _f.f7ready)(function () {
      _f.f7.on('gridResize', onResize);
    });
    return function () {
      _f.f7.off('gridResize', onResize);
    };
  });
  var RowTag = tag;
  var classes = (0, _utils.classNames)(className, 'row', {
    'no-gap': noGap,
    resizable: resizable,
    'resizable-fixed': resizableFixed,
    'resizable-absolute': resizableAbsolute
  }, (0, _mixins.colorClasses)(props));
  return /*#__PURE__*/_react.default.createElement(RowTag, _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick: onClick
  }), children, resizable && resizableHandler && /*#__PURE__*/_react.default.createElement("span", {
    className: "resize-handler"
  }));
});
Row.displayName = 'f7-row';
var _default = Row;
exports.default = _default;