"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _useTooltip = require("../shared/use-tooltip");

var _useIcon = require("../shared/use-icon");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Chip = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      media = props.media,
      text = props.text,
      deleteable = props.deleteable,
      mediaTextColor = props.mediaTextColor,
      mediaBgColor = props.mediaBgColor,
      outline = props.outline;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);

  var onClick = function onClick(event) {
    (0, _utils.emit)(props, 'click', event);
  };

  var onDeleteClick = function onDeleteClick(event) {
    (0, _utils.emit)(props, 'delete', event);
  };

  var elRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current
    };
  });
  (0, _useTooltip.useTooltip)(elRef, props);
  var slots = (0, _utils.getSlots)(props);
  var iconEl = (0, _useIcon.useIcon)(props);
  var mediaEl;
  var labelEl;
  var deleteEl;

  if (media || iconEl || slots && slots.media) {
    var mediaClasses = (0, _utils.classNames)('chip-media', mediaTextColor && "text-color-" + mediaTextColor, mediaBgColor && "bg-color-" + mediaBgColor);
    mediaEl = /*#__PURE__*/_react.default.createElement("div", {
      className: mediaClasses
    }, iconEl, media, slots.media);
  }

  if (text || slots && (slots.text || slots.default && slots.default.length)) {
    labelEl = /*#__PURE__*/_react.default.createElement("div", {
      className: "chip-label"
    }, text, slots.text, slots.default);
  }

  if (deleteable) {
    deleteEl = /*#__PURE__*/_react.default.createElement("a", {
      className: "chip-delete",
      onClick: onDeleteClick
    });
  }

  var classes = (0, _utils.classNames)(className, 'chip', {
    'chip-outline': outline
  }, (0, _mixins.colorClasses)(props));
  return /*#__PURE__*/_react.default.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick: onClick
  }), mediaEl, labelEl, deleteEl);
});
Chip.displayName = 'f7-chip';
var _default = Chip;
exports.default = _default;