function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, emit } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { f7, f7ready } from '../shared/f7';
import { watchProp } from '../shared/watch-prop';
import { modalStateClasses } from '../shared/modal-state-classes';


var Actions = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      grid = props.grid,
      _props$opened = props.opened,
      opened = _props$opened === void 0 ? false : _props$opened,
      animate = props.animate;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);
  var isOpened = useRef(opened);
  var isClosing = useRef(false);

  var _f7Actions = useRef(null);

  var onOpen = function onOpen(instance) {
    isOpened.current = true;
    isClosing.current = false;
    emit(props, 'actionsOpen', instance);
  };

  var onOpened = function onOpened(instance) {
    emit(props, 'actionsOpened', instance);
  };

  var onClose = function onClose(instance) {
    isOpened.current = false;
    isClosing.current = true;
    emit(props, 'actionsClose', instance);
  };

  var onClosed = function onClosed(instance) {
    isClosing.current = false;
    emit(props, 'actionsClosed', instance);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      f7Actions: function f7Actions() {
        return _f7Actions.current;
      }
    };
  }); // watch opened changes

  watchProp(opened, function (value) {
    if (!_f7Actions.current) return;

    if (value) {
      _f7Actions.current.open();
    } else {
      _f7Actions.current.close();
    }
  });

  var modalEvents = function modalEvents(method) {
    if (!_f7Actions.current) return;

    _f7Actions.current[method]('open', onOpen);

    _f7Actions.current[method]('opened', onOpened);

    _f7Actions.current[method]('close', onClose);

    _f7Actions.current[method]('closed', onClosed);
  };

  var onMount = function onMount() {
    if (!elRef.current) return;
    var target = props.target,
        convertToPopover = props.convertToPopover,
        forceToPopover = props.forceToPopover,
        closeByBackdropClick = props.closeByBackdropClick,
        closeByOutsideClick = props.closeByOutsideClick,
        closeOnEscape = props.closeOnEscape,
        backdrop = props.backdrop,
        backdropEl = props.backdropEl,
        containerEl = props.containerEl;
    var params = {
      el: elRef.current,
      grid: grid
    };
    if (target) params.targetEl = target;
    if ('convertToPopover' in props) params.convertToPopover = convertToPopover;
    if ('forceToPopover' in props) params.forceToPopover = forceToPopover;
    if ('backdrop' in props) params.backdrop = backdrop;
    if ('backdropEl' in props) params.backdropEl = backdropEl;
    if ('closeByBackdropClick' in props) params.closeByBackdropClick = closeByBackdropClick;
    if ('closeByOutsideClick' in props) params.closeByOutsideClick = closeByOutsideClick;
    if ('closeOnEscape' in props) params.closeOnEscape = closeOnEscape;
    if ('animate' in props) params.animate = animate;
    if ('containerEl' in props) params.containerEl = containerEl;
    f7ready(function () {
      _f7Actions.current = f7.actions.create(params);
      modalEvents('on');

      if (opened) {
        _f7Actions.current.open(false);
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_f7Actions.current) _f7Actions.current.destroy();
    _f7Actions.current = null;
  };

  useIsomorphicLayoutEffect(function () {
    modalEvents('on');
    return function () {
      modalEvents('off');
    };
  });
  useIsomorphicLayoutEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  var classes = classNames(className, 'actions-modal', {
    'actions-grid': grid
  }, modalStateClasses({
    isOpened: isOpened,
    isClosing: isClosing
  }), colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Actions.displayName = 'f7-actions';
export default Actions;