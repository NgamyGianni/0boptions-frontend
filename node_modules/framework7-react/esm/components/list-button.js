function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs, isStringProp, emit } from '../shared/utils';
import { colorClasses, actionsAttrs, actionsClasses, routerAttrs, routerClasses } from '../shared/mixins';
import { useTooltip } from '../shared/use-tooltip';
import { useRouteProps } from '../shared/use-route-props';

var ListButton = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      title = props.title,
      text = props.text,
      tabLink = props.tabLink,
      tabLinkActive = props.tabLinkActive,
      link = props.link,
      href = props.href,
      target = props.target;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);
  var linkElRef = useRef(null);

  var onClick = function onClick(e) {
    emit(props, 'click', e);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current
    };
  });
  useTooltip(linkElRef, props);
  useRouteProps(linkElRef, props);

  var linkAttrs = _extends({
    href: typeof link === 'boolean' && typeof href === 'boolean' ? '#' : link || href,
    target: target,
    'data-tab': isStringProp(tabLink) && tabLink
  }, routerAttrs(props), actionsAttrs(props));

  var linkClasses = classNames(_extends({
    'list-button': true,
    'tab-link': tabLink || tabLink === '',
    'tab-link-active': tabLinkActive
  }, colorClasses(props), routerClasses(props), actionsClasses(props)));
  return /*#__PURE__*/React.createElement("li", _extends({
    id: id,
    style: style,
    className: className,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/React.createElement("a", _extends({
    className: linkClasses
  }, linkAttrs, {
    onClick: onClick,
    ref: linkElRef
  }), title, text, children));
});
ListButton.displayName = 'f7-list-button';
export default ListButton;