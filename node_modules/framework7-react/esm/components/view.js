function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable no-nested-ternary */
import React, { forwardRef, useRef, useImperativeHandle, useState } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, noUndefinedProps, emit, getRouterId } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { f7ready, f7routers, f7, f7events } from '../shared/f7';
import { useTab } from '../shared/use-tab';
import { useAsyncComponent } from '../shared/use-async-component';
import { getRouterInitialComponent } from '../shared/get-router-initial-component';
import { RouterContext } from '../shared/router-context';


var View = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      _props$init = props.init,
      init = _props$init === void 0 ? true : _props$init,
      main = props.main,
      tab = props.tab,
      tabActive = props.tabActive,
      url = props.url,
      _props$browserHistory = props.browserHistoryInitialMatch,
      browserHistoryInitialMatch = _props$browserHistory === void 0 ? true : _props$browserHistory;
  var childrenArray = React.Children.toArray(children);
  var initialPageComponent = childrenArray.filter(function (c) {
    return c.props && c.props.initialPage;
  })[0];
  var restChildren = childrenArray.filter(function (c) {
    return !c.props || !c.props.initialPage;
  });
  var extraAttrs = getExtraAttrs(props);

  var _f7View = useRef(null);

  var elRef = useRef(null);
  var routerData = useRef(null);
  var initialPage;
  var initialRoute;

  var onViewInit = function onViewInit(view) {
    emit(props, 'viewInit', view);

    if (!init) {
      routerData.current.instance = view;
      _f7View.current = routerData.current.instance;
    }
  };

  if (f7 && !_f7View.current && init) {
    var routerId = getRouterId();
    _f7View.current = f7.views.create(elRef.current, _extends({
      routerId: routerId,
      init: false
    }, noUndefinedProps(props), {
      browserHistoryInitialMatch: browserHistoryInitialMatch,
      on: {
        init: onViewInit
      }
    }));
    routerData.current = {
      routerId: routerId,
      instance: _f7View.current
    };
    f7routers.views.push(routerData.current);

    if (_f7View.current && _f7View.current.router && (url || main)) {
      var initialData = getRouterInitialComponent(_f7View.current.router, initialPageComponent);
      initialPage = initialData.initialPage;
      initialRoute = initialData.initialRoute;

      if (initialRoute && initialRoute.route && initialRoute.route.masterRoute) {
        initialPage = undefined;
        initialRoute = undefined;
      }
    }
  }

  var _useState = useState(initialPage ? [initialPage] : []),
      pages = _useState[0],
      _setPages = _useState[1];

  var onResize = function onResize(view, width) {
    emit(props, 'viewResize', width);
  };

  var onSwipeBackMove = function onSwipeBackMove(data) {
    var swipeBackData = data;
    emit(props, 'swipeBackMove', swipeBackData);
  };

  var onSwipeBackBeforeChange = function onSwipeBackBeforeChange(data) {
    var swipeBackData = data;
    emit(props, 'swipeBackBeforeChange', swipeBackData);
  };

  var onSwipeBackAfterChange = function onSwipeBackAfterChange(data) {
    var swipeBackData = data;
    emit(props, 'swipeBackAfterChange', swipeBackData);
  };

  var onSwipeBackBeforeReset = function onSwipeBackBeforeReset(data) {
    var swipeBackData = data;
    emit(props, 'swipeBackBeforeReset', swipeBackData);
  };

  var onSwipeBackAfterReset = function onSwipeBackAfterReset(data) {
    var swipeBackData = data;
    emit(props, 'swipeBackAfterReset', swipeBackData);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      f7View: function f7View() {
        return _f7View.current;
      }
    };
  });

  var onMount = function onMount() {
    f7ready(function () {
      if (_f7View.current) {
        routerData.current.el = elRef.current;
        routerData.current.pages = pages;

        routerData.current.setPages = function (newPages) {
          _setPages([].concat(newPages));
        };

        if (initialPage && initialPage.isAsync && !initialPage.initialComponent) {
          initialPage.component().then(function () {
            setTimeout(function () {
              _f7View.current.init(elRef.current);

              if (initialPage) {
                initialPage.el = _f7View.current.router.currentPageEl;

                if (initialRoute && initialRoute.route && initialRoute.route.keepAlive) {
                  initialRoute.route.keepAliveData = {
                    pageEl: initialPage.el
                  };
                }
              }
            }, 100);
          });
        } else {
          _f7View.current.init(elRef.current);

          if (initialPage) {
            initialPage.el = _f7View.current.router.currentPageEl;

            if (initialRoute && initialRoute.route && initialRoute.route.keepAlive) {
              initialRoute.route.keepAliveData = {
                pageEl: initialPage.el
              };
            }
          }
        }
      } else {
        var _routerId = getRouterId();

        routerData.current = {
          el: elRef.current,
          routerId: _routerId,
          pages: pages,
          instance: _f7View.current,
          setPages: function setPages(newPages) {
            _setPages([].concat(newPages));
          }
        };
        f7routers.views.push(routerData.current);
        routerData.current.instance = f7.views.create(elRef.current, _extends({
          routerId: _routerId
        }, noUndefinedProps(props), {
          browserHistoryInitialMatch: browserHistoryInitialMatch,
          on: {
            init: onViewInit
          }
        }));
        _f7View.current = routerData.current.instance;
      }

      if (!init) return;

      _f7View.current.on('resize', onResize);

      _f7View.current.on('swipebackMove', onSwipeBackMove);

      _f7View.current.on('swipebackBeforeChange', onSwipeBackBeforeChange);

      _f7View.current.on('swipebackAfterChange', onSwipeBackAfterChange);

      _f7View.current.on('swipebackBeforeReset', onSwipeBackBeforeReset);

      _f7View.current.on('swipebackAfterReset', onSwipeBackAfterReset);
    });
  };

  var onDestroy = function onDestroy() {
    if (_f7View.current) {
      _f7View.current.off('resize', onResize);

      _f7View.current.off('swipebackMove', onSwipeBackMove);

      _f7View.current.off('swipebackBeforeChange', onSwipeBackBeforeChange);

      _f7View.current.off('swipebackAfterChange', onSwipeBackAfterChange);

      _f7View.current.off('swipebackBeforeReset', onSwipeBackBeforeReset);

      _f7View.current.off('swipebackAfterReset', onSwipeBackAfterReset);

      if (_f7View.current.destroy) _f7View.current.destroy();
      _f7View.current = null;
    }

    f7routers.views.splice(f7routers.views.indexOf(routerData.current), 1);
    routerData.current = null;
  };

  useIsomorphicLayoutEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  useIsomorphicLayoutEffect(function () {
    if (routerData.current && f7) {
      f7events.emit('viewRouterDidUpdate', routerData.current);
    }
  });
  useTab(elRef, props);
  var classes = classNames(className, 'view', {
    'view-main': main,
    'tab-active': tabActive,
    tab: tab
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), restChildren, pages.map(function (_ref) {
    var PageComponent = _ref.component,
        pageId = _ref.id,
        pageProps = _ref.props,
        isAsync = _ref.isAsync,
        initialComponent = _ref.initialComponent;
    return /*#__PURE__*/React.createElement(RouterContext.Provider, {
      key: pageId,
      value: {
        router: pageProps.f7router,
        route: pageProps.f7route
      }
    }, initialComponent ? /*#__PURE__*/React.cloneElement(initialComponent, _extends({}, pageProps)) : isAsync ? useAsyncComponent(PageComponent, pageProps) : /*#__PURE__*/React.createElement(PageComponent, pageProps));
  }));
});
View.displayName = 'f7-view';
export default View;