function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, emit } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { f7ready, f7 } from '../shared/f7';
import { watchProp } from '../shared/watch-prop';
import { modalStateClasses } from '../shared/modal-state-classes';


var Popover = /*#__PURE__*/forwardRef(function (props, ref) {
  var _f7Popover = useRef(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      opened = props.opened,
      animate = props.animate,
      targetEl = props.targetEl,
      backdrop = props.backdrop,
      backdropEl = props.backdropEl,
      closeByBackdropClick = props.closeByBackdropClick,
      closeByOutsideClick = props.closeByOutsideClick,
      closeOnEscape = props.closeOnEscape,
      containerEl = props.containerEl;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);
  var isOpened = useRef(opened);
  var isClosing = useRef(false);

  var onOpen = function onOpen(instance) {
    isOpened.current = true;
    isClosing.current = false;
    emit(props, 'popoverOpen', instance);
  };

  var onOpened = function onOpened(instance) {
    emit(props, 'popoverOpened', instance);
  };

  var onClose = function onClose(instance) {
    isOpened.current = false;
    isClosing.current = true;
    emit(props, 'popoverClose', instance);
  };

  var onClosed = function onClosed(instance) {
    isClosing.current = false;
    emit(props, 'popoverClosed', instance);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      f7Popover: function f7Popover() {
        return _f7Popover.current;
      }
    };
  });
  watchProp(opened, function (value) {
    if (!_f7Popover.current) return;

    if (value) {
      _f7Popover.current.open();
    } else {
      _f7Popover.current.close();
    }
  });

  var modalEvents = function modalEvents(method) {
    if (!_f7Popover.current) return;

    _f7Popover.current[method]('open', onOpen);

    _f7Popover.current[method]('opened', onOpened);

    _f7Popover.current[method]('close', onClose);

    _f7Popover.current[method]('closed', onClosed);
  };

  var onMount = function onMount() {
    if (!elRef.current) return;
    var popoverParams = {
      el: elRef.current
    };
    if (targetEl) popoverParams.targetEl = targetEl;
    if ('closeByBackdropClick' in props) popoverParams.closeByBackdropClick = closeByBackdropClick;
    if ('closeByOutsideClick' in props) popoverParams.closeByOutsideClick = closeByOutsideClick;
    if ('closeOnEscape' in props) popoverParams.closeOnEscape = closeOnEscape;
    if ('backdrop' in props) popoverParams.backdrop = backdrop;
    if ('backdropEl' in props) popoverParams.backdropEl = backdropEl;
    if ('animate' in props) popoverParams.animate = animate;
    if ('containerEl' in props) popoverParams.containerEl = containerEl;
    f7ready(function () {
      _f7Popover.current = f7.popover.create(popoverParams);
      modalEvents('on');

      if (opened && targetEl) {
        _f7Popover.current.open(targetEl, false);
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_f7Popover.current) {
      _f7Popover.current.destroy();
    }

    _f7Popover.current = null;
  };

  useIsomorphicLayoutEffect(function () {
    modalEvents('on');
    return function () {
      modalEvents('off');
    };
  });
  useIsomorphicLayoutEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  var classes = classNames(className, 'popover', modalStateClasses({
    isOpened: isOpened,
    isClosing: isClosing
  }), colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/React.createElement("div", {
    className: "popover-angle"
  }), /*#__PURE__*/React.createElement("div", {
    className: "popover-inner"
  }, children));
});
Popover.displayName = 'f7-popover';
export default Popover;