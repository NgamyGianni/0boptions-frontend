function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs, emit } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { useTooltip } from '../shared/use-tooltip';

var FabButton = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      fabClose = props.fabClose,
      label = props.label,
      target = props.target;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);

  var onClick = function onClick(e) {
    emit(props, 'click', e);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current
    };
  });
  useTooltip(elRef, props);
  var classes = classNames(className, {
    'fab-close': fabClose,
    'fab-label-button': label
  }, colorClasses(props));
  var labelEl;

  if (label) {
    labelEl = /*#__PURE__*/React.createElement("span", {
      className: "fab-label"
    }, label);
  }

  return /*#__PURE__*/React.createElement("a", _extends({
    id: id,
    style: style,
    target: target,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick: onClick
  }), children, labelEl);
});
FabButton.displayName = 'f7-fab-button';
export default FabButton;