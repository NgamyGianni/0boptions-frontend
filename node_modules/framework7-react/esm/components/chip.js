function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs, getSlots, emit } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { useTooltip } from '../shared/use-tooltip';
import { useIcon } from '../shared/use-icon';

var Chip = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      media = props.media,
      text = props.text,
      deleteable = props.deleteable,
      mediaTextColor = props.mediaTextColor,
      mediaBgColor = props.mediaBgColor,
      outline = props.outline;
  var extraAttrs = getExtraAttrs(props);

  var onClick = function onClick(event) {
    emit(props, 'click', event);
  };

  var onDeleteClick = function onDeleteClick(event) {
    emit(props, 'delete', event);
  };

  var elRef = useRef(null);
  useImperativeHandle(ref, function () {
    return {
      el: elRef.current
    };
  });
  useTooltip(elRef, props);
  var slots = getSlots(props);
  var iconEl = useIcon(props);
  var mediaEl;
  var labelEl;
  var deleteEl;

  if (media || iconEl || slots && slots.media) {
    var mediaClasses = classNames('chip-media', mediaTextColor && "text-color-" + mediaTextColor, mediaBgColor && "bg-color-" + mediaBgColor);
    mediaEl = /*#__PURE__*/React.createElement("div", {
      className: mediaClasses
    }, iconEl, media, slots.media);
  }

  if (text || slots && (slots.text || slots.default && slots.default.length)) {
    labelEl = /*#__PURE__*/React.createElement("div", {
      className: "chip-label"
    }, text, slots.text, slots.default);
  }

  if (deleteable) {
    deleteEl = /*#__PURE__*/React.createElement("a", {
      className: "chip-delete",
      onClick: onDeleteClick
    });
  }

  var classes = classNames(className, 'chip', {
    'chip-outline': outline
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs, {
    onClick: onClick
  }), mediaEl, labelEl, deleteEl);
});
Chip.displayName = 'f7-chip';
export default Chip;