function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, emit, getSlots, noUndefinedProps } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import Link from './link';
import Input from './input';
import { f7ready, f7 } from '../shared/f7';
import { watchProp } from '../shared/watch-prop';


var Messagebar = /*#__PURE__*/forwardRef(function (props, ref) {
  var _f7Messagebar = useRef(null);

  var updateSheetVisible = useRef(false);
  var updateAttachmentsVisible = useRef(false);
  var className = props.className,
      id = props.id,
      style = props.style,
      sheetVisible = props.sheetVisible,
      attachmentsVisible = props.attachmentsVisible,
      top = props.top,
      _props$resizable = props.resizable,
      resizable = _props$resizable === void 0 ? true : _props$resizable,
      _props$bottomOffset = props.bottomOffset,
      bottomOffset = _props$bottomOffset === void 0 ? 0 : _props$bottomOffset,
      _props$topOffset = props.topOffset,
      topOffset = _props$topOffset === void 0 ? 0 : _props$topOffset,
      maxHeight = props.maxHeight,
      _props$resizePage = props.resizePage,
      resizePage = _props$resizePage === void 0 ? true : _props$resizePage,
      sendLink = props.sendLink,
      value = props.value,
      disabled = props.disabled,
      readonly = props.readonly,
      textareaId = props.textareaId,
      name = props.name,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? 'Message' : _props$placeholder,
      _props$init = props.init,
      init = _props$init === void 0 ? true : _props$init;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);
  var areaElRef = useRef(null);

  var onChange = function onChange(event) {
    emit(props, 'change', event);
  };

  var onInput = function onInput(event) {
    emit(props, 'input', event);
  };

  var onFocus = function onFocus(event) {
    emit(props, 'focus', event);
  };

  var onBlur = function onBlur(event) {
    emit(props, 'blur', event);
  };

  var onClick = function onClick(event) {
    var inputValue = areaElRef.current.el.value;
    var clear = _f7Messagebar.current ? function () {
      _f7Messagebar.current.clear();
    } : function () {};
    emit(props, 'submit', inputValue, clear);
    emit(props, 'send', inputValue, clear);
    emit(props, 'click', event);
  };

  var onAttachmentDelete = function onAttachmentDelete(instance, attachmentEl, attachmentElIndex) {
    emit(props, 'messagebarAttachmentDelete', instance, attachmentEl, attachmentElIndex);
  };

  var onAttachmentClick = function onAttachmentClick(instance, attachmentEl, attachmentElIndex) {
    emit(props, 'messagebarAttachmentClick', instance, attachmentEl, attachmentElIndex);
  };

  var onResizePage = function onResizePage(instance) {
    emit(props, 'messagebarResizePage', instance);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      f7Messagebar: function f7Messagebar() {
        return _f7Messagebar.current;
      }
    };
  });
  watchProp(sheetVisible, function () {
    if (!resizable || !_f7Messagebar.current) return;
    updateSheetVisible.current = true;
  });
  watchProp(attachmentsVisible, function () {
    if (!resizable || !_f7Messagebar.current) return;
    updateAttachmentsVisible.current = true;
  });
  useIsomorphicLayoutEffect(function () {
    if (!_f7Messagebar.current) return;

    if (updateSheetVisible.current) {
      updateSheetVisible.current = false;
      _f7Messagebar.current.sheetVisible = sheetVisible;

      _f7Messagebar.current.resizePage();
    }

    if (updateAttachmentsVisible.current) {
      updateAttachmentsVisible.current = false;
      _f7Messagebar.current.attachmentsVisible = attachmentsVisible;

      _f7Messagebar.current.resizePage();
    }
  });

  var onMount = function onMount() {
    if (!init) return;
    if (!elRef.current) return;
    var params = noUndefinedProps({
      el: elRef.current,
      top: top,
      resizePage: resizePage,
      bottomOffset: bottomOffset,
      topOffset: topOffset,
      maxHeight: maxHeight,
      on: {
        attachmentDelete: onAttachmentDelete,
        attachmentClick: onAttachmentClick,
        resizePage: onResizePage
      }
    });
    f7ready(function () {
      _f7Messagebar.current = f7.messagebar.create(params);
    });
  };

  var onDestroy = function onDestroy() {
    if (_f7Messagebar.current && _f7Messagebar.current.destroy) _f7Messagebar.current.destroy();
    _f7Messagebar.current = null;
  };

  useIsomorphicLayoutEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  var slots = getSlots(props);
  var slotsDefault = slots.default,
      slotsBeforeInner = slots['before-inner'],
      slotsAfterInner = slots['after-inner'],
      slotsSendLink = slots['send-link'],
      slotsInnerStart = slots['inner-start'],
      slotsInnerEnd = slots['inner-end'],
      slotsBeforeArea = slots['before-area'],
      slotsAfterArea = slots['after-area'];
  var innerEndEls = [];
  var messagebarAttachmentsEl;
  var messagebarSheetEl;

  if (slotsDefault) {
    slotsDefault.forEach(function (child) {
      if (typeof child === 'undefined') return;
      var tag = child.type && (child.type.displayName || child.type.name);

      if (tag && (tag.indexOf('messagebar-attachments') >= 0 || tag === 'F7MessagebarAttachments' || tag === 'f7-messagebar-attachments')) {
        messagebarAttachmentsEl = child;
      } else if (tag && (tag.indexOf('messagebar-sheet') >= 0 || tag === 'F7MessagebarSheet' || tag === 'f7-messagebar-sheet')) {
        messagebarSheetEl = child;
      } else {
        innerEndEls.push(child);
      }
    });
  }

  var valueProps = {};
  if ('value' in props) valueProps.value = value;
  var classes = classNames(className, 'toolbar', 'messagebar', {
    'messagebar-attachments-visible': attachmentsVisible,
    'messagebar-sheet-visible': sheetVisible
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), slotsBeforeInner, /*#__PURE__*/React.createElement("div", {
    className: "toolbar-inner"
  }, slotsInnerStart, /*#__PURE__*/React.createElement("div", {
    className: "messagebar-area"
  }, slotsBeforeArea, messagebarAttachmentsEl, /*#__PURE__*/React.createElement(Input, _extends({
    id: textareaId,
    ref: areaElRef,
    type: "textarea",
    wrap: false,
    placeholder: placeholder,
    disabled: disabled,
    name: name,
    readonly: readonly,
    resizable: resizable,
    onInput: onInput,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur
  }, valueProps)), slotsAfterArea), (sendLink && sendLink.length > 0 || slotsSendLink) && /*#__PURE__*/React.createElement(Link, {
    onClick: onClick
  }, slotsSendLink || sendLink), slotsInnerEnd, innerEndEls), slotsAfterInner, messagebarSheetEl);
});
Messagebar.displayName = 'f7-messagebar';
export default Messagebar;