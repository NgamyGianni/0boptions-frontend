function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, noUndefinedProps, emit } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { f7ready, f7 } from '../shared/f7';
import { watchProp } from '../shared/watch-prop';


var Panel = /*#__PURE__*/forwardRef(function (props, ref) {
  var _classNames;

  var _f7Panel = useRef(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      side = props.side,
      effect = props.effect,
      cover = props.cover,
      reveal = props.reveal,
      push = props.push,
      left = props.left,
      opened = props.opened,
      resizable = props.resizable,
      _props$backdrop = props.backdrop,
      backdrop = _props$backdrop === void 0 ? true : _props$backdrop,
      backdropEl = props.backdropEl,
      containerEl = props.containerEl,
      visibleBreakpoint = props.visibleBreakpoint,
      collapsedBreakpoint = props.collapsedBreakpoint,
      swipe = props.swipe,
      swipeNoFollow = props.swipeNoFollow,
      swipeOnlyClose = props.swipeOnlyClose,
      _props$swipeActiveAre = props.swipeActiveArea,
      swipeActiveArea = _props$swipeActiveAre === void 0 ? 0 : _props$swipeActiveAre,
      _props$swipeThreshold = props.swipeThreshold,
      swipeThreshold = _props$swipeThreshold === void 0 ? 0 : _props$swipeThreshold;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);
  var isOpened = useRef(false);
  var isClosing = useRef(false);
  var isCollapsed = useRef(false);
  var isBreakpoint = useRef(false);

  var onOpen = function onOpen(event) {
    isOpened.current = true;
    isClosing.current = false;
    emit(props, 'panelOpen', event);
  };

  var onOpened = function onOpened(event) {
    emit(props, 'panelOpened', event);
  };

  var onClose = function onClose(event) {
    isOpened.current = false;
    isClosing.current = true;
    emit(props, 'panelClose', event);
  };

  var onClosed = function onClosed(event) {
    isClosing.current = false;
    emit(props, 'panelClosed', event);
  };

  var onBackdropClick = function onBackdropClick(event) {
    emit(props, 'click panelBackdropClick', event);
  };

  var onSwipe = function onSwipe(event) {
    emit(props, 'panelSwipe', event);
  };

  var onSwipeOpen = function onSwipeOpen(event) {
    emit(props, 'panelSwipeOpen', event);
  };

  var onBreakpoint = function onBreakpoint(event) {
    isBreakpoint.current = true;
    isCollapsed.current = false;
    emit(props, 'panelBreakpoint', event);
  };

  var onCollapsedBreakpoint = function onCollapsedBreakpoint(event) {
    isBreakpoint.current = false;
    isCollapsed.current = true;
    emit(props, 'panelCollapsedBreakpoint', event);
  };

  var onResize = function onResize() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    emit.apply(void 0, [props, 'panelResize'].concat(args));
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      f7Panel: function f7Panel() {
        return _f7Panel.current;
      }
    };
  });
  watchProp(resizable, function (newValue) {
    if (!_f7Panel.current) return;
    if (newValue) _f7Panel.current.enableResizable();else _f7Panel.current.disableResizable();
  });
  watchProp(opened, function (newValue) {
    if (!_f7Panel.current) return;

    if (newValue) {
      _f7Panel.current.open();
    } else {
      _f7Panel.current.close();
    }
  });

  var modalEvents = function modalEvents(method) {
    if (!_f7Panel.current) return;

    _f7Panel.current[method]('open', onOpen);

    _f7Panel.current[method]('opened', onOpened);

    _f7Panel.current[method]('close', onClose);

    _f7Panel.current[method]('closed', onClosed);

    _f7Panel.current[method]('backdropClick', onBackdropClick);

    _f7Panel.current[method]('swipe', onSwipe);

    _f7Panel.current[method]('swipeOpen', onSwipeOpen);

    _f7Panel.current[method]('collapsedBreakpoint', onCollapsedBreakpoint);

    _f7Panel.current[method]('breakpoint', onBreakpoint);

    _f7Panel.current[method]('resize', onResize);
  };

  var onMount = function onMount() {
    f7ready(function () {
      var $ = f7.$;
      if (!$) return;

      if ($('.panel-backdrop').length === 0) {
        $('<div class="panel-backdrop"></div>').insertBefore(elRef.current);
      }

      var params = noUndefinedProps({
        el: elRef.current,
        resizable: resizable,
        backdrop: backdrop,
        backdropEl: backdropEl,
        containerEl: containerEl,
        visibleBreakpoint: visibleBreakpoint,
        collapsedBreakpoint: collapsedBreakpoint,
        swipe: swipe,
        swipeNoFollow: swipeNoFollow,
        swipeOnlyClose: swipeOnlyClose,
        swipeActiveArea: swipeActiveArea,
        swipeThreshold: swipeThreshold
      });
      _f7Panel.current = f7.panel.create(params);
      modalEvents('on');

      if (opened) {
        _f7Panel.current.open(false);
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_f7Panel.current && _f7Panel.current.destroy) {
      _f7Panel.current.destroy();
    }

    _f7Panel.current = null;
  };

  useIsomorphicLayoutEffect(function () {
    modalEvents('on');
    return function () {
      modalEvents('off');
    };
  });
  useIsomorphicLayoutEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  var sideComputed = side || (left ? 'left' : 'right'); // eslint-disable-next-line

  var effectComputed = effect || (reveal ? 'reveal' : push ? 'push' : 'cover');
  var classes = classNames(className, 'panel', (_classNames = {
    'panel-in': isOpened.current && !isClosing.current && !isBreakpoint.current,
    'panel-in-breakpoint': isBreakpoint.current,
    'panel-in-collapsed': isCollapsed.current,
    'panel-resizable': resizable
  }, _classNames["panel-" + sideComputed] = sideComputed, _classNames["panel-" + effectComputed] = effectComputed, _classNames), colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children, resizable && /*#__PURE__*/React.createElement("div", {
    className: "panel-resize-handler"
  }));
});
Panel.displayName = 'f7-panel';
export default Panel;