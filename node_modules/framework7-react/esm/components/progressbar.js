function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { classNames, getExtraAttrs } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { f7 } from '../shared/f7';

var Progressbar = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      progress = props.progress,
      infinite = props.infinite;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);

  var set = function set(newProgress, speed) {
    if (!f7) return;
    f7.progressbar.set(elRef.current, newProgress, speed);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      set: set
    };
  });
  var transformStyle = {
    transform: progress ? "translate3d(" + (-100 + progress) + "%, 0, 0)" : '',
    WebkitTransform: progress ? "translate3d(" + (-100 + progress) + "%, 0, 0)" : ''
  };
  var classes = classNames(className, 'progressbar', {
    'progressbar-infinite': infinite
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("span", _extends({
    ref: elRef,
    id: id,
    style: style,
    className: classes,
    "data-progress": progress
  }, extraAttrs), /*#__PURE__*/React.createElement("span", {
    style: transformStyle
  }));
});
Progressbar.displayName = 'f7-progressbar';
export default Progressbar;