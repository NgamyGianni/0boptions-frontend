function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, emit, getSlots } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { f7ready, f7 } from '../shared/f7';
import { useTheme } from '../shared/use-theme';
import NavLeft from './nav-left';
import NavTitle from './nav-title';
import NavRight from './nav-right';

var Navbar = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      _props$sliding = props.sliding,
      sliding = _props$sliding === void 0 ? true : _props$sliding,
      large = props.large,
      largeTransparent = props.largeTransparent,
      transparent = props.transparent,
      hidden = props.hidden,
      noShadow = props.noShadow,
      noHairline = props.noHairline,
      backLink = props.backLink,
      backLinkForce = props.backLinkForce,
      backLinkUrl = props.backLinkUrl,
      backLinkShowText = props.backLinkShowText,
      title = props.title,
      subtitle = props.subtitle,
      titleLarge = props.titleLarge,
      innerClass = props.innerClass,
      innerClassName = props.innerClassName;
  var routerPositionClass = useRef('');
  var largeCollapsed = useRef(false);
  var routerNavbarRole = useRef(null);
  var routerNavbarRoleDetailRoot = useRef(false);
  var routerNavbarMasterStack = useRef(false);
  var transparentVisible = useRef(false);
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);
  var theme = useTheme();

  var onHide = function onHide(navbarEl) {
    if (elRef.current !== navbarEl) return;
    emit(props, 'navbarHide');
  };

  var onShow = function onShow(navbarEl) {
    if (elRef.current !== navbarEl) return;
    emit(props, 'navbarShow');
  };

  var onExpand = function onExpand(navbarEl) {
    if (elRef.current !== navbarEl) return;
    largeCollapsed.current = false;
    emit(props, 'navbarExpand');
  };

  var onCollapse = function onCollapse(navbarEl) {
    if (elRef.current !== navbarEl) return;
    largeCollapsed.current = true;
    emit(props, 'navbarCollapse');
  };

  var onNavbarTransparentShow = function onNavbarTransparentShow(navbarEl) {
    if (elRef.current !== navbarEl) return;
    transparentVisible.current = true;
    emit(props, 'navbarTransparentShow');
  };

  var onNavbarTransparentHide = function onNavbarTransparentHide(navbarEl) {
    if (elRef.current !== navbarEl) return;
    transparentVisible.current = false;
    emit(props, 'navbarTransparentHide');
  };

  var onNavbarPosition = function onNavbarPosition(navbarEl, position) {
    if (elRef.current !== navbarEl) return;
    routerPositionClass.current = position ? "navbar-" + position : '';
  };

  var onNavbarRole = function onNavbarRole(navbarEl, rolesData) {
    if (elRef.current !== navbarEl) return;
    routerNavbarRole.current = rolesData.role;
    routerNavbarRoleDetailRoot.current = rolesData.detailRoot;
  };

  var onNavbarMasterStack = function onNavbarMasterStack(navbarEl) {
    if (elRef.current !== navbarEl) return;
    routerNavbarMasterStack.current = true;
  };

  var onNavbarMasterUnstack = function onNavbarMasterUnstack(navbarEl) {
    if (elRef.current !== navbarEl) return;
    routerNavbarMasterStack.current = false;
  };

  var hide = function hide(animate) {
    if (!f7) return;
    f7.navbar.hide(elRef.current, animate);
  };

  var show = function show(animate) {
    if (!f7) return;
    f7.navbar.show(elRef.current, animate);
  };

  var size = function size() {
    if (!f7) return;
    f7.navbar.size(elRef.current);
  };

  var onBackClick = function onBackClick(event) {
    emit(props, 'backClick clickBack', event);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      hide: hide,
      show: show,
      size: size
    };
  });

  var attachEvents = function attachEvents() {
    if (!elRef.current) return;
    f7ready(function () {
      f7.navbar.size(elRef.current);
      f7.on('navbarShow', onShow);
      f7.on('navbarHide', onHide);
      f7.on('navbarCollapse', onCollapse);
      f7.on('navbarExpand', onExpand);
      f7.on('navbarPosition', onNavbarPosition);
      f7.on('navbarRole', onNavbarRole);
      f7.on('navbarMasterStack', onNavbarMasterStack);
      f7.on('navbarMasterUnstack', onNavbarMasterUnstack);
      f7.on('navbarTransparentShow', onNavbarTransparentShow);
      f7.on('navbarTransparentHide', onNavbarTransparentHide);
    });
  };

  var detachEvents = function detachEvents() {
    if (!f7) return;
    f7.off('navbarShow', onShow);
    f7.off('navbarHide', onHide);
    f7.off('navbarCollapse', onCollapse);
    f7.off('navbarExpand', onExpand);
    f7.off('navbarPosition', onNavbarPosition);
    f7.off('navbarRole', onNavbarRole);
    f7.off('navbarMasterStack', onNavbarMasterStack);
    f7.off('navbarMasterUnstack', onNavbarMasterUnstack);
    f7.off('navbarTransparentShow', onNavbarTransparentShow);
    f7.off('navbarTransparentHide', onNavbarTransparentHide);
  };

  useIsomorphicLayoutEffect(function () {
    attachEvents();
    return detachEvents;
  });
  var slots = getSlots(props);
  var leftEl;
  var titleEl;
  var rightEl;
  var titleLargeEl;
  var addLeftTitleClass = theme && theme.ios && f7 && !f7.params.navbar.iosCenterTitle;
  var addCenterTitleClass = theme && theme.md && f7 && f7.params.navbar.mdCenterTitle || theme && theme.aurora && f7 && f7.params.navbar.auroraCenterTitle;
  var isLarge = large || largeTransparent;
  var isTransparent = transparent || isLarge && largeTransparent;
  var isTransparentVisible = isTransparent && transparentVisible.current;
  var classes = classNames(className, 'navbar', routerPositionClass.current, {
    'navbar-hidden': hidden,
    'navbar-large': isLarge,
    'navbar-large-collapsed': isLarge && largeCollapsed.current,
    'navbar-transparent': isTransparent,
    'navbar-transparent-visible': isTransparentVisible,
    'navbar-master': routerNavbarRole.current === 'master',
    'navbar-master-detail': routerNavbarRole.current === 'detail',
    'navbar-master-detail-root': routerNavbarRoleDetailRoot.current === true,
    'navbar-master-stacked': routerNavbarMasterStack.current === true,
    'no-shadow': noShadow,
    'no-hairline': noHairline
  }, colorClasses(props));

  if (backLink || slots['nav-left'] || slots.left) {
    leftEl = /*#__PURE__*/React.createElement(NavLeft, {
      backLink: backLink,
      backLinkUrl: backLinkUrl,
      backLinkForce: backLinkForce,
      backLinkShowText: backLinkShowText,
      onBackClick: onBackClick
    }, slots['nav-left'], slots.left);
  }

  if (title || subtitle || slots.title) {
    titleEl = /*#__PURE__*/React.createElement(NavTitle, {
      title: title,
      subtitle: subtitle
    }, slots.title);
  }

  if (slots['nav-right'] || slots.right) {
    rightEl = /*#__PURE__*/React.createElement(NavRight, null, slots['nav-right'], slots.right);
  }

  var largeTitle = titleLarge;
  if (!largeTitle && large && title) largeTitle = title;

  if (largeTitle || slots['title-large']) {
    titleLargeEl = /*#__PURE__*/React.createElement("div", {
      className: "title-large"
    }, /*#__PURE__*/React.createElement("div", {
      className: "title-large-text"
    }, largeTitle || '', slots['title-large']));
  }

  var innerEl = /*#__PURE__*/React.createElement("div", {
    className: classNames('navbar-inner', innerClass, innerClassName, {
      sliding: sliding,
      'navbar-inner-left-title': addLeftTitleClass,
      'navbar-inner-centered-title': addCenterTitleClass
    })
  }, leftEl, titleEl, rightEl, titleLargeEl, slots.default);
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/React.createElement("div", {
    className: "navbar-bg"
  }), slots['before-inner'], innerEl, slots['after-inner']);
});
Navbar.displayName = 'f7-navbar';
export default Navbar;