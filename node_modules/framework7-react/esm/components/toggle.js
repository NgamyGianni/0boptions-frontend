function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, emit } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { f7ready, f7 } from '../shared/f7';
import { watchProp } from '../shared/watch-prop';
import { useTooltip } from '../shared/use-tooltip';


var Toggle = /*#__PURE__*/forwardRef(function (props, ref) {
  var _f7Toggle = useRef(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      _props$init = props.init,
      init = _props$init === void 0 ? true : _props$init,
      checked = props.checked,
      defaultChecked = props.defaultChecked,
      disabled = props.disabled,
      readonly = props.readonly,
      name = props.name,
      value = props.value;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);
  var inputElRef = useRef(null);

  var onChange = function onChange(event) {
    emit(props, 'change', event);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      f7Toggle: function f7Toggle() {
        return _f7Toggle.current;
      }
    };
  });
  useTooltip(elRef, props);
  watchProp(checked, function (newValue) {
    if (!_f7Toggle.current) return;
    _f7Toggle.current.checked = newValue;
  });

  var onToggleChange = function onToggleChange(toggleInstance) {
    emit(props, 'toggleChange', toggleInstance.checked);
  };

  var toggleEvents = function toggleEvents(method) {
    if (!_f7Toggle.current) return;

    _f7Toggle.current[method]('toggleChange', onToggleChange);
  };

  var onMount = function onMount() {
    f7ready(function () {
      if (!init || !elRef.current) return;
      _f7Toggle.current = f7.toggle.create({
        el: elRef.current
      });
      toggleEvents('on');
    });
  };

  var onDestroy = function onDestroy() {
    if (_f7Toggle.current && _f7Toggle.current.destroy && _f7Toggle.current.$el) {
      _f7Toggle.current.destroy();
    }

    _f7Toggle.current = null;
  };

  useIsomorphicLayoutEffect(function () {
    toggleEvents('on');

    if (inputElRef.current) {
      inputElRef.current.addEventListener('change', onChange);
    }

    return function () {
      toggleEvents('off');

      if (inputElRef.current) {
        inputElRef.current.removeEventListener('change', onChange);
      }
    };
  });
  useIsomorphicLayoutEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  var labelClasses = classNames('toggle', className, {
    disabled: disabled
  }, colorClasses(props));
  var inputEl = /*#__PURE__*/React.createElement("input", {
    ref: inputElRef,
    type: "checkbox",
    name: name,
    disabled: disabled,
    readOnly: readonly,
    checked: checked,
    defaultChecked: defaultChecked,
    value: value,
    onChange: function onChange() {}
  });
  return /*#__PURE__*/React.createElement("label", _extends({
    id: id,
    style: style,
    className: labelClasses,
    ref: elRef
  }, extraAttrs), inputEl, /*#__PURE__*/React.createElement("span", {
    className: "toggle-icon"
  }));
});
Toggle.displayName = 'f7-toggle';
export default Toggle;