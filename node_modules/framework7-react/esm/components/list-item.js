function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle, useContext } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, getSlots, emit, isStringProp } from '../shared/utils';
import { colorClasses, actionsAttrs, actionsClasses, routerAttrs, routerClasses } from '../shared/mixins';
import { useRouteProps } from '../shared/use-route-props';
import { useSmartSelect } from '../shared/use-smart-select';
import { useTooltip } from '../shared/use-tooltip';
import { watchProp } from '../shared/watch-prop';
import { f7ready, f7 } from '../shared/f7';
import ListItemContent from './list-item-content';
import { ListContext } from '../shared/list-context';


/*
const ListItemContent = ({
  props,
  slots,
  inputElRef,
  onChange,
  onClick,
  isMediaComputed,
  isSortableComputed,
  isSortableOppositeComputed,
} = {}) => {
  const {
    radio,
    checkbox,
    value,
    name,
    readonly,
    disabled,
    checked,
    defaultChecked,
    required,
    media,
    header,
    footer,
    title,
    subtitle,
    text,
    after,
    badge,
    badgeColor,
    radioIcon,
    swipeout,
    sortable,
    accordionItem,
  } = props;

};
*/

var ListItem = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      title = props.title,
      link = props.link,
      target = props.target,
      tabLink = props.tabLink,
      tabLinkActive = props.tabLinkActive,
      selected = props.selected,
      mediaItem = props.mediaItem,
      mediaList = props.mediaList,
      divider = props.divider,
      groupTitle = props.groupTitle,
      swipeout = props.swipeout,
      swipeoutOpened = props.swipeoutOpened,
      sortable = props.sortable,
      sortableOpposite = props.sortableOpposite,
      accordionItem = props.accordionItem,
      accordionItemOpened = props.accordionItemOpened,
      smartSelect = props.smartSelect,
      smartSelectParams = props.smartSelectParams,
      noChevron = props.noChevron,
      chevronCenter = props.chevronCenter,
      checkbox = props.checkbox,
      radio = props.radio,
      disabled = props.disabled,
      virtualListIndex = props.virtualListIndex,
      href = props.href;
  var listContext = useContext(ListContext);

  var _ref = listContext || {},
      _ref$listIsMedia = _ref.listIsMedia,
      listIsMedia = _ref$listIsMedia === void 0 ? false : _ref$listIsMedia,
      _ref$listIsSortable = _ref.listIsSortable,
      listIsSortable = _ref$listIsSortable === void 0 ? false : _ref$listIsSortable,
      _ref$listIsSortableOp = _ref.listIsSortableOpposite,
      listIsSortableOpposite = _ref$listIsSortableOp === void 0 ? false : _ref$listIsSortableOp,
      _ref$listIsSimple = _ref.listIsSimple,
      listIsSimple = _ref$listIsSimple === void 0 ? false : _ref$listIsSimple;

  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);
  var linkElRef = useRef(null);

  var _f7SmartSelect = useRef(null);

  var onClick = function onClick(event) {
    if (event.target.tagName.toLowerCase() !== 'input') {
      emit(props, 'click', event);
    }
  };

  var onSwipeoutOverswipeEnter = function onSwipeoutOverswipeEnter(el) {
    if (elRef.current !== el) return;
    emit(props, 'swipeoutOverswipeEnter');
  };

  var onSwipeoutOverswipeExit = function onSwipeoutOverswipeExit(el) {
    if (elRef.current !== el) return;
    emit(props, 'swipeoutOverswipeExit');
  };

  var onSwipeoutDeleted = function onSwipeoutDeleted(el) {
    if (elRef.current !== el) return;
    emit(props, 'swipeoutDeleted');
  };

  var onSwipeoutDelete = function onSwipeoutDelete(el) {
    if (elRef.current !== el) return;
    emit(props, 'swipeoutDelete');
  };

  var onSwipeoutClose = function onSwipeoutClose(el) {
    if (elRef.current !== el) return;
    emit(props, 'swipeoutClose');
  };

  var onSwipeoutClosed = function onSwipeoutClosed(el) {
    if (elRef.current !== el) return;
    emit(props, 'swipeoutClosed');
  };

  var onSwipeoutOpen = function onSwipeoutOpen(el) {
    if (elRef.current !== el) return;
    emit(props, 'swipeoutOpen');
  };

  var onSwipeoutOpened = function onSwipeoutOpened(el) {
    if (elRef.current !== el) return;
    emit(props, 'swipeoutOpened');
  };

  var onSwipeout = function onSwipeout(el, progress) {
    if (elRef.current !== el) return;
    emit(props, 'swipeout', progress);
  };

  var onAccBeforeClose = function onAccBeforeClose(el, prevent) {
    if (elRef.current !== el) return;
    emit(props, 'accordionBeforeClose', prevent);
  };

  var onAccClose = function onAccClose(el) {
    if (elRef.current !== el) return;
    emit(props, 'accordionClose');
  };

  var onAccClosed = function onAccClosed(el) {
    if (elRef.current !== el) return;
    emit(props, 'accordionClosed');
  };

  var onAccBeforeOpen = function onAccBeforeOpen(el, prevent) {
    if (elRef.current !== el) return;
    emit(props, 'accordionBeforeOpen', prevent);
  };

  var onAccOpen = function onAccOpen(el) {
    if (elRef.current !== el) return;
    emit(props, 'accordionOpen');
  };

  var onAccOpened = function onAccOpened(el) {
    if (elRef.current !== el) return;
    emit(props, 'accordionOpened');
  };

  var onChange = function onChange(event) {
    emit(props, 'change', event);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      f7SmartSelect: function f7SmartSelect() {
        return _f7SmartSelect.current;
      }
    };
  });
  useTooltip(elRef, props);
  useRouteProps(linkElRef, props);
  watchProp(swipeoutOpened, function (newValue) {
    if (!swipeout || !elRef.current || !f7) return;

    if (newValue) {
      f7.swipeout.open(elRef.current);
    } else {
      f7.swipeout.close(elRef.current);
    }
  });

  var attachEvents = function attachEvents() {
    f7ready(function () {
      if (swipeout) {
        f7.on('swipeoutOpen', onSwipeoutOpen);
        f7.on('swipeoutOpened', onSwipeoutOpened);
        f7.on('swipeoutClose', onSwipeoutClose);
        f7.on('swipeoutClosed', onSwipeoutClosed);
        f7.on('swipeoutDelete', onSwipeoutDelete);
        f7.on('swipeoutDeleted', onSwipeoutDeleted);
        f7.on('swipeoutOverswipeEnter', onSwipeoutOverswipeEnter);
        f7.on('swipeoutOverswipeExit', onSwipeoutOverswipeExit);
        f7.on('swipeout', onSwipeout);
      }

      if (accordionItem) {
        f7.on('accordionBeforeOpen', onAccBeforeOpen);
        f7.on('accordionOpen', onAccOpen);
        f7.on('accordionOpened', onAccOpened);
        f7.on('accordionBeforeClose', onAccBeforeClose);
        f7.on('accordionClose', onAccClose);
        f7.on('accordionClosed', onAccClosed);
      }
    });
  };

  var detachEvents = function detachEvents() {
    if (!f7) return;
    f7.off('swipeoutOpen', onSwipeoutOpen);
    f7.off('swipeoutOpened', onSwipeoutOpened);
    f7.off('swipeoutClose', onSwipeoutClose);
    f7.off('swipeoutClosed', onSwipeoutClosed);
    f7.off('swipeoutDelete', onSwipeoutDelete);
    f7.off('swipeoutDeleted', onSwipeoutDeleted);
    f7.off('swipeoutOverswipeEnter', onSwipeoutOverswipeEnter);
    f7.off('swipeoutOverswipeExit', onSwipeoutOverswipeExit);
    f7.off('swipeout', onSwipeout);
    f7.off('accordionBeforeOpen', onAccBeforeOpen);
    f7.off('accordionOpen', onAccOpen);
    f7.off('accordionOpened', onAccOpened);
    f7.off('accordionBeforeClose', onAccBeforeClose);
    f7.off('accordionClose', onAccClose);
    f7.off('accordionClosed', onAccClosed);
  };

  useSmartSelect(smartSelect, smartSelectParams, _f7SmartSelect, function () {
    return elRef.current.querySelector('a.smart-select');
  });
  useIsomorphicLayoutEffect(function () {
    f7ready(function () {
      if (swipeout && swipeoutOpened) {
        f7.swipeout.open(elRef.current);
      }
    });
  }, []);
  useIsomorphicLayoutEffect(function () {
    attachEvents();
    return detachEvents;
  });
  var slots = getSlots(props);
  var linkEl;
  var itemContentEl;
  var isMediaComputed = mediaItem || mediaList || listIsMedia;
  var isSortableComputed = sortable === true || sortable === false ? sortable : listIsSortable;
  var isSortableOppositeComputed = isSortableComputed && (sortableOpposite || listIsSortableOpposite);

  if (!listIsSimple) {
    // Item Content
    itemContentEl = /*#__PURE__*/React.createElement(ListItemContent, _extends({}, props, {
      slots: slots,
      onChange: onChange,
      onClick: link || href || accordionItem || smartSelect ? undefined : onClick,
      isMediaComputed: isMediaComputed,
      isSortableComputed: isSortableComputed,
      isSortableOppositeComputed: isSortableOppositeComputed
    })); // Link

    if (link || href || accordionItem || smartSelect) {
      var linkAttrs = _extends({
        href: link === true ? '' : link || href,
        target: target,
        'data-tab': isStringProp(tabLink) && tabLink || undefined
      }, routerAttrs(props), actionsAttrs(props));

      var linkClasses = classNames({
        'item-link': true,
        'smart-select': smartSelect,
        'tab-link': tabLink || tabLink === '',
        'tab-link-active': tabLinkActive,
        'item-selected': selected
      }, routerClasses(props), actionsClasses(props));
      linkEl = /*#__PURE__*/React.createElement("a", _extends({
        ref: linkElRef,
        className: linkClasses
      }, linkAttrs, {
        onClick: onClick
      }), itemContentEl);
    }
  }

  var liClasses = classNames(className, {
    'item-divider': divider,
    'list-group-title': groupTitle,
    'media-item': isMediaComputed,
    swipeout: swipeout,
    'accordion-item': accordionItem,
    'accordion-item-opened': accordionItemOpened,
    disabled: disabled && !(radio || checkbox),
    'no-chevron': noChevron,
    'chevron-center': chevronCenter,
    'disallow-sorting': sortable === false
  }, colorClasses(props));

  if (divider || groupTitle) {
    return /*#__PURE__*/React.createElement("li", {
      ref: elRef,
      id: id,
      style: style,
      className: liClasses,
      "data-virtual-list-index": virtualListIndex,
      onClick: onClick
    }, /*#__PURE__*/React.createElement("span", null, title, children));
  }

  if (listIsSimple) {
    return /*#__PURE__*/React.createElement("li", {
      ref: elRef,
      id: id,
      style: style,
      className: liClasses,
      "data-virtual-list-index": virtualListIndex,
      onClick: onClick
    }, title, children);
  }

  var linkItemEl = link || href || smartSelect || accordionItem ? linkEl : itemContentEl;
  return /*#__PURE__*/React.createElement("li", _extends({
    ref: elRef,
    id: id,
    style: style,
    className: liClasses,
    "data-virtual-list-index": virtualListIndex
  }, extraAttrs), slots['root-start'], swipeout ? /*#__PURE__*/React.createElement("div", {
    className: "swipeout-content"
  }, linkItemEl) : linkItemEl, isSortableComputed && sortable !== false && !isSortableOppositeComputed && /*#__PURE__*/React.createElement("div", {
    className: "sortable-handler"
  }), (swipeout || accordionItem) && slots.default, slots.root, slots['root-end']);
});
ListItem.displayName = 'f7-list-item';
export default ListItem;