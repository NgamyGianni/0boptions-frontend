function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, emit } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { f7, f7ready } from '../shared/f7';

var AccordionItem = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      opened = props.opened;
  var elRef = useRef(null);
  useImperativeHandle(ref, function () {
    return {
      el: elRef.current
    };
  });

  var onBeforeOpen = function onBeforeOpen(el, prevent) {
    if (elRef.current !== el) return;
    emit(props, 'accordionBeforeOpen', prevent);
  };

  var onOpen = function onOpen(el) {
    if (elRef.current !== el) return;
    emit(props, 'accordionOpen');
  };

  var onOpened = function onOpened(el) {
    if (elRef.current !== el) return;
    emit(props, 'accordionOpened');
  };

  var onBeforeClose = function onBeforeClose(el, prevent) {
    if (elRef.current !== el) return;
    emit(props, 'accordionBeforeClose', prevent);
  };

  var onClose = function onClose(el) {
    if (elRef.current !== el) return;
    emit(props, 'accordionClose');
  };

  var onClosed = function onClosed(el) {
    if (elRef.current !== el) return;
    emit(props, 'accordionClosed');
  };

  var attachEvents = function attachEvents() {
    f7ready(function () {
      f7.on('accordionBeforeOpen', onBeforeOpen);
      f7.on('accordionOpen', onOpen);
      f7.on('accordionOpened', onOpened);
      f7.on('accordionBeforeClose', onBeforeClose);
      f7.on('accordionClose', onClose);
      f7.on('accordionClosed', onClosed);
    });
  };

  var detachEvents = function detachEvents() {
    f7.off('accordionBeforeOpen', onBeforeOpen);
    f7.off('accordionOpen', onOpen);
    f7.off('accordionOpened', onOpened);
    f7.off('accordionBeforeClose', onBeforeClose);
    f7.off('accordionClose', onClose);
    f7.off('accordionClosed', onClosed);
  };

  useIsomorphicLayoutEffect(function () {
    attachEvents();
    return detachEvents;
  });
  var extraAttrs = getExtraAttrs(props);
  var classes = classNames(className, 'accordion-item', {
    'accordion-item-opened': opened
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
AccordionItem.displayName = 'f7-accordion-item';
export default AccordionItem;