function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useRef, useImperativeHandle, useState, useContext } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, getComponentId } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { f7ready, f7routers, f7, f7events } from '../shared/f7';
import { useTab } from '../shared/use-tab';
import { RouterContext } from '../shared/router-context';
import { useAsyncComponent } from '../shared/use-async-component';

var Tab = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      tabActive = props.tabActive;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);
  var routerData = useRef(null);
  var routerContext = useContext(RouterContext);
  var initialTabContent = null;

  if (!routerData.current && routerContext && routerContext.route && routerContext.route.route && routerContext.route.route.tab && routerContext.route.route.tab.id === id) {
    var _routerContext$route$ = routerContext.route.route.tab,
        component = _routerContext$route$.component,
        asyncComponent = _routerContext$route$.asyncComponent,
        tabRouteOptions = _routerContext$route$.options;

    if (component || asyncComponent) {
      var parentProps = routerContext.route.route.options && routerContext.route.route.options.props;
      initialTabContent = {
        id: getComponentId(),
        component: component || asyncComponent,
        isAsync: !!asyncComponent,
        props: _extends({}, parentProps || {}, tabRouteOptions && tabRouteOptions.props || {}, {
          f7router: routerContext.router,
          f7route: routerContext.route
        }, routerContext.route.params)
      };
    }
  }

  var _useState = useState(initialTabContent || null),
      tabContent = _useState[0],
      setTabContent = _useState[1];

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current
    };
  });

  if (f7 && !routerData.current) {
    routerData.current = {
      setTabContent: setTabContent
    };
    f7routers.tabs.push(routerData.current);
  }

  var onMount = function onMount() {
    if (elRef.current && initialTabContent) {
      elRef.current.f7RouterTabLoaded = true;
    }

    f7ready(function () {
      if (!routerData.current) {
        routerData.current = {
          el: elRef.current,
          setTabContent: setTabContent
        };
        f7routers.tabs.push(routerData.current);
      } else {
        routerData.current.el = elRef.current;
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (!routerData.current) return;
    f7routers.tabs.splice(f7routers.tabs.indexOf(routerData.current), 1);
    routerData.current = null;
  };

  useIsomorphicLayoutEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  useIsomorphicLayoutEffect(function () {
    if (!routerData.current || !f7) return;
    f7events.emit('tabRouterDidUpdate', routerData.current);
  });
  useTab(elRef, props);
  var classes = classNames(className, 'tab', {
    'tab-active': tabActive
  }, colorClasses(props));

  var renderChildren = function renderChildren() {
    if (!tabContent) return children;

    if (tabContent.isAsync) {
      return useAsyncComponent(tabContent.component, tabContent.props, tabContent.id);
    }

    var TabContent = tabContent.component;
    return /*#__PURE__*/React.createElement(TabContent, _extends({
      key: tabContent.id
    }, tabContent.props));
  };

  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), renderChildren());
});
Tab.displayName = 'f7-tab';
export default Tab;