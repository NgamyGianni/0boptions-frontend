function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useImperativeHandle, useRef } from 'react';
import { f7, f7ready } from '../shared/f7';
import { colorClasses } from '../shared/mixins';
import { modalStateClasses } from '../shared/modal-state-classes';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, emit, getExtraAttrs } from '../shared/utils';
import { watchProp } from '../shared/watch-prop';


var Popup = /*#__PURE__*/forwardRef(function (props, ref) {
  var _f7Popup = useRef(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      tabletFullscreen = props.tabletFullscreen,
      push = props.push,
      opened = props.opened,
      closeByBackdropClick = props.closeByBackdropClick,
      backdrop = props.backdrop,
      backdropEl = props.backdropEl,
      animate = props.animate,
      closeOnEscape = props.closeOnEscape,
      _props$swipeToClose = props.swipeToClose,
      swipeToClose = _props$swipeToClose === void 0 ? false : _props$swipeToClose,
      swipeHandler = props.swipeHandler,
      containerEl = props.containerEl;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);
  var isOpened = useRef(opened);
  var isClosing = useRef(false);

  var onSwipeStart = function onSwipeStart(instance) {
    emit(props, 'popupSwipeStart', instance);
  };

  var onSwipeMove = function onSwipeMove(instance) {
    emit(props, 'popupSwipeMove', instance);
  };

  var onSwipeEnd = function onSwipeEnd(instance) {
    emit(props, 'popupSwipeEnd', instance);
  };

  var onSwipeClose = function onSwipeClose(instance) {
    emit(props, 'popupSwipeClose', instance);
  };

  var onOpen = function onOpen(instance) {
    isOpened.current = true;
    isClosing.current = false;
    emit(props, 'popupOpen', instance);
  };

  var onOpened = function onOpened(instance) {
    emit(props, 'popupOpened', instance);
  };

  var onClose = function onClose(instance) {
    isOpened.current = false;
    isClosing.current = true;
    emit(props, 'popupClose', instance);
  };

  var onClosed = function onClosed(instance) {
    isClosing.current = false;
    emit(props, 'popupClosed', instance);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      f7Popup: function f7Popup() {
        return _f7Popup.current;
      }
    };
  });
  watchProp(opened, function (value) {
    if (!_f7Popup.current) return;

    if (value) {
      _f7Popup.current.open();
    } else {
      _f7Popup.current.close();
    }
  });

  var modalEvents = function modalEvents(method) {
    if (!_f7Popup.current) return;

    _f7Popup.current[method]('swipeStart', onSwipeStart);

    _f7Popup.current[method]('swipeMove', onSwipeMove);

    _f7Popup.current[method]('swipeEnd', onSwipeEnd);

    _f7Popup.current[method]('swipeClose', onSwipeClose);

    _f7Popup.current[method]('open', onOpen);

    _f7Popup.current[method]('opened', onOpened);

    _f7Popup.current[method]('close', onClose);

    _f7Popup.current[method]('closed', onClosed);
  };

  var onMount = function onMount() {
    if (!elRef.current) return;
    var popupParams = {
      el: elRef.current
    };
    if ('closeByBackdropClick' in props) popupParams.closeByBackdropClick = closeByBackdropClick;
    if ('closeOnEscape' in props) popupParams.closeOnEscape = closeOnEscape;
    if ('animate' in props) popupParams.animate = animate;
    if ('backdrop' in props) popupParams.backdrop = backdrop;
    if ('backdropEl' in props) popupParams.backdropEl = backdropEl;
    if ('swipeToClose' in props) popupParams.swipeToClose = swipeToClose;
    if ('swipeHandler' in props) popupParams.swipeHandler = swipeHandler;
    if ('containerEl' in props) popupParams.containerEl = containerEl;
    f7ready(function () {
      _f7Popup.current = f7.popup.create(popupParams);
      modalEvents('on');

      if (opened) {
        _f7Popup.current.open(false);
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_f7Popup.current) {
      _f7Popup.current.destroy();
    }

    _f7Popup.current = null;
  };

  useIsomorphicLayoutEffect(function () {
    modalEvents('on');
    return function () {
      modalEvents('off');
    };
  });
  useIsomorphicLayoutEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  var classes = classNames(className, 'popup', {
    'popup-tablet-fullscreen': tabletFullscreen,
    'popup-push': push
  }, modalStateClasses({
    isOpened: isOpened,
    isClosing: isClosing
  }), colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Popup.displayName = 'f7-popup';
export default Popup;