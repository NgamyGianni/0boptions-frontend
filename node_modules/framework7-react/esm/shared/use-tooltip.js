import { useEffect, useRef } from 'react';
import { watchProp } from './watch-prop';
import { f7, f7ready } from './f7';
export var useTooltip = function useTooltip(elRef, props) {
  var f7Tooltip = useRef(null);
  var tooltip = props.tooltip,
      tooltipTrigger = props.tooltipTrigger;

  var onMount = function onMount() {
    if (!elRef.current) return;
    if (!tooltip) return;
    f7ready(function () {
      f7Tooltip.current = f7.tooltip.create({
        targetEl: elRef.current,
        text: tooltip,
        trigger: tooltipTrigger
      });
    });
  };

  var onDestroy = function onDestroy() {
    if (f7Tooltip.current && f7Tooltip.current.destroy) {
      f7Tooltip.current.destroy();
      f7Tooltip.current = null;
    }
  };

  useEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  watchProp(tooltip, function (value) {
    if (!value && f7Tooltip.current) {
      f7Tooltip.current.destroy();
      f7Tooltip.current = null;
      return;
    }

    if (value && !f7Tooltip.current && f7) {
      f7Tooltip.current = f7.tooltip.create({
        targetEl: elRef.current,
        text: value,
        trigger: tooltipTrigger
      });
      return;
    }

    if (!value || !f7Tooltip.current) return;
    f7Tooltip.current.setText(value);
  });
};